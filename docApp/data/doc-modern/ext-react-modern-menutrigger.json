{
 "title": "&lt;ExtMenutrigger&gt;&lt;/ExtMenutrigger&gt;",
 "ExtWebComponentsTitle": "&lt;ext-menutrigger&gt;&lt;/ext-menutrigger&gt;",
 "ExtAngularTitle": "&lt;ExtMenutrigger&gt;&lt;/ExtMenutrigger&gt;",
 "ExtReactTitle": "&lt;ExtMenutrigger/&gt;",
 "docProperties": [
  {
   "name": "alignSelf",
   "text": "Specifies the self alignment of this widget in a box layout\n"
  },
  {
   "name": "alwaysOnTop",
   "text": "A flag indicating that this component should\nbe above its floated siblings.\n\nThis may be a positive number to prioritize the ordering of multiple visible always on\ntop components.\n\nThis may be set to a *negative* number to prioritize a component to the *bottom* of the\nz-index stack.\n"
  },
  {
   "name": "ariaAttributes",
   "text": "An object containing ARIA attributes to be set\non this Component's ARIA element. Use this to set the attributes that cannot be\ndetermined by the Component's state, such as `aria-live`, `aria-flowto`, etc.\n\n**Note** that this config is only meaningful at the Component rendering time,\nand setting it after that will do nothing.\n"
  },
  {
   "name": "ariaDescribedBy",
   "text": "DOM selector for a child element that is to be used\nas description for this Component, set in `aria-describedby` attribute.\nThe selector works the same way as {@link #cfg!ariaLabelledBy #ariaLabelledBy}.\n"
  },
  {
   "name": "ariaLabel",
   "text": "ARIA label for this Component. It is best to use\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} option instead, because screen readers prefer\n`aria-labelledby` attribute to `aria-label`. {@link #cfg!ariaLabel #ariaLabel} and\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} config options are mutually exclusive.\n"
  },
  {
   "name": "ariaLabelledBy",
   "text": "DOM selector for a child element that is to be used\nas label for this Component, set in `aria-labelledby` attribute.\nIf the selector is by `{@link #cfg!id #id}`, the label element can be any existing element,\nnot necessarily a child of the main Component element.\n\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} and {@link #cfg!ariaLabel #ariaLabel} config options are\nmutually exclusive, and `{@link #cfg!ariaLabelledBy ariaLabelledBy}` has the higher precedence.\n"
  },
  {
   "name": "bind",
   "text": "Setting this config option adds or removes data bindings for other configs.\nFor example, to bind the `title` config:\n\n     var panel = Ext.create({\n         xtype: 'panel',\n         bind: {\n             title: 'Hello {user.name}'\n         }\n     });\n\nTo dynamically add bindings:\n\n     panel.setBind({\n         title: 'Greetings {user.name}!'\n     });\n\nTo remove bindings:\n\n     panel.setBind({\n         title: null\n     });\n\nThe bind expressions are presented to `{@link Ext.app.ViewModel#method!bind Ext.app.ViewModel#bind}`. The\n`ViewModel` instance is determined by `{@link #method!lookupViewModel lookupViewModel}`.\n\n**Note:** If  bind is passed as a string, it will use the\n{@link Ext.Component#property!defaultBindProperty Ext.Component#property-defaultBindProperty} for the binding.\n"
  },
  {
   "name": "border",
   "text": "Enables or disables bordering on this component.\nThe following values are accepted:\n\n- `null` or `true (default): Do nothing and allow the border to be specified\nby the theme.\n- `false`: suppress the default border provided by the theme.\n\nPlease note that enabling bordering via this config will not add a `border-color`\nor `border-style` CSS property to the component; you provide the `border-color`\nand `border-style` via CSS rule or {@link #cfg!style #style} configuration\n(if not already provide by the theme).\n\n## Using {@link #cfg!style #style}:\n\n    Ext.Viewport.add({\n        centered: true,\n        width: 100,\n        height: 100,\n\n        style: 'border: 1px solid blue;'\n        // ...\n    });\n\n## Using CSS:\n\n    Ext.Viewport.add({\n        centered: true,\n        width: 100,\n        height: 100,\n\n        cls: 'my-component'\n        // ...\n    });\n\nAnd your CSS file:\n\n    .my-component {\n        border: 1px solid red;\n    }\n"
  },
  {
   "name": "cls",
   "text": "The CSS class to add to this widget's element, in\naddition to the {@link #property!baseCls #baseCls}. In many cases, this property will be specified\nby the derived widget class. See {@link #cfg!userCls #userCls} for adding additional CSS\nclasses to widget instances (such as items in a {@link Ext.Container}).\n"
  },
  {
   "name": "constrainAlign",
   "text": "A specification of the constraint to apply when {@link #showBy} or {@link #method!alignTo #alignTo}\nis called to align a {@link #cfg!floated #floated} or positioned component.\n\nDefaults to the parent container for *positioned* components (components\nwhich have their {@link #cfg!top}, {@link #cfg!right}, {@link #cfg!bottom} or\n{@link #cfg!left} set to move them out of their container's layout flow).\n\nDefaults to the viewport for {@link #cfg!floated #floated} components.\n\nMay be a {@link Ext.ComponentQuery} selector to find an ancestor\ncomponent to constrain within.\n\nMay be `false` to specify that constraining is not applied.\n\nYou may also specify an element, or a {@link Ext.util.Region}\n"
  },
  {
   "name": "controller",
   "text": "A string alias, a configuration object or an instance of a `ViewController` for\nthis container. Sample usage:\n\n    Ext.define('MyApp.UserController', {\n        alias: 'controller.user'\n    });\n\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: 'user'\n    });\n    // Or\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: {\n            type: 'user',\n            someConfig: true\n        }\n    });\n\n    // Can also instance at runtime\n    var ctrl = new MyApp.UserController();\n    var view = new UserContainer({\n        controller: ctrl\n    });\n"
  },
  {
   "name": "defaultListenerScope",
   "text": "If `true`, this component will be the default scope (this pointer) for events\nspecified with string names so that the scope can be dynamically resolved. The\ncomponent will automatically become the defaultListenerScope if a\n{@link #cfg!controller #controller} is specified.\n\nSee the introductory docs for {@link Ext.Container Ext.container.Container} for some sample\nusages.\n\n**NOTE**: This value can only be reliably set at construction time. Setting it\nafter that time may not correctly rewire all of the potentially effected\nlisteners.\n"
  },
  {
   "name": "destroyMenu",
   "text": "Whether or not to destroy any associated menu when this trigger is destroyed.\nIn addition, a value of `true` for this config will destroy the currently bound menu\nwhen a new menu is set in {@link #setMenu} unless overridden by that method's destroyMenu\nfunction argument.\n"
  },
  {
   "name": "disabled",
   "text": "Whether or not this component is disabled\n"
  },
  {},
  {
   "name": "field",
   "text": "The text field that created this trigger\n"
  },
  {
   "name": "flex",
   "text": "The flex of this item *if* this item item is inside a {@link Ext.layout.HBox}\nor {@link Ext.layout.VBox} layout.\n\nYou can also update the flex of a component dynamically using\nthe {@link Ext.layout.FlexBox#setItemFlex} method.\n\nWhen supplied as a string or number this option supports the same syntax\nas CSS [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex).\nFor example:\n\n    flex: '1 2 auto'\n\nsets `flex-grow` property to `0`, `flex-shrink` to `2` and `flex-basis` to\n`'auto'`.\n\nThe default `flex-shrink` value for box layout items is set to `0` in the\nstylesheet, which is different from the browser's default `flex-shrink` value\nof `1`.  This accommodates the majority use case for applications since where\nnon-flexed components are typically not expected to shrink smaller than their\ndefault size.\n\nFor convenience when only a single number is supplied it is used as the value\nfor both `flex-grow` and `flex-shrink`, for example `flex: 3` is the same as\n`flex: '3 3'`\n\nAn object form is also accepted:\n\n    flex: {\n        grow: 1,\n        shrink: 2,\n        basis: 'auto'\n    }\n\nWhen the object form is supplied `shrink` always defaults to `0` regardless\nof the value of `grow`.\n\nAlthough `'auto'` is the default value for flex-basis, flex-basis defaults to 0%\nwhen flex is supplied as a single numeric or string value (e.g. `flex: 1`). If\nthis behavior is not desired either explicitly set flex-basis to `'auto'` or use\nthe object form to set only grow and/or shrink:\n\n    flex: {\n        grow: 2\n    }\n"
  },
  {
   "name": "floated",
   "text": "A Component may be floated above all other components in the application. This means that\nthe component is absolutely positioned, and will move to the front and occlude other\nsibling floated component if clicked.\n\nA Floated component may have floated descendants. It will bring these decendants to the\nfront with it when brought to the front of its sibling floated components.\n\nBy default, descendant floated components are all positioned using the viewport\ncoordinate system. To make a floating component a positioning parent for descendants,\nand have the ancestors positioned relatively, configure the parent floated component\nwith `{@link #cfg!relative #cfg-relative}: true`.\n"
  },
  {
   "name": "focusCls",
   "text": "CSS class that will be added to focused\ncomponent's {@link #property!focusClsEl #focusClsEl}, and removed when component blurs.\n"
  },
  {
   "name": "focusOnTap",
   "text": "If `true`, the field will be focused upon tap of the trigger.\n\nTo show the keyboard, tap the input field while it is focused.\n"
  },
  {
   "name": "group",
   "text": "The name of an optional group trigger that this trigger belongs to.  If no trigger\nExists by that name one will automatically be created.  A group trigger is a\nspecial trigger that contains other triggers.  Those triggers' elements are\nappended to the group trigger's element in the DOM.\n\nThe {@link #weight} of grouped triggers is relative to other triggers in the group.\n"
  },
  {
   "name": "handler",
   "text": "Function to run when trigger is clicked or tapped.\n"
  },
  {
   "name": "height",
   "text": "The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`,\n`30%`, etc. By default, if this is not explicitly set, this Component's element will\nsimply have its own natural size. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n"
  },
  {
   "name": "hidden",
   "text": "Whether or not this Component is hidden (its CSS `display` property is set to `none`).\n\nDefaults to `true` for {@link #cfg!floated #floated} Components.\n"
  },
  {
   "name": "hideMode",
   "text": "A String which specifies how this component's DOM element will be hidden. The\naccepted values are any of these:\n\n- `'clip'` : Hide using {@link Ext.dom.Element#static-property!CLIP clip}.\n- `'display'` : Hide using {@link Ext.dom.Element#static-property!DISPLAY display}.\n- `'offsets'` : Hide using positioning {@link Ext.dom.Element#static-property!OFFSETS offsets}.\n- `'opacity'` : Hide using {@link Ext.dom.Element#static-property!OPACITY opacity}.\n- `'visibility'` : Hide using {@link Ext.dom.Element#static-property!VISIBILITY visibility}.\n\nHiding using ``display`` results in having no dimensions as well as resetting\nscroll positions to 0.\n\nThe other modes overcome this but may have different trade-offs in certain\ncircumstances.\n"
  },
  {
   "name": "iconCls",
   "text": "One or more space separated CSS classes to be applied to the icon element.\nThe CSS rule(s) applied should specify a background image to be used as the\nicon.\n\nAn example of specifying a custom icon class would be something like:\n\n    // specify the property in the config for the class:\n    iconCls: 'my-home-icon'\n\n    // css rule specifying the background image to be used as the icon image:\n    .my-home-icon {\n        background-image: url(../images/my-home-icon.gif) !important;\n    }\n\nIn addition to specifying your own classes, you can use the font icons\nprovided in the SDK using the following syntax:\n\n    // using Font Awesome\n    iconCls: 'x-fa fa-home'\n\n    // using Pictos\n    iconCls: 'pictos pictos-home'\n\nDepending on the theme you're using, you may need include the font icon\npackages in your application in order to use the icons included in the\nSDK.  For more information see:\n\n - [Font Awesome icons](http://fontawesome.io/cheatsheet/)\n - [Pictos icons](../guides/core_concepts/font_ext.html)\n - [Theming Guide](../guides/core_concepts/theming.html)\n"
  },
  {
   "name": "id",
   "text": "The **unique id of this component instance.**\n\nIt should not be necessary to use this configuration except for singleton objects in\nyour application. Components created with an id may be accessed globally\nusing {@link Ext#method!getCmp Ext.getCmp}.\n\nInstead of using assigned ids, use the {@link #cfg!itemId #itemId} config,\nand {@link Ext.ComponentQuery} which provides selector-based searching\nfor Sencha Components analogous to DOM querying. The {@link Ext.Container} class\ncontains {@link Ext.Container#method!down shortcut methods} to query its descendant Components\nby selector.\n\nNote that this id will also be used as the element id for the containing HTML element\nthat is rendered to the page for this component. This allows you to write id-based CSS\nrules to style the specific instance of this component uniquely, and also to select\nsub-elements using this component's id as the parent.\n\n**Note**: to avoid complications imposed by a unique id also see `{@link #cfg!itemId #itemId}`.\n\nDefaults to an auto-assigned id.\n"
  },
  {
   "name": "instanceCls",
   "text": "\nAn extra CSS class or classes to augment the {@link #property!classCls #classCls} on an individual instance\n"
  },
  {
   "name": "itemId",
   "text": "An itemId can be used as an alternative way to get a reference to a component when no\nobject reference is available. Instead of using an `{@link #cfg!id #id}` with {@link Ext#method!getCmp Ext#getCmp},\nuse `{@link #cfg!itemId itemId}` with {@link Ext.Container#method!getComponent Ext.Container#getComponent} which will retrieve `{@link #cfg!itemId itemId}`'s or\n{@link #cfg!id #id}'s. Since `{@link #cfg!itemId itemId}`'s are an index to the container's internal MixedCollection,\nthe `{@link #cfg!itemId itemId}` is scoped locally to the container - avoiding potential conflicts with\n{@link Ext.ComponentManager} which requires a **unique** `{@link #cfg!id #id}`.\n\nAlso see {@link #cfg!id #id}, {@link Ext.Container#method!query Ext.Container#query}, {@link Ext.Container#method!down Ext.Container#down} and\n{@link Ext.Container#method!child Ext.Container#child}.\n"
  },
  {
   "name": "keyMap",
   "text": "An object containing handlers for keyboard events. The property names of this\nobject are the key name and any modifiers. The values of the properties are the\ndescriptors of how to handle each event.\n\nThe handler descriptor can be simply the handler function(either the\nliteral function or the method name), or it can be an object with these\nproperties:\n\n - `handler`: The function or its name to call to handle the event.\n - `scope`: The this pointer context (can be \"this\" or \"controller\").\n - `event`: An optional override of the key event to which to listen.\n\n**Important:** Calls to `setKeyMap` do not replace the entire `{@link #cfg!keyMap keyMap}` but\ninstead update the provided mappings. That is, unless `null` is passed as the\nvalue of the `{@link #cfg!keyMap keyMap}` which will clear the `{@link #cfg!keyMap keyMap}` of all entries.\n"
  },
  {
   "name": "keyMapEnabled",
   "text": "Enables or disables processing keys in the `{@link #cfg!keyMap keyMap}`. This value starts as\n`null` and if it is `null` when `{@link #method!initKeyMap initKeyMap}` is called, it will automatically\nbe set to `true`. Since `{@link #method!initKeyMap initKeyMap}` is called by `{@link Ext.Component}` at the\nproper time, this is not something application code normally handles.\n"
  },
  {
   "name": "keyMapTarget",
   "text": "The name of the member that should be used to listen for keydown/keypress events.\nThis is intended to be controlled at the class level not per instance.\n"
  },
  {
   "name": "listeners",
   "text": "\nA config object containing one or more event handlers to be added to this object during\ninitialization. This should be a valid listeners config object as specified in the\n{@link Ext.util.Observable#method!addListener addListener} example for attaching\nmultiple handlers at once.\n\n**DOM events from Ext JS {@link Ext.Component}**\n\nWhile _some_ Ext JS Component classes export selected DOM events (e.g. \"click\",\n\"mouseover\" etc), this is usually only done when extra value can be added. For example\nthe {@link Ext.view.View DataView}'s **`{@link Ext.view.View#itemclick itemclick}`**\nevent passing the node clicked on. To access DOM events directly from a child element\nof a Component, we need to specify the `element` option to identify the Component\nproperty to add a DOM listener to:\n\n    new Ext.panel.Panel({\n        width: 400,\n        height: 200,\n        dockedItems: [{\n            xtype: 'toolbar'\n        }],\n        listeners: {\n            click: {\n                element: 'el', //bind to the underlying el property on the panel\n                fn: function(){ console.log('click el'); }\n            },\n            dblclick: {\n                element: 'body', //bind to the underlying body property on the panel\n                fn: function(){ console.log('dblclick body'); }\n            }\n        }\n    });\n"
  },
  {
   "name": "margin",
   "text": "The margin to use on this Component. Can be specified as a number (in which\ncase all edges get the same margin) or a CSS string like '5 10 10 10'\n"
  },
  {
   "name": "menu",
   "text": "A menu or menu configuration. This can be a reference to a menu instance, a menu\nconfig object or the `xtype` alias of a {@link Ext.menu.Menu}-derived class.\n"
  },
  {
   "name": "menuAlign",
   "text": "The position to align the menu to (see {@link Ext.util.Positionable#method!alignTo Ext.util.Positionable#alignTo}\nfor more details).\n"
  },
  {
   "name": "name",
   "text": "The key used to identify this trigger in the text field's triggers config.\n"
  },
  {
   "name": "nameable",
   "text": "Set to `true` for this component's `name` property to be tracked by its containing\n`nameHolder`.\n"
  },
  {
   "name": "plugins",
   "text": "This config describes one or more plugin config objects used to create plugin\ninstances for this component.\n\nPlugins are a way to bundle and reuse custom functionality. Plugins should extend\n`{@link Ext.plugin.Abstract}` but technically the only requirement for a valid plugin\nis that it contain an `init` method that accepts a reference to its owner. Once\na plugin is created, the owner will call the `init` method, passing a reference\nto itself. Each plugin can then call methods or respond to events on its owner\nas needed to provide its functionality.\n\nThis config's value can take several different forms.\n\nThe value can be a single string with the plugin's {@link Ext.enums.Plugin alias}:\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: 'listpaging'\n     });\n\nIn the above examples, the string \"listpaging\" is the type alias for\n`{@link Ext.dataview.plugin.ListPaging}`. The full alias includes the \"plugin.\" prefix\n(i.e., 'plugin.listpaging').\n\nThe preferred form for multiple plugins or to configure plugins is the\nkeyed-object form (new in version 6.5):\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: {\n             pullrefresh: true,\n             listpaging: {\n                 autoPaging: true,\n                 weight: 10\n             }\n         }\n     });\n\nThe object keys are the `id`'s as well as the default type alias. This form\nallows the value of the `{@link #cfg!plugins plugins}` to be merged from base class to derived class\nand finally with the instance configuration. This allows classes to define a\nset of plugins that derived classes or instantiators can further configure or\ndisable. This merge behavior is a feature of the\n{@link Ext.Class#cfg!config}.\n\nThe `{@link #cfg!plugins plugins}` config can also be an array of plugin aliases (arrays are not\nmerged so this form does not respect plugins defined by the class author):\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: ['listpaging', 'pullrefresh']\n     });\n\nAn array can also contain elements that are config objects with a `type`\nproperty holding the type alias:\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: ['pullrefresh', {\n             type: 'listpaging',\n             autoPaging: true\n         }]\n     });\n"
  },
  {
   "name": "publishes",
   "text": "One or more names of config properties that this component should publish\nto its ViewModel. Generally speaking, only properties defined in a class config\nblock (including ancestor config blocks and mixins) are eligible for publishing\nto the viewModel. Some components override this and publish their most useful\nconfigs by default.\n\n**Note:** We'll discuss publishing properties **not** found in the config block below.\n\nValues determined to be invalid by component (often form fields and model validations)\nwill not be published to the ViewModel.\n\nThis config uses the `{@link #cfg!reference #cfg-reference}` to determine the name of the data\nobject to place in the `ViewModel`. If `{@link #cfg!reference reference}` is not set then this config\nis ignored.\n\nBy using this config and `{@link #cfg!reference #cfg-reference}` you can bind configs between\ncomponents. For example:\n\n     ...\n         items: [{\n             xtype: 'textfield',\n             reference: 'somefield',  // component's name in the ViewModel\n             publishes: 'value' // value is not published by default\n         },{\n             ...\n         },{\n             xtype: 'displayfield',\n             bind: 'You have entered \"{somefield.value}\"'\n         }]\n     ...\n\nClasses must provide this config as an Object:\n\n     Ext.define('App.foo.Bar', {\n         publishes: {\n             foo: true,\n             bar: true\n         }\n     });\n\nThis is required for the config system to properly merge values from derived\nclasses.\n\nFor instances this value can be specified as a value as show above or an array\nor object as follows:\n\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: [\n             'value',\n             'rawValue',\n             'dirty'\n         ]\n     }\n\n     // This achieves the same result as the above array form.\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: {\n             value: true,\n             rawValue: true,\n             dirty: true\n         }\n     }\n\nIn some cases, users may want to publish a property to the viewModel that is not found\nin a class  config block. In these situations, you may utilize {@link #method!publishState #publishState}\nif the property has a  setter method. Let's use\n{@link Ext.form.Labelable#setFieldLabel setFieldLabel} as an example:\n\n      setFieldLabel: function(fieldLabel) {\n          this.callParent(arguments);\n          this.publishState('fieldLabel', fieldLabel);\n      }\n\nWith the above chunk of code, fieldLabel may now be published to the viewModel.\n"
  },
  {
   "name": "reference",
   "text": "Specifies a name for this component inside its component hierarchy. This name\nmust be unique within its {@link Ext.Container#cfg!referenceHolder view}\nor its {@link Ext.app.ViewController}. See the documentation in\n{@link Ext.Container Ext.container.Container} for more information about references.\n\n**Note**: Valid identifiers start with a letter or underscore and are followed\nby zero or more additional letters, underscores or digits. References are case\nsensitive.\n"
  },
  {
   "name": "relative",
   "text": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nConfigure this as `true` if you require descendant floated components to be positioned\nrelative to this component's coordinate space, not the viewport's coordinate space.\n\n*Note:* The coordinate space is this Component's encapsulating element's area. Not that\nof the inner element in which static child items are rendered by the layout.\n"
  },
  {
   "name": "renderTo",
   "text": "Optional element to render this Component to.\nNot required if this component is an {@link Ext.Container#cfg!items item} of a Container\nof a Container.\n"
  },
  {
   "name": "repeat",
   "text": "`true` to attach a {@link Ext.util.ClickRepeater} to the trigger,\nor a config object for a tap repeater.\n"
  },
  {
   "name": "ripple",
   "text": "Set to truthy, Color or Object value for the ripple.\n"
  },
  {
   "name": "scope",
   "text": "Execution context for the {@link #cfg!handler #handler} function.\n"
  },
  {
   "name": "session",
   "text": "If provided this creates a new `Session` instance for this component. If this\nis a `Container`, this will then be inherited by all child components.\n\nTo create a new session you can specify `true`:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: true,\n\n         items: [{\n             ...\n         }]\n     });\n\nAlternatively, a config object can be provided:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: {\n             ...\n         },\n\n         items: [{\n             ...\n         }]\n     });\n"
  },
  {
   "name": "shadow",
   "text": "Configure as `true` for the component to have a drop shadow. 'false' will suppress any\ndefault shadow. By default the theme will determine the presence of a shadow.\n"
  },
  {
   "name": "shareableName",
   "text": "Set to `true` to allow this component's `name` to be shared by other items in the\nsame `nameHolder`. Such items will be returned in an array from `lookupName`.\n"
  },
  {
   "name": "shim",
   "text": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nConfigure as `true` for the component to use an `<iframe>` as an underlay to ensure\ncertain non-standard browser plugins are occluded by this component.\n"
  },
  {
   "name": "side",
   "text": "The side of the text field's input to render the trigger on.\n"
  },
  {
   "name": "style",
   "text": "Additional CSS styles that will be rendered into an inline style attribute when\nthe widget is rendered.\n\nYou can pass either a string syntax:\n\n    style: 'background:red'\n\nOr by using an object:\n\n    style: {\n        background: 'red'\n    }\n\nWhen using the object syntax, you can define CSS Properties by using a string:\n\n    style: {\n        'border-left': '1px solid red'\n    }\n\nAlthough the object syntax is much easier to read, we suggest you to use the\nstring syntax for better performance.\n"
  },
  {
   "name": "toFrontOnShow",
   "text": "True to automatically call {@link #method!toFront #toFront} when a {@link #cfg!floated #cfg-floated} Component is\nshown.\n"
  },
  {
   "name": "touchAction",
   "text": "\nEmulates the behavior of the CSS\n[touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)\nproperty in a cross-browser compatible manner.\n\nKeys in this object are touch action names, and values are `false` to disable\na touch action or `true` to enable it.  Accepted keys are:\n\n- `panX`\n- `panY`\n- `pinchZoom`\n- `doubleTapZoom`\n\nAll touch actions are enabled (`true`) by default, so it is usually only necessary\nto specify which touch actions to disable.  For example, the following disables\nonly horizontal scrolling and pinch-to-zoom on the component's main element:\n\n    touchAction: {\n        panX: false,\n        pinchZoom: false\n    }\n\nTouch actions can be specified on reference elements using the reference element\nname, for example:\n\n    // disables horizontal scrolling on the main element, and double-tap-zoom\n    // on the child element named \"body\"\n    touchAction: {\n        panY: false\n        body: {\n            doubleTapZoom: false\n        }\n    }\n\nThe primary motivation for setting the touch-action of an element is to prevent\nthe browser's default handling of a gesture such as pinch-to-zoom, or\ndrag-to-scroll, so that the application can implement its own handling of that\ngesture on the element.  Suppose, for example, a component has a custom drag\nhandler on its element and wishes to prevent horizontal scrolling of its container\nwhile it is being dragged:\n\n    Ext.create('Ext.Widget', {\n        touchAction: {\n            panX: false\n        },\n        listeners: {\n            drag: function(e) {\n                // implement drag logic\n            }\n        }\n    });\n"
  },
  {
   "name": "translatable"
  },
  {
   "name": "triggers",
   "text": "The triggers contained in this trigger (only applicable for trigger groups)\n"
  },
  {
   "name": "twoWayBindable",
   "text": "This object holds a map of `config` properties that will update their binding\nas they are modified. For example, `value` is a key added by form fields. The\nform of this config is the same as `{@link #cfg!publishes}`.\n\nThis config is defined so that updaters are not created and added for all\nbound properties since most cannot be modified by the end-user and hence are\nnot appropriate for two-way binding.\n"
  },
  {
   "name": "ui",
   "text": "The ui or uis to be used on this Component\n\nWhen a ui is configured, CSS class names are added to the {@link #property!element #element}, created\nby appending the ui name(s) to each {@link #property!classCls #classCls} and/or {@link #property!baseCls #baseCls}.\n"
  },
  {
   "name": "userCls",
   "text": "One or more CSS classes to add to the component's primary element. This config\nis intended solely for use by the component instantiator (the \"user\"), not by\nderived classes.\n\nFor example:\n\n     items: [{\n         xtype: 'button',\n         userCls: 'my-button'\n     ...\n     }]\n"
  },
  {
   "name": "viewModel",
   "text": "The `ViewModel` is a data provider for this component and its children. The\ndata contained in the `ViewModel` is typically used by adding `{@link #cfg!bind bind}` configs\nto the components that want present or edit this data.\n\nWhen set, the `ViewModel` is created and links to any inherited `{@link #cfg!viewModel viewModel}`\ninstance from an ancestor container as the \"parent\". The `ViewModel` hierarchy,\nonce established, only supports creation or destruction of children. The\nparent of a `ViewModel` cannot be changed on the fly.\n\nIf this is a root-level `ViewModel`, the data model connection is made to this\ncomponent's associated `{@link Ext.data.Session}`. This is\ndetermined by calling `getInheritedSession`.\n"
  },
  {
   "name": "width",
   "text": "The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`,\n`30%`, etc. By default, if this is not explicitly set, this Component's element will\nsimply have its own natural size. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n"
  },
  {
   "name": "x",
   "text": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nThe x position at which to position this component. This is usually viewport-relative.\nBut if there is a `{@link #cfg!relative #relative}: true` ancestor, it will be relative to that.\n"
  },
  {
   "name": "y",
   "text": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nThe x position at which to position this component. This is usually viewport-relative.\nBut if there is a `{@link #cfg!relative #relative}: true` ancestor, it will be relative to that.\n"
  }
 ],
 "docEvents": [
  {
   "name": "beforedisabledchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforeheightchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforehiddenchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforetofront",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "beforewidthchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "blur",
   "parameters": [
    "sender",
    "event"
   ]
  },
  {
   "name": "disabledchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "focus",
   "parameters": [
    "sender",
    "event"
   ]
  },
  {
   "name": "focusenter",
   "parameters": [
    "sender",
    "event"
   ]
  },
  {
   "name": "focusleave",
   "parameters": [
    "sender",
    "event"
   ]
  },
  {
   "name": "heightchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "hiddenchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "tofront",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "widthchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  }
 ],
 "eventString": "undefined\n<div class=\"name\" onclick=\"toggleIt('event','Beforedisabledchange')\">onBeforedisabledchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforedisabledchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforedisabledchange = ({sender, value, oldValue}) => {\n    console.log('Beforedisabledchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtMenutrigger onBeforedisabledchange={this.onBeforedisabledchange}&gt;&lt;/ExtMenutrigger&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforeheightchange')\">onBeforeheightchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforeheightchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforeheightchange = ({sender, value, oldValue}) => {\n    console.log('Beforeheightchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtMenutrigger onBeforeheightchange={this.onBeforeheightchange}&gt;&lt;/ExtMenutrigger&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforehiddenchange')\">onBeforehiddenchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforehiddenchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforehiddenchange = ({sender, value, oldValue}) => {\n    console.log('Beforehiddenchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtMenutrigger onBeforehiddenchange={this.onBeforehiddenchange}&gt;&lt;/ExtMenutrigger&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforetofront')\">onBeforetofront = ({sender})=> {);</div>\n<pre id=\"Beforetofront\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforetofront = ({sender}) => {\n    console.log('Beforetofront')\n  };\n\n  render() {\n    return (\n      &lt;ExtMenutrigger onBeforetofront={this.onBeforetofront}&gt;&lt;/ExtMenutrigger&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforewidthchange')\">onBeforewidthchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforewidthchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforewidthchange = ({sender, value, oldValue}) => {\n    console.log('Beforewidthchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtMenutrigger onBeforewidthchange={this.onBeforewidthchange}&gt;&lt;/ExtMenutrigger&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Blur')\">onBlur = ({sender, event})=> {);</div>\n<pre id=\"Blur\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBlur = ({sender, event}) => {\n    console.log('Blur')\n  };\n\n  render() {\n    return (\n      &lt;ExtMenutrigger onBlur={this.onBlur}&gt;&lt;/ExtMenutrigger&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Disabledchange')\">onDisabledchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Disabledchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onDisabledchange = ({sender, value, oldValue}) => {\n    console.log('Disabledchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtMenutrigger onDisabledchange={this.onDisabledchange}&gt;&lt;/ExtMenutrigger&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Focus')\">onFocus = ({sender, event})=> {);</div>\n<pre id=\"Focus\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onFocus = ({sender, event}) => {\n    console.log('Focus')\n  };\n\n  render() {\n    return (\n      &lt;ExtMenutrigger onFocus={this.onFocus}&gt;&lt;/ExtMenutrigger&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Focusenter')\">onFocusenter = ({sender, event})=> {);</div>\n<pre id=\"Focusenter\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onFocusenter = ({sender, event}) => {\n    console.log('Focusenter')\n  };\n\n  render() {\n    return (\n      &lt;ExtMenutrigger onFocusenter={this.onFocusenter}&gt;&lt;/ExtMenutrigger&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Focusleave')\">onFocusleave = ({sender, event})=> {);</div>\n<pre id=\"Focusleave\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onFocusleave = ({sender, event}) => {\n    console.log('Focusleave')\n  };\n\n  render() {\n    return (\n      &lt;ExtMenutrigger onFocusleave={this.onFocusleave}&gt;&lt;/ExtMenutrigger&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Heightchange')\">onHeightchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Heightchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onHeightchange = ({sender, value, oldValue}) => {\n    console.log('Heightchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtMenutrigger onHeightchange={this.onHeightchange}&gt;&lt;/ExtMenutrigger&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Hiddenchange')\">onHiddenchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Hiddenchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onHiddenchange = ({sender, value, oldValue}) => {\n    console.log('Hiddenchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtMenutrigger onHiddenchange={this.onHiddenchange}&gt;&lt;/ExtMenutrigger&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Tofront')\">onTofront = ({sender})=> {);</div>\n<pre id=\"Tofront\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onTofront = ({sender}) => {\n    console.log('Tofront')\n  };\n\n  render() {\n    return (\n      &lt;ExtMenutrigger onTofront={this.onTofront}&gt;&lt;/ExtMenutrigger&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Widthchange')\">onWidthchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Widthchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onWidthchange = ({sender, value, oldValue}) => {\n    console.log('Widthchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtMenutrigger onWidthchange={this.onWidthchange}&gt;&lt;/ExtMenutrigger&gt;\n    )\n  }\n}\n</pre>\n",
 "propertyString": "\n  <div class=\"name\" onclick=\"toggleIt('cfg','alignSelf')\">alignSelf</div>\n  <pre id=\"alignSelf\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger alignSelf=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','alwaysOnTop')\">alwaysOnTop</div>\n  <pre id=\"alwaysOnTop\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger alwaysOnTop=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','ariaAttributes')\">ariaAttributes</div>\n  <pre id=\"ariaAttributes\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger ariaAttributes=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','ariaDescribedBy')\">ariaDescribedBy</div>\n  <pre id=\"ariaDescribedBy\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger ariaDescribedBy=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','ariaLabel')\">ariaLabel</div>\n  <pre id=\"ariaLabel\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger ariaLabel=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','ariaLabelledBy')\">ariaLabelledBy</div>\n  <pre id=\"ariaLabelledBy\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger ariaLabelledBy=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','bind')\">bind</div>\n  <pre id=\"bind\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger bind=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','border')\">border</div>\n  <pre id=\"border\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger border=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','cls')\">cls</div>\n  <pre id=\"cls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger cls=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','constrainAlign')\">constrainAlign</div>\n  <pre id=\"constrainAlign\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger constrainAlign=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','controller')\">controller</div>\n  <pre id=\"controller\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger controller=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','defaultListenerScope')\">defaultListenerScope</div>\n  <pre id=\"defaultListenerScope\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger defaultListenerScope=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','destroyMenu')\">destroyMenu</div>\n  <pre id=\"destroyMenu\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger destroyMenu=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','disabled')\">disabled</div>\n  <pre id=\"disabled\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger disabled=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','undefined')\">undefined</div>\n  <pre id=\"undefined\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger undefined=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','field')\">field</div>\n  <pre id=\"field\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger field=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','flex')\">flex</div>\n  <pre id=\"flex\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger flex=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','floated')\">floated</div>\n  <pre id=\"floated\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger floated=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','focusCls')\">focusCls</div>\n  <pre id=\"focusCls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger focusCls=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','focusOnTap')\">focusOnTap</div>\n  <pre id=\"focusOnTap\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger focusOnTap=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','group')\">group</div>\n  <pre id=\"group\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger group=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','handler')\">handler</div>\n  <pre id=\"handler\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger handler=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','height')\">height</div>\n  <pre id=\"height\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger height=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','hidden')\">hidden</div>\n  <pre id=\"hidden\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger hidden=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','hideMode')\">hideMode</div>\n  <pre id=\"hideMode\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger hideMode=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','iconCls')\">iconCls</div>\n  <pre id=\"iconCls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger iconCls=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','id')\">id</div>\n  <pre id=\"id\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger id=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','instanceCls')\">instanceCls</div>\n  <pre id=\"instanceCls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger instanceCls=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','itemId')\">itemId</div>\n  <pre id=\"itemId\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger itemId=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','keyMap')\">keyMap</div>\n  <pre id=\"keyMap\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger keyMap=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','keyMapEnabled')\">keyMapEnabled</div>\n  <pre id=\"keyMapEnabled\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger keyMapEnabled=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','keyMapTarget')\">keyMapTarget</div>\n  <pre id=\"keyMapTarget\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger keyMapTarget=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','listeners')\">listeners</div>\n  <pre id=\"listeners\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger listeners=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','margin')\">margin</div>\n  <pre id=\"margin\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger margin=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','menu')\">menu</div>\n  <pre id=\"menu\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger menu=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','menuAlign')\">menuAlign</div>\n  <pre id=\"menuAlign\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger menuAlign=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','name')\">name</div>\n  <pre id=\"name\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger name=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','nameable')\">nameable</div>\n  <pre id=\"nameable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger nameable=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','plugins')\">plugins</div>\n  <pre id=\"plugins\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger plugins=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','publishes')\">publishes</div>\n  <pre id=\"publishes\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger publishes=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','reference')\">reference</div>\n  <pre id=\"reference\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger reference=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','relative')\">relative</div>\n  <pre id=\"relative\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger relative=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','renderTo')\">renderTo</div>\n  <pre id=\"renderTo\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger renderTo=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','repeat')\">repeat</div>\n  <pre id=\"repeat\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger repeat=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','ripple')\">ripple</div>\n  <pre id=\"ripple\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger ripple=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','scope')\">scope</div>\n  <pre id=\"scope\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger scope=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','session')\">session</div>\n  <pre id=\"session\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger session=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','shadow')\">shadow</div>\n  <pre id=\"shadow\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger shadow=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','shareableName')\">shareableName</div>\n  <pre id=\"shareableName\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger shareableName=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','shim')\">shim</div>\n  <pre id=\"shim\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger shim=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','side')\">side</div>\n  <pre id=\"side\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger side=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','style')\">style</div>\n  <pre id=\"style\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger style=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','toFrontOnShow')\">toFrontOnShow</div>\n  <pre id=\"toFrontOnShow\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger toFrontOnShow=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','touchAction')\">touchAction</div>\n  <pre id=\"touchAction\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger touchAction=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','translatable')\">translatable</div>\n  <pre id=\"translatable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger translatable=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','triggers')\">triggers</div>\n  <pre id=\"triggers\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger triggers=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','twoWayBindable')\">twoWayBindable</div>\n  <pre id=\"twoWayBindable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger twoWayBindable=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','ui')\">ui</div>\n  <pre id=\"ui\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger ui=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','userCls')\">userCls</div>\n  <pre id=\"userCls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger userCls=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','viewModel')\">viewModel</div>\n  <pre id=\"viewModel\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger viewModel=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','width')\">width</div>\n  <pre id=\"width\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger width=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','x')\">x</div>\n  <pre id=\"x\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger x=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','y')\">y</div>\n  <pre id=\"y\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtMenutrigger } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtMenutrigger y=''&gt;&lt;/ExtMenutrigger&gt;\n      )\n    }\n  }\n  </pre>\n  ",
 "first": "hi",
 "text": "hi"
}