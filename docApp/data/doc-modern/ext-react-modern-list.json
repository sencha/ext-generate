{
 "title": "&lt;ExtList&gt;&lt;/ExtList&gt;",
 "docProperties": [
  {
   "name": "activeChildTabIndex",
   "text": "DOM tabIndex attribute to set on the\nactive Focusable child of this container when using the \"Roaming tabindex\"\ntechnique.\n"
  },
  {
   "name": "activeItem",
   "text": "The item from the {@link #cfg!items #cfg-items}\ncollection that will be active first. This is usually only meaningful in a\n{@link Ext.layout.Card}, where only one item can be active at a time. If\npassed a string, it will be assumed to be a {@link Ext.ComponentQuery} selector. A number\nwill reference an index or a {@link Ext.Component} instance may be passed as\nwell. An object config will be created as a new component.\n"
  },
  {
   "name": "alignSelf",
   "text": "Specifies the self alignment of this widget in a box layout\n"
  },
  {
   "name": "allowFocusingDisabledChildren",
   "text": "Set this to `true`\nto enable focusing disabled child items via keyboard.\n"
  },
  {
   "name": "alwaysOnTop",
   "text": "A flag indicating that this component should\nbe above its floated siblings.\n\nThis may be a positive number to prioritize the ordering of multiple visible always on\ntop components.\n\nThis may be set to a *negative* number to prioritize a component to the *bottom* of the\nz-index stack.\n"
  },
  {
   "name": "ariaAttributes",
   "text": "An object containing ARIA attributes to be set\non this Component's ARIA element. Use this to set the attributes that cannot be\ndetermined by the Component's state, such as `aria-live`, `aria-flowto`, etc.\n\n**Note** that this config is only meaningful at the Component rendering time,\nand setting it after that will do nothing.\n"
  },
  {
   "name": "ariaDescribedBy",
   "text": "DOM selector for a child element that is to be used\nas description for this Component, set in `aria-describedby` attribute.\nThe selector works the same way as {@link #cfg!ariaLabelledBy #ariaLabelledBy}.\n"
  },
  {
   "name": "ariaLabel",
   "text": "ARIA label for this Component. It is best to use\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} option instead, because screen readers prefer\n`aria-labelledby` attribute to `aria-label`. {@link #cfg!ariaLabel #ariaLabel} and\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} config options are mutually exclusive.\n"
  },
  {
   "name": "ariaLabelledBy",
   "text": "DOM selector for a child element that is to be used\nas label for this Component, set in `aria-labelledby` attribute.\nIf the selector is by `{@link #cfg!id #id}`, the label element can be any existing element,\nnot necessarily a child of the main Component element.\n\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} and {@link #cfg!ariaLabel #ariaLabel} config options are\nmutually exclusive, and `{@link #cfg!ariaLabelledBy ariaLabelledBy}` has the higher precedence.\n"
  },
  {
   "name": "associatedData",
   "text": "Set this config to `false` to limit rendering data to just the record's data\nor to an object to describe the desired associated data. This data is used to\nsatisfy the `{@link #cfg!itemTpl itemTpl}`. The default of `true` will gather all associated data\nthat is currently loaded. This can be expensive. If only a small amount of the\navailable data is needed, this config can speed up the rendering process.\n\nFor example, if an `OrderItem` needs the `Item` data but not its parent `Order`,\nthis config can be set like so:\n\n     associatedData: {\n         item: true\n     }\n\nGiven the above, only the `item` association (to the `Item` record) will be\ngathered into the render data.\n\nFor more details, see {@link Ext.data.Model#method!getData getData}.\n"
  },
  {
   "name": "autoDestroy",
   "text": "If `true`, child items will be destroyed as soon as they are\n{@link #method!remove removed} from this container.\n"
  },
  {
   "name": "autoSize",
   "text": "May be set to `false` for improved layout performance if auto-sizing is not required.\n\nSome versions of Safari, both desktop and mobile, have very slow performance\nif the application has deeply nested containers due to the following WebKit\nbug: https://bugs.webkit.org/show_bug.cgi?id=150445\n\nApplications that experience performance issues in the affected versions of\nSafari may need to turn off autoSizing globally for all `{@link Ext.Container}` instances\nby placing the following override in the application's \"overrides\" directory:\n\n    Ext.define('MyApp.overrides.Container', {\n        override: 'Ext.Container',\n        config: {\n            autoSize: false\n        }\n    });\n\nOnce auto-sizing support has turned off by default, it can be selectively\nturned back on only on those container instances that explicitly need auto-sizing\nbehavior by setting `{@link #cfg!autoSize autoSize}` to `true`.\n\nThis option can also be used to allow items to be sized in percentage\nunits as a workaround for the following browser bug:\nhttps://bugs.webkit.org/show_bug.cgi?id=137730\n\nTo illustrate, the following example should render a 200px by 200px green box\n(the container) with a yellow box inside of it (the child item).  The child\nitem's height and width are both set to `'50%'` so the child should render\nexactly 100px by 100px in size.\n\n    @example\n    Ext.create({\n        xtype: 'container',\n        renderTo: Ext.getBody(),\n        height: 200,\n        width: 200,\n        style: 'background: green',\n        items: [{\n            xtype: 'component',\n            style: 'background: yellow',\n            height: '50%',\n            width: '50%'\n        }]\n    });\n\nAll browsers except for Safari render the previous example correctly, but\nSafari does not assign a height to the component.  To make percentage-sized\nitems work in Safari, simply set `{@link #cfg!autoSize autoSize}` to `false` on the container.\n\nSince the underlying implementation works by absolutely positioning the container's\nbody element, this option can only be used when the container is not\n\"shrink wrapping\" the content in either direction.  When `{@link #cfg!autoSize autoSize}` is\nset to `false`, shrink wrapped dimension(s) will collapse to 0.\n"
  },
  {
   "name": "axisLock",
   "text": "If `true`, then, when {@link #method!showBy #showBy} or {@link #method!alignTo #alignTo} fallback on\nconstraint violation only takes place along the major align axis.\n\nThat is, if alignment `\"l-r\"` is being used, and `axisLock: true` is used,\nthen if constraints fail, only fallback to `\"r-l\"` is considered.\n"
  },
  {
   "name": "bind",
   "text": "Setting this config option adds or removes data bindings for other configs.\nFor example, to bind the `title` config:\n\n     var panel = Ext.create({\n         xtype: 'panel',\n         bind: {\n             title: 'Hello {user.name}'\n         }\n     });\n\nTo dynamically add bindings:\n\n     panel.setBind({\n         title: 'Greetings {user.name}!'\n     });\n\nTo remove bindings:\n\n     panel.setBind({\n         title: null\n     });\n\nThe bind expressions are presented to `{@link Ext.app.ViewModel#method!bind Ext.app.ViewModel#bind}`. The\n`ViewModel` instance is determined by `{@link #method!lookupViewModel lookupViewModel}`.\n\n**Note:** If  bind is passed as a string, it will use the\n{@link Ext.Component#property!defaultBindProperty Ext.Component#property-defaultBindProperty} for the binding.\n"
  },
  {
   "name": "bodyCls",
   "text": "The CSS class to add to this container's body element.\n"
  },
  {
   "name": "border",
   "text": "Enables or disables bordering on this component.\nThe following values are accepted:\n\n- `null` or `true (default): Do nothing and allow the border to be specified\nby the theme.\n- `false`: suppress the default border provided by the theme.\n\nPlease note that enabling bordering via this config will not add a `border-color`\nor `border-style` CSS property to the component; you provide the `border-color`\nand `border-style` via CSS rule or {@link #cfg!style #style} configuration\n(if not already provide by the theme).\n\n## Using {@link #cfg!style #style}:\n\n    Ext.Viewport.add({\n        centered: true,\n        width: 100,\n        height: 100,\n\n        style: 'border: 1px solid blue;'\n        // ...\n    });\n\n## Using CSS:\n\n    Ext.Viewport.add({\n        centered: true,\n        width: 100,\n        height: 100,\n\n        cls: 'my-component'\n        // ...\n    });\n\nAnd your CSS file:\n\n    .my-component {\n        border: 1px solid red;\n    }\n"
  },
  {
   "name": "bottom",
   "text": "The absolute bottom position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n"
  },
  {
   "name": "bufferSize",
   "text": "The number of items an `{@link #cfg!infinite infinite}` list will render beyond those immediately\nvisible.\n\nTo prevent the rendering of items while scrolling, these extra items are\nrendered out of view. When the scroller approaches within `minimumBufferSize`\nof the end of the rendered range, the extra items trailing the scroll will be\nrepositioned (and reconfigured) ahead of the scroll.\n"
  },
  {
   "name": "cardSwitchAnimation",
   "text": "Animation to be used during transitions of cards.\n"
  },
  {
   "name": "centered",
   "text": "Configure this as `true` to have this Component centered within its Container.\nSetting this value to `true` will make this Component become 'positioned', which means\nit will no longer participate in the layout of the Container that it resides in.\n"
  },
  {
   "name": "cls",
   "text": "The CSS class to add to this widget's element, in\naddition to the {@link #property!baseCls #baseCls}. In many cases, this property will be specified\nby the derived widget class. See {@link #cfg!userCls #userCls} for adding additional CSS\nclasses to widget instances (such as items in a {@link Ext.Container}).\n"
  },
  {
   "name": "collapseDefaults",
   "text": "This config object supplies default for the `{@link #cfg!collapsible collapsible}` config. When that\nconfig is simply `true`, this is the complete config object for the group\ncollapser.\n\nNOTE: This config cannot be changed after instantiation. Instead, change the\n`{@link #cfg!collapsible collapsible}` config.\n"
  },
  {
   "name": "collapsible",
   "text": "This object configures group collapse. It is only applicable when `{@link #cfg!grouped grouped}`.\nSet to `false` to disable group collapsibility. The default value of `true`\nuses the `{@link #cfg!collapseDefaults collapseDefaults}` config for the final collapser configuration\nobject. If this config is an object, it is merged with `{@link #cfg!collapseDefaults collapseDefaults}`\ngiving this object's properties priority over the defaults.\n"
  },
  {
   "name": "constrainAlign",
   "text": "A specification of the constraint to apply when {@link #method!showBy #showBy} or {@link #method!alignTo #alignTo}\nis called to align a {@link #cfg!floated #floated} or positioned component.\n\nDefaults to the parent container for *positioned* components (components\nwhich have their {@link #cfg!top}, {@link #cfg!right}, {@link #cfg!bottom} or\n{@link #cfg!left} set to move them out of their container's layout flow).\n\nDefaults to the viewport for {@link #cfg!floated #floated} components.\n\nMay be a {@link Ext.ComponentQuery} selector to find an ancestor\ncomponent to constrain within.\n\nMay be `false` to specify that constraining is not applied.\n\nYou may also specify an element, or a {@link Ext.util.Region}\n"
  },
  {
   "name": "contentEl",
   "text": "The configured element will automatically be added as the content of this\ncomponent. When you pass a string, we expect it to be an element id. If the\ncontent element is hidden, we will automatically show it.\n"
  },
  {
   "name": "control",
   "text": "Enables you to easily control Components inside this Container by\nlistening to their events and taking some action. For example, if we had a container with\na nested Disable button, and we wanted to hide the Container when the Disable button is\ntapped, we could do this:\n\n    @example\n    Ext.create({\n        xtype: 'container',\n        control: {\n           'button[text=Disable]': {\n               tap: 'hideMe'\n           }\n        },\n\n        hideMe: function() {\n            this.hide();\n        }\n    });\n\nWe used a {@link Ext.ComponentQuery} selector to listen to the {@link Ext.Button#event!tap tap}\nevent on any {@link Ext.Button} anywhere inside the Container that has the\n{@link Ext.Button#cfg!text text} 'Disable'. Whenever a Component matching that selector\nfires the `tap` event our `hideMe` function is called. `hideMe` is called with scope:\n`this` (e.g. `this` is the Container instance).\n"
  },
  {
   "name": "controller",
   "text": "A string alias, a configuration object or an instance of a `ViewController` for\nthis container. Sample usage:\n\n    Ext.define('MyApp.UserController', {\n        alias: 'controller.user'\n    });\n\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: 'user'\n    });\n    // Or\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: {\n            type: 'user',\n            someConfig: true\n        }\n    });\n\n    // Can also instance at runtime\n    var ctrl = new MyApp.UserController();\n    var view = new UserContainer({\n        controller: ctrl\n    });\n"
  },
  {
   "name": "data",
   "text": "The initial set of data to apply to the `{@link #cfg!tpl #tpl}` to\nupdate the content area of the Component.\n\n**Note:** Data will be appended to any existing data.\n"
  },
  {
   "name": "defaultFocus",
   "text": "\nSpecifies a child Component to receive focus when this Container's {@link #method!focus #method-focus}\nmethod is called. Should be a valid {@link Ext.ComponentQuery} selector.\n"
  },
  {
   "name": "defaultListenerScope",
   "text": "If `true`, this component will be the default scope (this pointer) for events\nspecified with string names so that the scope can be dynamically resolved. The\ncomponent will automatically become the defaultListenerScope if a\n{@link #cfg!controller #controller} is specified.\n\nSee the introductory docs for {@link Ext.Container Ext.container.Container} for some sample\nusages.\n\n**NOTE**: This value can only be reliably set at construction time. Setting it\nafter that time may not correctly rewire all of the potentially effected\nlisteners.\n"
  },
  {
   "name": "defaults",
   "text": "A set of default configurations to apply to all child Components\nin this Container. It's often useful to specify defaults when creating more than one\nitems with similar configurations. For example here we can specify that each child is a\npanel and avoid repeating the xtype declaration for each one:\n\n    @example\n    Ext.create({\n        xtype: 'container',\n        defaults: {\n            xtype: 'panel'\n        },\n        items: [\n            {\n                html: 'Panel 1'\n            },\n            {\n                html: 'Panel 2'\n            }\n        ]\n    });\n"
  },
  {
   "name": "defaultType",
   "text": "As a {@link Ext.Container}, this config controls the default type of\nitems that are added.\n\nNon-data items can also be added to this container, and these will pick up this\ndefault. This config will only apply to data items if `{@link #cfg!itemConfig itemConfig}` does not contain\nan `{@link #cfg!xtype xtype}` property (which it does by default). This means that data items will\n*not* be affected by this config unless an `{@link #cfg!itemConfig itemConfig}` is set that nulls out the\n`{@link #cfg!xtype xtype}` (not recommended).\n"
  },
  {
   "name": "deferEmptyText",
   "text": "Set to `false` to not defer `{@link #cfg!emptyText emptyText}` being applied until the store's first\nload.\n"
  },
  {
   "name": "deselectOnContainerClick",
   "text": "When set to true, tapping on the DataView's background (i.e. not on\nan item in the DataView) will deselect any currently selected items.\n"
  },
  {
   "name": "disabled",
   "text": "Whether or not this component is disabled\n"
  },
  {
   "name": "disableSelection",
   "text": "Set to `true` to disable selection styling. This only affects the presentation\nof the selection not the internal selection state.\n"
  },
  {
   "name": "disclosureProperty",
   "text": "A property to check on each record to display the disclosure on a per record\nbasis. This property must be false to prevent the disclosure from being\ndisplayed on the item.\n"
  },
  {
   "name": "displayed",
   "text": "Set to `true` to call `show` and `false` to call `hide`. Unlike the `{@link #cfg!hidden hidden}`\nconfig, changing this config will potentially involve animations to show or\nhide the component.\n"
  },
  {
   "name": "docked",
   "text": "The dock position of this component in its container. Can be `{@link #cfg!left left}`, `{@link #cfg!top top}`, `{@link #cfg!right right}` or\n`{@link #cfg!bottom bottom}`.\n\n__Notes__\n\nYou must use a HTML5 doctype for {@link #cfg!docked #docked} `{@link #cfg!bottom bottom}` to work. To do this, simply\nadd the following code to the HTML file:\n\n    <!doctype html>\n\nSo your index.html file should look a little like this:\n\n    <!doctype html>\n    <html>\n        <head>\n            <title>MY application title</title>\n            ...\n"
  },
  {
   "name": "draggable",
   "text": "Set to `true` to allow this component to be dragged. This can also be the config\nobject for the `{@link Ext.drag.Source}` that will manage the drag.\n"
  },
  {
   "name": "emptyItemText",
   "text": "The text to render when the rendering of the item via `{@link #cfg!itemTpl itemTpl}` produces no\ntext.\n"
  },
  {
   "name": "emptyState"
  },
  {
   "name": "emptyText",
   "text": "The text to display in the view when there is no data to display.\nSet this to `true` to display the default message.\n"
  },
  {
   "name": "emptyTextDefaults",
   "text": "This component config object is used to create the `{@link #cfg!emptyText emptyText}` component.\n"
  },
  {
   "name": "emptyTextProperty",
   "text": "The config to set on the `{@link #cfg!emptyText emptyText}` component to contain the desired text.\n"
  },
  {},
  {},
  {},
  {},
  {
   "name": "flex",
   "text": "The flex of this item *if* this item item is inside a {@link Ext.layout.HBox}\nor {@link Ext.layout.VBox} layout.\n\nYou can also update the flex of a component dynamically using\nthe {@link Ext.layout.FlexBox#setItemFlex} method.\n\nWhen supplied as a string or number this option supports the same syntax\nas CSS [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex).\nFor example:\n\n    flex: '1 2 auto'\n\nsets `flex-grow` property to `0`, `flex-shrink` to `2` and `flex-basis` to\n`'auto'`.\n\nThe default `flex-shrink` value for box layout items is set to `0` in the\nstylesheet, which is different from the browser's default `flex-shrink` value\nof `1`.  This accommodates the majority use case for applications since where\nnon-flexed components are typically not expected to shrink smaller than their\ndefault size.\n\nFor convenience when only a single number is supplied it is used as the value\nfor both `flex-grow` and `flex-shrink`, for example `flex: 3` is the same as\n`flex: '3 3'`\n\nAn object form is also accepted:\n\n    flex: {\n        grow: 1,\n        shrink: 2,\n        basis: 'auto'\n    }\n\nWhen the object form is supplied `shrink` always defaults to `0` regardless\nof the value of `grow`.\n\nAlthough `'auto'` is the default value for flex-basis, flex-basis defaults to 0%\nwhen flex is supplied as a single numeric or string value (e.g. `flex: 1`). If\nthis behavior is not desired either explicitly set flex-basis to `'auto'` or use\nthe object form to set only grow and/or shrink:\n\n    flex: {\n        grow: 2\n    }\n"
  },
  {
   "name": "floated",
   "text": "A Component may be floated above all other components in the application. This means that\nthe component is absolutely positioned, and will move to the front and occlude other\nsibling floated component if clicked.\n\nA Floated component may have floated descendants. It will bring these decendants to the\nfront with it when brought to the front of its sibling floated components.\n\nBy default, descendant floated components are all positioned using the viewport\ncoordinate system. To make a floating component a positioning parent for descendants,\nand have the ancestors positioned relatively, configure the parent floated component\nwith `{@link #cfg!relative #cfg-relative}: true`.\n"
  },
  {
   "name": "focusableContainer",
   "text": "Enable or disable navigation\nwith arrow keys for this FocusableContainer. This option may be useful\nwith nested FocusableContainers, when only the root container should\nhandle keyboard events.\n"
  },
  {
   "name": "focusCls",
   "text": "CSS class that will be added to focused\ncomponent's {@link #property!focusClsEl #focusClsEl}, and removed when component blurs.\n"
  },
  {
   "name": "fullscreen",
   "text": "Force the component to take up 100% width and height available, by adding it\nto {@link Ext.Viewport}.\n"
  },
  {
   "name": "grouped",
   "text": "Set to `false` turn off all grouping.\nThis setting is only meaningful if the underlying `{@link #cfg!store store}` has a `grouper`.\n"
  },
  {
   "name": "groupFooter",
   "text": "The counterpart to `{@link #cfg!groupHeader groupHeader}`, this config controls the footer that is\ndisplayed below each group in a {@link #cfg!grouped grouped} list.\n\nFooters are typically hidden when a group is `collapsed` but this can be\nchanged using the `footer` option:\n\n     {\n         xtype: 'list',\n         collapsible: {\n             footer: true  // show footers when collapsed\n         }\n     }\n"
  },
  {
   "name": "groupHeader",
   "text": "This config is used to configure a header to display above each group in a\n{@link #cfg!grouped grouped} list. One of the more common uses of this config\nis to set the {@link Ext.dataview.ItemHeader#cfg!tpl}.\n\n     groupHeader: {\n         tpl: 'Group: {name}'\n     }\n"
  },
  {
   "name": "grouping"
  },
  {
   "name": "groupPlaceholder",
   "text": "This config provides defaults for the placeholder items rendered for collapsed\ngroups.\n"
  },
  {
   "name": "height",
   "text": "The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`,\n`30%`, etc. By default, if this is not explicitly set, this Component's element will\nsimply have its own natural size. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n"
  },
  {
   "name": "hidden",
   "text": "Whether or not this Component is hidden (its CSS `display` property is set to `none`).\n\nDefaults to `true` for {@link #cfg!floated #floated} Components.\n"
  },
  {
   "name": "hideAnimation",
   "text": "Animation effect to apply when the Component is being hidden.  Typically you want to use\nan outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check\nthe {@link Ext.fx.Animation#cfg!type Ext.fx.Animation#type} config.\n"
  },
  {
   "name": "hideMode",
   "text": "A String which specifies how this component's DOM element will be hidden. The\naccepted values are any of these:\n\n- `'clip'` : Hide using {@link Ext.dom.Element#static-property!CLIP clip}.\n- `'display'` : Hide using {@link Ext.dom.Element#static-property!DISPLAY display}.\n- `'offsets'` : Hide using positioning {@link Ext.dom.Element#static-property!OFFSETS offsets}.\n- `'opacity'` : Hide using {@link Ext.dom.Element#static-property!OPACITY opacity}.\n- `'visibility'` : Hide using {@link Ext.dom.Element#static-property!VISIBILITY visibility}.\n\nHiding using ``display`` results in having no dimensions as well as resetting\nscroll positions to 0.\n\nThe other modes overcome this but may have different trade-offs in certain\ncircumstances.\n"
  },
  {
   "name": "hideOnMaskTap",
   "text": "When using a {@link #cfg!modal} Component, setting this to `true` will hide\nthe modal mask and the Container when the mask is tapped on.\n"
  },
  {
   "name": "horizontalOverflow"
  },
  {
   "name": "html",
   "text": "Optional HTML content to render inside this Component, or a reference to an\nexisting element on the page.\n"
  },
  {
   "name": "id",
   "text": "The **unique id of this component instance.**\n\nIt should not be necessary to use this configuration except for singleton objects in\nyour application. Components created with an id may be accessed globally\nusing {@link Ext#method!getCmp Ext.getCmp}.\n\nInstead of using assigned ids, use the {@link #cfg!itemId #itemId} config,\nand {@link Ext.ComponentQuery} which provides selector-based searching\nfor Sencha Components analogous to DOM querying. The {@link Ext.Container} class\ncontains {@link Ext.Container#method!down shortcut methods} to query its descendant Components\nby selector.\n\nNote that this id will also be used as the element id for the containing HTML element\nthat is rendered to the page for this component. This allows you to write id-based CSS\nrules to style the specific instance of this component uniquely, and also to select\nsub-elements using this component's id as the parent.\n\n**Note**: to avoid complications imposed by a unique id also see `{@link #cfg!itemId #itemId}`.\n\nDefaults to an auto-assigned id.\n"
  },
  {
   "name": "inactiveChildTabIndex",
   "text": "DOM tabIndex attribute to set on\ninactive Focusable children of this container when using the \"Roaming tabindex\"\ntechnique. This value rarely needs to be changed from its default.\n"
  },
  {
   "name": "indexBar",
   "text": "Set to `true` to render an alphabet IndexBar docked on the right. This can also\nbe a config object for the {@link Ext.dataview.IndexBar} component.\n"
  },
  {
   "name": "infinite",
   "text": "Set to `true` to if this list should anticipate too many rows to render to the\nDOM at one time. When set to `true`, only a fixed number of rows is rendered at\nonce, depending on the `{@link #cfg!height height}` or `{@link #cfg!maxHeight maxHeight}` of the list.\n\nWhen using this mode in an auto-height situation (where the `list` should be\nthe height of its items), a `{@link #cfg!maxHeight maxHeight}` setting is required. This is due to\nthe fact that the rendered items are absolutely positioned. As such they do not\ndirectly contribute to the list's height.\n\nWhen `{@link #cfg!maxHeight maxHeight}` is set, however, an infinite list uses that setting to decide\nhow many items to render **and** will set an appropriate height on its innermost\nelement, thereby allowing the list to achieve the proper height.\n\nNote that this configuration can not be dynamically changed after the list has\ninstantiated.\n"
  },
  {
   "name": "inline",
   "text": "When set to `true` the items within the DataView will have their display set to\ninline-block and be arranged horizontally. By default the items will wrap to\nthe width of the DataView. Passing an object with `{ wrap: false }` will turn\noff this wrapping behavior and overflowed items will need to be scrolled to\nhorizontally.\n"
  },
  {
   "name": "innerCls",
   "text": "A string to add to the immediate parent element of the inner items of this\ncontainer. That is, items that are not `{@link #cfg!docked docked}`, `{@link #property!positioned positioned}` or `{@link #cfg!floated floated}`. In\nsome containers, `{@link #property!positioned positioned}` items may be in this same element.\n"
  },
  {
   "name": "innerCtHeight"
  },
  {
   "name": "innerWidth"
  },
  {
   "name": "instanceCls",
   "text": "\nAn extra CSS class or classes to augment the {@link #property!classCls #classCls} on an individual instance\n"
  },
  {
   "name": "itemButtonMode",
   "text": "True to cause items to act like buttons for interaction styling.\nin ButtonMode items will maintain pressed state whenever pressed down.\nthey will not remove this state for tap distance cancellation or mouse out.\n"
  },
  {
   "name": "itemCls",
   "text": "An additional CSS class to apply to items within the DataView.\n"
  },
  {
   "name": "itemConfig",
   "text": "The object is used to configure the data items created by this data view. The\n`{@link #cfg!xtype xtype}` property of this config overrides the container's `{@link #cfg!defaultType defaultType}`.\n"
  },
  {
   "name": "itemContentCls",
   "text": "A class to add to the element that immediate wraps the item content produced\nby the `{@link #cfg!itemTpl itemTpl}` (the \"inner-html\" element).\n"
  },
  {
   "name": "itemDataMap",
   "text": "This object allows you to map {@link Ext.data.Model} fields to specific\nconfigs on component items.\n\nThe `{@link #cfg!itemDataMap itemDataMap}` object's keys describe the target objects to receive data\nfrom the associated {@link #cfg!record}. These keys are either `'#'`\n(for the item itself) or a {@link Ext.Component#cfg!reference} to\na component contained in the item.\n\nFor each target listed in `{@link #cfg!itemDataMap itemDataMap}`, the value is another map describing\nthe config name (in the key) and the data field name (as the value).\n\nFor example:\n\n     itemDataMap: {\n         '#': {\n             title: 'fullName'\n         },\n         text: {\n             html: 'name'\n         }\n     }\n\nThe above is equivalent to:\n\n     item.setTitle(item.getRecord().get('fullName'));\n     item.lookup('text').setHtml(item.getRecord().get('name'));\n\nFor more complex mapping of data to item, you should use the data binding as\ndescribed in the class documentation.\n"
  },
  {
   "name": "itemId",
   "text": "An itemId can be used as an alternative way to get a reference to a component when no\nobject reference is available. Instead of using an `{@link #cfg!id #id}` with {@link Ext#method!getCmp Ext#getCmp},\nuse `{@link #cfg!itemId itemId}` with {@link Ext.Container#method!getComponent Ext.Container#getComponent} which will retrieve `{@link #cfg!itemId itemId}`'s or\n{@link #cfg!id #id}'s. Since `{@link #cfg!itemId itemId}`'s are an index to the container's internal MixedCollection,\nthe `{@link #cfg!itemId itemId}` is scoped locally to the container - avoiding potential conflicts with\n{@link Ext.ComponentManager} which requires a **unique** `{@link #cfg!id #id}`.\n\nAlso see {@link #cfg!id #id}, {@link Ext.Container#method!query Ext.Container#query}, {@link Ext.Container#method!down Ext.Container#down} and\n{@link Ext.Container#method!child Ext.Container#child}.\n"
  },
  {
   "name": "itemInnerCls",
   "text": "A class to add to the inner element of items.\n"
  },
  {
   "name": "itemRipple"
  },
  {
   "name": "items",
   "text": "The child items to add to this Container. This is usually an\narray of Component configurations or instances, for example:\n\n    @example\n    Ext.create({\n        xtype: 'container',\n        items: [{\n            xtype: 'panel',\n            html: 'This is an item'\n        }]\n    });\n\nThis may also be specified as an object, the property names of which are `{@link #cfg!itemId itemId}`s, and\nthe property values are child Component config objects, for example:\n\n    @example\n    Ext.create({\n        xtype: 'tabpanel',\n        items: {\n            panel1: {\n                xtype: 'panel',\n                title: 'First panel'\n            },\n            panel2: {\n                xtype: 'panel',\n                title: 'Second panel'\n            }\n        }\n    });\n"
  },
  {
   "name": "itemsFocusable",
   "text": "For use by subclasses, not applications.\n\nBy default the dataview items are focusable, and navigable using an\n{@link Ext.dataview.NavigationModel}.\n\n{@link Ext.grid.Grid} set this to false to make rows non-focusable in\nfavour of cells.\n"
  },
  {
   "name": "itemTpl",
   "text": "The `{@link #cfg!tpl tpl}` to use for each of the items displayed in this DataView. This template\nproduces HTML and can use the follow CSS class names to influence the response\nto tapping/clicking child elements:\n\n - `x-no-ripple` - Disables `{@link #cfg!itemRipple itemRipple}` (primarily for theme-material)\n - `x-item-no-select` - Disables item selection\n - `x-item-no-tap` - Disables all click or tap processing\n\nFor example:\n\n     itemTpl: '<div>' +\n                  '...' +\n                  '<div class=\"x-item-no-select x-fa fa-gear\"></div>' +\n                  '...' +\n              '</div>'\n\nBecause this template produces HTML from record data it can expose applications\nto security issues if user-provided data is not properly encoded. For example,\nin previous releases this template was:\n\n     itemTpl: '<div>{text}</div>'\n\nIf the 'text' field contained HTML scripts, these would be evaluated into\nthe application. The `{@link #cfg!itemTpl itemTpl}` in version 6.5 is now:\n\n     itemTpl: '<div>{text:htmlEncode}</div>'\n"
  },
  {
   "name": "keyMap",
   "text": "An object containing handlers for keyboard events. The property names of this\nobject are the key name and any modifiers. The values of the properties are the\ndescriptors of how to handle each event.\n\nThe handler descriptor can be simply the handler function(either the\nliteral function or the method name), or it can be an object with these\nproperties:\n\n - `handler`: The function or its name to call to handle the event.\n - `scope`: The this pointer context (can be \"this\" or \"controller\").\n - `event`: An optional override of the key event to which to listen.\n\n**Important:** Calls to `setKeyMap` do not replace the entire `{@link #cfg!keyMap keyMap}` but\ninstead update the provided mappings. That is, unless `null` is passed as the\nvalue of the `{@link #cfg!keyMap keyMap}` which will clear the `{@link #cfg!keyMap keyMap}` of all entries.\n"
  },
  {
   "name": "keyMapEnabled",
   "text": "Enables or disables processing keys in the `{@link #cfg!keyMap keyMap}`. This value starts as\n`null` and if it is `null` when `{@link #method!initKeyMap initKeyMap}` is called, it will automatically\nbe set to `true`. Since `{@link #method!initKeyMap initKeyMap}` is called by `{@link Ext.Component}` at the\nproper time, this is not something application code normally handles.\n"
  },
  {
   "name": "keyMapTarget",
   "text": "The name of the member that should be used to listen for keydown/keypress events.\nThis is intended to be controlled at the class level not per instance.\n"
  },
  {
   "name": "layout",
   "text": "Configuration for this Container's layout. Example:\n\n    @example\n    Ext.create({\n        xtype: 'container',\n        layout: {\n            type: 'hbox',\n            align: 'middle'\n        },\n        items: [{\n            xtype: 'panel',\n            flex: 1,\n            bodyStyle: {\n                background: \"#000\",\n                color:\"#fff\"\n            }\n        }, {\n           xtype: 'panel',\n           flex: 2,\n           bodyStyle: {\n               background: \"#f00\",\n               color:\"#fff\"\n           }\n        }]\n    });\n"
  },
  {
   "name": "left",
   "text": "The absolute left position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n"
  },
  {
   "name": "listeners",
   "text": "\nA config object containing one or more event handlers to be added to this object during\ninitialization. This should be a valid listeners config object as specified in the\n{@link Ext.util.Observable#method!addListener addListener} example for attaching\nmultiple handlers at once.\n\n**DOM events from Ext JS {@link Ext.Component}**\n\nWhile _some_ Ext JS Component classes export selected DOM events (e.g. \"click\",\n\"mouseover\" etc), this is usually only done when extra value can be added. For example\nthe {@link Ext.view.View DataView}'s **`{@link Ext.view.View#itemclick itemclick}`**\nevent passing the node clicked on. To access DOM events directly from a child element\nof a Component, we need to specify the `element` option to identify the Component\nproperty to add a DOM listener to:\n\n    new Ext.panel.Panel({\n        width: 400,\n        height: 200,\n        dockedItems: [{\n            xtype: 'toolbar'\n        }],\n        listeners: {\n            click: {\n                element: 'el', //bind to the underlying el property on the panel\n                fn: function(){ console.log('click el'); }\n            },\n            dblclick: {\n                element: 'body', //bind to the underlying body property on the panel\n                fn: function(){ console.log('dblclick body'); }\n            }\n        }\n    });\n"
  },
  {
   "name": "loadingHeight",
   "text": "If specified, gives an explicit height for a {@link #cfg!floated} data view\nwhen it is showing the {@link #cfg!loadingText #loadingText}, if that is specified. This is\nuseful to prevent the view's height from collapsing to zero when the loading\nmask is applied and there are no other contents in the data view.\n"
  },
  {
   "name": "loadingText",
   "text": "A string to display during data load operations. This text will be displayed\nin a loading div and the view's contents will be cleared while loading,\notherwise the view's contents will continue to display normally until the new\ndata is loaded and the contents are replaced.\n\n**Note**: For virtual stores, the load mask will be shown frequently as the user\nscrolls. To inhibit that, set loadingText to the empty string.\n"
  },
  {
   "name": "maintainChildNodes",
   "text": "Set to `true` to maintain the order of rendered items in the DOM `childNodes`. In\nan `{@link #cfg!infinite infinite}` list this is not normally done for performance reasons but this can\ncreate accessibility issues.\n"
  },
  {
   "name": "manageBorders",
   "text": "`true` to enable border management of docked items.  When enabled, borders of docked\nitems will collapse where they meet to avoid duplicated borders.\n"
  },
  {
   "name": "margin",
   "text": "The margin to use on this Component. Can be specified as a number (in which\ncase all edges get the same margin) or a CSS string like '5 10 10 10'\n"
  },
  {
   "name": "markDirty",
   "text": "`true` to mark items as dirty when the underlying record has been modified.\n\nBy default there is no special styling for dirty items in data views and\n{@link Ext.dataview.List}.  When this config is set to `true` each item's\nelement will have a CSS class name of `x-mark-dirty` added to it.  When the\nunderlying record for an item has been modified the item will have the `x-dirty`\nCSS class.\n\n{@link Ext.grid.Grid} style \"dirty\" cells using a red triangle icon in\nthe corner of the cell.  See\n{@link Ext.grid.cell.Base#var!$gridcell-dirty-icon $gridcell-dirty-icon}\n"
  },
  {
   "name": "masked",
   "text": "A configuration to allow you to mask this container.\n\nIf the value is a string, it will be used as the message config for an\n{@link Ext.LoadMask}.\n\nFor more precise control over the mask, you can optionally pass an object block with\nand xtype of `loadmask`, and an optional `message` value to display a loading mask.\nPlease refer to the {@link Ext.LoadMask} component to see other configurations.\n\n    @example\n    Ext.create({\n        xtype: 'container',\n        fullscreen: true,\n        html: 'Hello World',\n        masked: {\n            xtype: 'loadmask',\n            message: 'My Message'\n        }\n    });\n\nAlternatively, you can just call the setter at any time with `true`/`false` to show/hide\nthe mask:\n\n    setMasked(true); //show the mask\n    setMasked(false); //hides the mask\n\nThere are also two convenient methods, {@link #method!mask #method-mask} and {@link #method!unmask #unmask}, to allow\nyou to mask and unmask this container at any time.\n\nRemember, the {@link Ext.Viewport} is always a container, so if you want to mask your\nwhole application at anytime, can call:\n\n    Ext.Viewport.setMasked({\n        xtype: 'loadmask',\n        message: 'Hello'\n    });\n"
  },
  {
   "name": "maxHeight",
   "text": "The maximum height of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size. Note that this config will not apply if the\nComponent is 'positioned' (absolutely positioned or centered)\n"
  },
  {
   "name": "maxItemCache",
   "text": "The number of components to cache when no longer needed (as opposed to calling\n`destroy` on them).\n"
  },
  {
   "name": "maxWidth",
   "text": "The maximum width of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size. Note that this config will not apply if the\nComponent is 'positioned' (absolutely positioned or centered)\n"
  },
  {
   "name": "minHeight",
   "text": "The minimum height of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n"
  },
  {
   "name": "minimumBufferDistance",
   "text": "The minimum number of items beyond the visible area of an `{@link #cfg!infinite infinite}` list to\nallow before repositioning items on the opposite side to balance the visible\narea inside the rendered range.\n"
  },
  {
   "name": "minWidth",
   "text": "The minimum width of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n"
  },
  {
   "name": "modal",
   "text": "`true` to make this Component modal. This will create a mask underneath the\nComponent that covers its parent and does not allow the user to interact with\nany other Components until this Component is dismissed.\n"
  },
  {
   "name": "modelValidation",
   "text": "This config enables binding to your `{@link Ext.data.Model#cfg!validators Ext.data.Model#validators}`. This\nis only processed by form fields (e.g., `Ext.field.*`) at present, however, this\nsetting is inherited and so can be set on a parent container.\n\nWhen set to `true` by a component (or by an ancestor container), the `validators`\nof for any {@Ext.data.Model record} fields will be used wherever the `value` is\nbound to such data fields.\n\nWhile this config can be set arbitrarily high in the component hierarchy, doing\nso can create a lot overhead if most of your form fields do not actually rely on\n`validators` in your data model.\n\nUsing this setting for a form that is bound to an `{@link Ext.data.Model}` might look\nlike this:\n\n     {\n         xtype: 'panel',\n         modelValidation: true,\n         items: [{\n             xtype: 'textfield',\n             bind: '{theUser.firstName}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.lastName}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.phoneNumber}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.email}'\n         }]\n     }\n"
  },
  {
   "name": "name",
   "text": "Name for the widget to be used with {@link Ext.Container#method!lookupName Ext.Container#lookupName}\net al.\n"
  },
  {
   "name": "nameable",
   "text": "Set to `true` for this component's `name` property to be tracked by its containing\n`nameHolder`.\n"
  },
  {
   "name": "nameHolder",
   "text": "When `true` child components are tracked by their `name` property and can be\nretrieved using the `{@link #method!lookupName lookupName}` method.\n"
  },
  {
   "name": "onItemDisclosure",
   "text": "Set to `true` to display a disclosure icon on each list item. The list will\nthen fire the `{@link #event!disclose disclose}` event, and the event can be stopped before `{@link #event!childtap childtap}`.\nBy setting this config to a function, the function passed will be called when\nthe disclosure is tapped. This can be either a function object or the name of\na {@link Ext.app.ViewController} method.\n\nFinally you can specify an object with a `scope` and `handler` property defined.\nThis will also be bound to the tap event listener and is useful when you want\nto change the scope of the handler.\n"
  },
  {
   "name": "padding",
   "text": "The padding to use on this Component. Can be specified as a number (in which\ncase all edges get the same padding) or a CSS string like '5 10 10 10'\n"
  },
  {
   "name": "pinFooters",
   "text": "Whether or not to pin {@link #cfg!pinnedFooter footers} on bottom of item groups\nwhile scrolling.\n"
  },
  {
   "name": "pinHeaders",
   "text": "Whether or not to pin {@link #cfg!pinnedHeader headers} on top of item groups\nwhile scrolling. Only applicable for `{@link #cfg!infinite infinite}` lists.\n"
  },
  {
   "name": "pinnedFooter",
   "text": "A config object for the pinned footer. Only applicable when {@link #cfg!pinFooters #pinFooters}\nand {@link #cfg!grouped #grouped} are `true`.\n"
  },
  {
   "name": "pinnedFooterHeight"
  },
  {
   "name": "pinnedHeader",
   "text": "A config object for the pinned header. Only applicable when {@link #cfg!pinHeaders #pinHeaders}\nand {@link #cfg!grouped #grouped} are `true`.\n"
  },
  {
   "name": "pinnedHeaderHeight"
  },
  {
   "name": "plugins",
   "text": "This config describes one or more plugin config objects used to create plugin\ninstances for this component.\n\nPlugins are a way to bundle and reuse custom functionality. Plugins should extend\n`{@link Ext.plugin.Abstract}` but technically the only requirement for a valid plugin\nis that it contain an `init` method that accepts a reference to its owner. Once\na plugin is created, the owner will call the `init` method, passing a reference\nto itself. Each plugin can then call methods or respond to events on its owner\nas needed to provide its functionality.\n\nThis config's value can take several different forms.\n\nThe value can be a single string with the plugin's {@link Ext.enums.Plugin alias}:\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: 'listpaging'\n     });\n\nIn the above examples, the string \"listpaging\" is the type alias for\n`{@link Ext.dataview.plugin.ListPaging}`. The full alias includes the \"plugin.\" prefix\n(i.e., 'plugin.listpaging').\n\nThe preferred form for multiple plugins or to configure plugins is the\nkeyed-object form (new in version 6.5):\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: {\n             pullrefresh: true,\n             listpaging: {\n                 autoPaging: true,\n                 weight: 10\n             }\n         }\n     });\n\nThe object keys are the `id`'s as well as the default type alias. This form\nallows the value of the `{@link #cfg!plugins plugins}` to be merged from base class to derived class\nand finally with the instance configuration. This allows classes to define a\nset of plugins that derived classes or instantiators can further configure or\ndisable. This merge behavior is a feature of the\n{@link Ext.Class#cfg!config}.\n\nThe `{@link #cfg!plugins plugins}` config can also be an array of plugin aliases (arrays are not\nmerged so this form does not respect plugins defined by the class author):\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: ['listpaging', 'pullrefresh']\n     });\n\nAn array can also contain elements that are config objects with a `type`\nproperty holding the type alias:\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: ['pullrefresh', {\n             type: 'listpaging',\n             autoPaging: true\n         }]\n     });\n"
  },
  {
   "name": "pressedDelay",
   "text": "The amount of delay between the `tapstart` and adding the `pressedCls`.\n"
  },
  {
   "name": "preventSelectionOnDisclose",
   "text": "When `true` item selection is prevented when the user taps a disclose icon.\n"
  },
  {
   "name": "preventSelectionOnTool",
   "text": "When `true` item selection is prevented when the user taps on a `tool`. This\ncan be overridden on specific tools by placing the `preventSelection` property\non the tool:\n\n     tools: [{\n         type: 'gear',\n         preventSelection: false\n     }]\n"
  },
  {
   "name": "publishes",
   "text": "One or more names of config properties that this component should publish\nto its ViewModel. Generally speaking, only properties defined in a class config\nblock (including ancestor config blocks and mixins) are eligible for publishing\nto the viewModel. Some components override this and publish their most useful\nconfigs by default.\n\n**Note:** We'll discuss publishing properties **not** found in the config block below.\n\nValues determined to be invalid by component (often form fields and model validations)\nwill not be published to the ViewModel.\n\nThis config uses the `{@link #cfg!reference #cfg-reference}` to determine the name of the data\nobject to place in the `ViewModel`. If `{@link #cfg!reference reference}` is not set then this config\nis ignored.\n\nBy using this config and `{@link #cfg!reference #cfg-reference}` you can bind configs between\ncomponents. For example:\n\n     ...\n         items: [{\n             xtype: 'textfield',\n             reference: 'somefield',  // component's name in the ViewModel\n             publishes: 'value' // value is not published by default\n         },{\n             ...\n         },{\n             xtype: 'displayfield',\n             bind: 'You have entered \"{somefield.value}\"'\n         }]\n     ...\n\nClasses must provide this config as an Object:\n\n     Ext.define('App.foo.Bar', {\n         publishes: {\n             foo: true,\n             bar: true\n         }\n     });\n\nThis is required for the config system to properly merge values from derived\nclasses.\n\nFor instances this value can be specified as a value as show above or an array\nor object as follows:\n\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: [\n             'value',\n             'rawValue',\n             'dirty'\n         ]\n     }\n\n     // This achieves the same result as the above array form.\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: {\n             value: true,\n             rawValue: true,\n             dirty: true\n         }\n     }\n\nIn some cases, users may want to publish a property to the viewModel that is not found\nin a class  config block. In these situations, you may utilize {@link #method!publishState #publishState}\nif the property has a  setter method. Let's use\n{@link Ext.form.Labelable#setFieldLabel setFieldLabel} as an example:\n\n      setFieldLabel: function(fieldLabel) {\n          this.callParent(arguments);\n          this.publishState('fieldLabel', fieldLabel);\n      }\n\nWith the above chunk of code, fieldLabel may now be published to the viewModel.\n"
  },
  {
   "name": "record",
   "text": "A model instance which updates the Component's html based on it's tpl. Similar\nto the data configuration, but tied to to a record to make allow dynamic\nupdates.  This must be a model instance and not a configuration of one.\n"
  },
  {
   "name": "reference",
   "text": "Specifies a name for this component inside its component hierarchy. This name\nmust be unique within its {@link Ext.Container#cfg!referenceHolder view}\nor its {@link Ext.app.ViewController}. See the documentation in\n{@link Ext.Container Ext.container.Container} for more information about references.\n\n**Note**: Valid identifiers start with a letter or underscore and are followed\nby zero or more additional letters, underscores or digits. References are case\nsensitive.\n"
  },
  {
   "name": "referenceHolder",
   "text": "If `true`, this container will be marked as being a point in the hierarchy where\nreferences to items with a specified `reference` config will be held. The container\nwill automatically become a referenceHolder if a {@link #cfg!controller #controller} is specified.\n\nSee the introductory docs for {@link Ext.Container Ext.container.Container} for more information\nabout references & reference holders.\n"
  },
  {
   "name": "relative",
   "text": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nConfigure this as `true` if you require descendant floated components to be positioned\nrelative to this component's coordinate space, not the viewport's coordinate space.\n\n*Note:* The coordinate space is this Component's encapsulating element's area. Not that\nof the inner element in which static child items are rendered by the layout.\n"
  },
  {
   "name": "renderTo",
   "text": "Optional element to render this Component to.\nNot required if this component is an {@link Ext.Container#cfg!items item} of a Container\nof a Container.\n"
  },
  {
   "name": "resetFocusPosition",
   "text": "When `true`, FocusableContainer\nwill reset last focused position whenever focus leaves the container.\nSubsequent tabbing into the container will always focus the first eligible\nchild item.\n\nWhen `false`, subsequent tabbing into the container will focus the child\nitem that was last focused before.\n"
  },
  {
   "name": "right",
   "text": "The absolute right position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n"
  },
  {
   "name": "ripple",
   "text": "Set to truthy, Color or Object value for the ripple.\n"
  },
  {
   "name": "rowLines",
   "text": "Set this to `false` to suppress the borders in between the items in this list.\nBy default the presence of borders between items is determined by the stylesheet.\n"
  },
  {
   "name": "scrollable",
   "text": "Configuration options to make this Component scrollable. Acceptable values are:\n\n- `true` to enable auto scrolling.\n- `false` (or `null`) to disable scrolling - this is the default.\n- `{@link #cfg!x x}` or `horizontal` to enable horizontal scrolling only\n- `{@link #cfg!y y}` or `vertical` to enable vertical scrolling only\n\nAlso accepts a configuration object for a `{@link Ext.scroll.Scroller}` if\nif advanced configuration is needed.\n\nThe getter for this config returns the {@link Ext.scroll.Scroller}\ninstance.  You can use the Scroller API to read or manipulate the scroll position:\n\n    // scrolls the component to 5 on the x axis and 10 on the y axis\n    component.getScrollable().scrollTo(5, 10);\n"
  },
  {
   "name": "scrollDock",
   "text": "This property is placed on the _child items_ added to this container. The value\nplaced on the child items determines the position of that item with respect to\nthe data items.\n\n     Ext.Viewport.add({\n         xtype: 'dataview',\n         itemTpl: '{firstName}',\n         data: [\n             { firstName: 'Peter'},\n             { firstName: 'Raymond'},\n             { firstName: 'Egon'},\n             { firstName: 'Winston'}\n         ],\n         items: [{\n              xtype: 'component',\n              html: 'Always At End!',\n              scrollDock: 'end'\n         }]\n     });\n\nNote, a value of `'top'` is equivalent to `'start'` while `'bottom'` is\nequivalent to `'end'`. The `'top'` and `'bottom'` values originated from the\n`{@link Ext.dataview.List}` class.\n"
  },
  {
   "name": "scrollToTopOnRefresh",
   "text": "Scroll the DataView to the top when the DataView is refreshed.\n"
  },
  {
   "name": "selectable",
   "text": "A configuration object which allows passing of configuration options to create or\nreconfigure a {@link Ext.dataview.selection.Model}.\n"
  },
  {
   "name": "selection",
   "text": "The selected record.\n"
  },
  {
   "name": "session",
   "text": "If provided this creates a new `Session` instance for this component. If this\nis a `Container`, this will then be inherited by all child components.\n\nTo create a new session you can specify `true`:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: true,\n\n         items: [{\n             ...\n         }]\n     });\n\nAlternatively, a config object can be provided:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: {\n             ...\n         },\n\n         items: [{\n             ...\n         }]\n     });\n"
  },
  {
   "name": "shadow",
   "text": "Configure as `true` for the component to have a drop shadow. 'false' will suppress any\ndefault shadow. By default the theme will determine the presence of a shadow.\n"
  },
  {
   "name": "shareableName",
   "text": "Set to `true` to allow this component's `name` to be shared by other items in the\nsame `nameHolder`. Such items will be returned in an array from `lookupName`.\n"
  },
  {
   "name": "shim",
   "text": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nConfigure as `true` for the component to use an `<iframe>` as an underlay to ensure\ncertain non-standard browser plugins are occluded by this component.\n"
  },
  {
   "name": "showAnimation",
   "text": "Animation effect to apply when the Component is being shown.  Typically you want to use\nan inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the\n{@link Ext.fx.Animation#cfg!type Ext.fx.Animation#type} config.\n"
  },
  {
   "name": "stateful",
   "text": "\nThis config specifies the config properties that will be persisted using the\n{@link Ext.state.Provider}. If this config is set to `true`, the\nconfigs specified by `{@link #cfg!statefulDefaults statefulDefaults}` will be assumed.\n\n     stateful: true\n\nOtherwise, this config can be an array of strings of the properties to save:\n\n     stateful: [\n         'width',\n         'height',\n         'collapsed'\n     ]\n\nThe above is equivalent to:\n\n     stateful: {\n         width: true,\n         height: true,\n         collapsed: true\n     }\n\n**Note:** To be truly stateful, an `id` or `{@link #cfg!stateId stateId}` must also be assigned.\n\nA stateful object will save its state when any of these config properties change\nvalue.\n"
  },
  {
   "name": "statefulDefaults",
   "text": "The default set of {@link #cfg!stateful} properties. The form of this config\nis the same as {@link #cfg!stateful} except this config cannot be a Boolean.\n\nThis config is intended for classes to specify so that instances can simply\nenable statefulness using `stateful: true`.\n"
  },
  {
   "name": "stateId",
   "text": "The unique id for this object to use for state management purposes.\n"
  },
  {
   "name": "store",
   "text": "Can be either a Store instance or a configuration object that will be turned\ninto a Store. The Store is used to populate the set of items that will be\nrendered in the DataView. See the DataView intro documentation for more\ninformation about the relationship between Store and DataView.\n"
  },
  {
   "name": "striped",
   "text": "Set this to `true` if you want the items in this DataView to be zebra striped.\nalternating their background color.\nOnly applicable if the stylesheet provides styling for alternate items.\n\nBy default the stylesheet does not provide styling for DataView items, but it\ncan be enabled by setting the `{@link #cfg!ui ui}` to `'basic'`.\n\nLists and Grids provide default styling for striped items\n"
  },
  {
   "name": "style",
   "text": "Additional CSS styles that will be rendered into an inline style attribute when\nthe widget is rendered.\n\nYou can pass either a string syntax:\n\n    style: 'background:red'\n\nOr by using an object:\n\n    style: {\n        background: 'red'\n    }\n\nWhen using the object syntax, you can define CSS Properties by using a string:\n\n    style: {\n        'border-left': '1px solid red'\n    }\n\nAlthough the object syntax is much easier to read, we suggest you to use the\nstring syntax for better performance.\n"
  },
  {
   "name": "tabIndex",
   "text": "DOM tabIndex attribute for this component's\n{@link #property!focusEl #focusEl}.\n"
  },
  {
   "name": "toFrontOnShow",
   "text": "True to automatically call {@link #method!toFront #toFront} when a {@link #cfg!floated #cfg-floated} Component is\nshown.\n"
  },
  {
   "name": "tooltip",
   "text": "The tooltip for this component - can be a string to be used as innerHTML\n(html tags are accepted) or {@link Ext.tip.ToolTip} config object.\n\nThe default behavior is to use a shared tip instance. The tooltip configuration is\nregistered with the {@link Ext.tip.Manager}. To enable this, your application can set\nthe {@link Ext.app.Application#cfg!quickTips Ext.app.Application#quickTips} config, or an instance of the\n{@link Ext.tip.Manager} may be created manually.\n\nTo force a unique tooltip instance to be created, specify `autoCreate: true` on this\nconfiguration.\n\nConfiguring this with `autoHide: false` implies `autoCreate: true` so that the desired\npersistent behavior can be obtained with other targets still showing the singleton\ninstance.\n"
  },
  {
   "name": "top",
   "text": "The absolute top position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n"
  },
  {
   "name": "topRenderedIndex"
  },
  {
   "name": "touchAction",
   "text": "\nEmulates the behavior of the CSS\n[touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)\nproperty in a cross-browser compatible manner.\n\nKeys in this object are touch action names, and values are `false` to disable\na touch action or `true` to enable it.  Accepted keys are:\n\n- `panX`\n- `panY`\n- `pinchZoom`\n- `doubleTapZoom`\n\nAll touch actions are enabled (`true`) by default, so it is usually only necessary\nto specify which touch actions to disable.  For example, the following disables\nonly horizontal scrolling and pinch-to-zoom on the component's main element:\n\n    touchAction: {\n        panX: false,\n        pinchZoom: false\n    }\n\nTouch actions can be specified on reference elements using the reference element\nname, for example:\n\n    // disables horizontal scrolling on the main element, and double-tap-zoom\n    // on the child element named \"body\"\n    touchAction: {\n        panY: false\n        body: {\n            doubleTapZoom: false\n        }\n    }\n\nThe primary motivation for setting the touch-action of an element is to prevent\nthe browser's default handling of a gesture such as pinch-to-zoom, or\ndrag-to-scroll, so that the application can implement its own handling of that\ngesture on the element.  Suppose, for example, a component has a custom drag\nhandler on its element and wishes to prevent horizontal scrolling of its container\nwhile it is being dragged:\n\n    Ext.create('Ext.Widget', {\n        touchAction: {\n            panX: false\n        },\n        listeners: {\n            drag: function(e) {\n                // implement drag logic\n            }\n        }\n    });\n"
  },
  {
   "name": "tpl",
   "text": "A {@link String}, {@link Ext.Template}, {@link Ext.XTemplate} or an {@link Array} of\nstrings to form an {@link Ext.XTemplate}. Used in conjunction with the {@link #cfg!data #data}\nand {@link #cfg!tplWriteMode #tplWriteMode} configurations.\n\n__Note__\nThe {@link #cfg!data #data} configuration _must_ be set for any content to be shown in the\ncomponent when using this configuration.\n"
  },
  {
   "name": "tplWriteMode",
   "text": "The Ext.(X)Template method to use when updating the content area of the\nComponent.\n\nValid modes are:\n\n- append\n- insertAfter\n- insertBefore\n- insertFirst\n- overwrite\n"
  },
  {
   "name": "translatable"
  },
  {
   "name": "triggerCtEvent",
   "text": "Determines what type of touch event is recognized as a touch on the container.\n"
  },
  {
   "name": "triggerEvent",
   "text": "Determines what type of touch event causes an item to be selected.\n"
  },
  {
   "name": "twoWayBindable",
   "text": "This object holds a map of `config` properties that will update their binding\nas they are modified. For example, `value` is a key added by form fields. The\nform of this config is the same as `{@link #cfg!publishes}`.\n\nThis config is defined so that updaters are not created and added for all\nbound properties since most cannot be modified by the end-user and hence are\nnot appropriate for two-way binding.\n"
  },
  {
   "name": "ui",
   "text": "The ui or uis to be used on this Component\n\nWhen a ui is configured, CSS class names are added to the {@link #property!element #element}, created\nby appending the ui name(s) to each {@link #property!classCls #classCls} and/or {@link #property!baseCls #baseCls}.\n"
  },
  {
   "name": "userCls",
   "text": "One or more CSS classes to add to the component's primary element. This config\nis intended solely for use by the component instantiator (the \"user\"), not by\nderived classes.\n\nFor example:\n\n     items: [{\n         xtype: 'button',\n         userCls: 'my-button'\n     ...\n     }]\n"
  },
  {
   "name": "userSelectable",
   "text": "\nSet to true to allow users to select text within this component.\n\nCan also be any valid value for the CSS3\n[user-select](https://developer.mozilla.org/en-US/docs/Web/CSS/user-select) property.\n\nA value of true implies `auto`, while false implies `none`.\n\nMay also be an object keyed by child element name.\n\nBy default, the user cannot click+drag+select text/elements of the UI.  Applications may\nwant to enable user selection for specific DOM elements, such as the bodyElement of\na component used as a tab panel.  The tab and tab text would not be user selectable in\nthis example, but the content area when the tab is selected would.\n\n     userSelectable: {\n         element: true,       // allow the element to be user selectable\n         bodyElement: true    // allow the component's body element to be user selectable\n     }\n"
  },
  {},
  {
   "name": "variableHeights",
   "text": "Set to `true` if the items in this list do not all have the same height. This\nis `false` by default to avoid measure each row to determine its height.\n"
  },
  {
   "name": "verticalOverflow",
   "text": "This config is set to `true` when an `{@link #cfg!infinite infinite}` list has vertical overflow.\n"
  },
  {
   "name": "viewModel",
   "text": "The `ViewModel` is a data provider for this component and its children. The\ndata contained in the `ViewModel` is typically used by adding `{@link #cfg!bind bind}` configs\nto the components that want present or edit this data.\n\nWhen set, the `ViewModel` is created and links to any inherited `{@link #cfg!viewModel viewModel}`\ninstance from an ancestor container as the \"parent\". The `ViewModel` hierarchy,\nonce established, only supports creation or destruction of children. The\nparent of a `ViewModel` cannot be changed on the fly.\n\nIf this is a root-level `ViewModel`, the data model connection is made to this\ncomponent's associated `{@link Ext.data.Session}`. This is\ndetermined by calling `getInheritedSession`.\n"
  },
  {
   "name": "visibleHeight",
   "text": "The height of the container in pixels. This is a config to simplify processing\nchanges in container height.\n"
  },
  {
   "name": "visibleLeft"
  },
  {
   "name": "visibleTop",
   "text": "The top-most visible pixel coordinate. This is the same as the `{@link #cfg!y y}` value of\nthe `Scroller` but is a config to simplify processing scrolling changes.\n"
  },
  {
   "name": "visibleWidth"
  },
  {
   "name": "weight",
   "text": "This value controls this item's order in a {@link Ext.Container#cfg!weighted}\n{@link Ext.Container} (see {@link #cfg!parent}).\n\nLower values gravitate towards the start of the container - the top in vertical layouts,\nthe locale start side in horizontal layouts.\n"
  },
  {
   "name": "weighted",
   "text": "If set to `true`, then child {@link #cfg!items} may be specified as a object,\nwith each property name specifying an {@link #cfg!itemId}, and the property\nvalue being the child item configuration object.\n\nWhen using this scheme, each child item may contain a {@link #cfg!weight}\nconfiguration value which affects its order in this container. Lower weights\nare towards the start, higher weights towards the end.\n"
  },
  {
   "name": "width",
   "text": "The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`,\n`30%`, etc. By default, if this is not explicitly set, this Component's element will\nsimply have its own natural size. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n"
  },
  {
   "name": "x",
   "text": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nThe x position at which to position this component. This is usually viewport-relative.\nBut if there is a `{@link #cfg!relative #relative}: true` ancestor, it will be relative to that.\n"
  },
  {
   "name": "xtype",
   "text": "The `{@link #cfg!xtype xtype}` configuration option can be used to optimize Component creation and rendering.\nIt serves as a shortcut to the full component name. For example, the component\n`Ext.button.Button` has an xtype of `button`.\n\nYou can define your own xtype on a custom {@link Ext.Component} like so:\n\n    Ext.define('PressMeButton', {\n        extend: 'Ext.button.Button',\n        xtype: 'pressmebutton',\n        text: 'Press Me'\n    });\n\nAny Component can be created implicitly as an object config with an xtype specified,\nallowing it to be declared and passed into the rendering pipeline without actually being\ninstantiated as an object. Not only is rendering deferred, but the actual creation of the\nobject itself is also deferred, saving memory and resources until they are actually needed.\nIn complex, nested layouts containing many Components, this can make a noticeable\nimprovement in performance.\n\n    // Explicit creation of contained Components:\n    var panel = new Ext.Panel({\n       // ...\n       items: [\n          Ext.create('Ext.button.Button', {\n             text: 'OK'\n          })\n       ]\n    });\n\n    // Implicit creation using xtype:\n    var panel = new Ext.Panel({\n       // ...\n       items: [{\n          xtype: 'button',\n          text: 'OK'\n       }]\n    });\n\nIn the first example, the button will always be created immediately during the panel's\ninitialization. With many added Components, this approach could potentially slow the\nrendering of the page. In the second example, the button will not be created or rendered\nuntil the panel is actually displayed in the browser. If the panel is never displayed\n(for example, if it is a tab that remains hidden) then the button will never be created and\nwill never consume any resources whatsoever.\n"
  },
  {
   "name": "y",
   "text": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nThe x position at which to position this component. This is usually viewport-relative.\nBut if there is a `{@link #cfg!relative #relative}: true` ancestor, it will be relative to that.\n"
  },
  {
   "name": "zIndex",
   "text": "The z-index to give this Component when it is rendered.\n\nNot valid for {@link #cfg!floated #cfg-floated} Components. The Z ordering of {@link #cfg!floated #cfg-floated}\nComponents is managed by ordering of the DOM elements.\n"
  }
 ],
 "docEvents": [
  {
   "name": "activate",
   "parameters": [
    "newActiveItem",
    "sender",
    "oldActiveItem"
   ]
  },
  {
   "name": "activeItemchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "add",
   "parameters": []
  },
  {
   "name": "added",
   "parameters": [
    "sender",
    "container",
    "index"
   ]
  },
  {
   "name": "beforeactiveItemchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforebottomchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforecenteredchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforedisabledchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforedockedchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforegroupcollapse",
   "parameters": [
    "sender",
    "group"
   ]
  },
  {
   "name": "beforegroupexpand",
   "parameters": [
    "sender",
    "group"
   ]
  },
  {
   "name": "beforeheightchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforehiddenchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforehide",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "beforeleftchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforemaxHeightchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforemaxWidthchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforeminHeightchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforeminWidthchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforeorientationchange",
   "parameters": []
  },
  {
   "name": "beforerightchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforescrollablechange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforeshow",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "beforestorechange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforetofront",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "beforetopchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforewidthchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "blur",
   "parameters": [
    "sender",
    "event"
   ]
  },
  {
   "name": "bottomchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "centeredchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "childdoubletap",
   "parameters": [
    "sender",
    "location"
   ]
  },
  {
   "name": "childlongpress",
   "parameters": [
    "sender",
    "location"
   ]
  },
  {
   "name": "childmouseenter",
   "parameters": [
    "sender",
    "location"
   ]
  },
  {
   "name": "childmouseleave",
   "parameters": [
    "sender",
    "location"
   ]
  },
  {
   "name": "childsingletap",
   "parameters": [
    "sender",
    "location"
   ]
  },
  {
   "name": "childtap",
   "parameters": [
    "sender",
    "location"
   ]
  },
  {
   "name": "childtaphold",
   "parameters": [
    "sender",
    "location"
   ]
  },
  {
   "name": "childtouchcancel",
   "parameters": [
    "sender",
    "location"
   ]
  },
  {
   "name": "childtouchend",
   "parameters": [
    "sender",
    "location"
   ]
  },
  {
   "name": "childtouchmove",
   "parameters": [
    "sender",
    "location"
   ]
  },
  {
   "name": "childtouchstart",
   "parameters": [
    "sender",
    "location"
   ]
  },
  {
   "name": "deactivate",
   "parameters": [
    "oldActiveItem",
    "sender",
    "newActiveItem"
   ]
  },
  {
   "name": "deselect",
   "parameters": [
    "sender",
    "records"
   ]
  },
  {
   "name": "destroy",
   "parameters": []
  },
  {
   "name": "disabledchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "disclose",
   "parameters": [
    "list",
    "record",
    "target",
    "index",
    "event"
   ]
  },
  {
   "name": "dockedchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "erased",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "floatingchange",
   "parameters": [
    "sender",
    "positioned"
   ]
  },
  {
   "name": "focus",
   "parameters": [
    "sender",
    "event"
   ]
  },
  {
   "name": "focusenter",
   "parameters": [
    "sender",
    "event"
   ]
  },
  {
   "name": "focusleave",
   "parameters": [
    "sender",
    "event"
   ]
  },
  {
   "name": "fullscreen",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "groupcollapse",
   "parameters": [
    "sender",
    "group"
   ]
  },
  {
   "name": "groupexpand",
   "parameters": [
    "sender",
    "group"
   ]
  },
  {
   "name": "heightchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "hiddenchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "hide",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "initialize",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "itemaction",
   "parameters": [
    "sender",
    "index",
    "record",
    "action"
   ]
  },
  {
   "name": "itemdoubletap",
   "parameters": [
    "sender",
    "index",
    "target",
    "record",
    "e"
   ]
  },
  {
   "name": "itemlongpress",
   "parameters": [
    "sender",
    "index",
    "target",
    "record",
    "e"
   ]
  },
  {
   "name": "itemmouseenter",
   "parameters": [
    "sender",
    "index",
    "target",
    "record",
    "e"
   ]
  },
  {
   "name": "itemmouseleave",
   "parameters": [
    "sender",
    "index",
    "target",
    "record",
    "e"
   ]
  },
  {
   "name": "itemsingletap",
   "parameters": [
    "sender",
    "index",
    "target",
    "record",
    "e"
   ]
  },
  {
   "name": "itemswipe",
   "parameters": [
    "sender",
    "index",
    "target",
    "record",
    "e"
   ]
  },
  {
   "name": "itemtap",
   "parameters": [
    "sender",
    "index",
    "target",
    "record",
    "e"
   ]
  },
  {
   "name": "itemtaphold",
   "parameters": [
    "sender",
    "index",
    "target",
    "record",
    "e"
   ]
  },
  {
   "name": "itemtouchcancel",
   "parameters": [
    "sender",
    "index",
    "target",
    "record",
    "e"
   ]
  },
  {
   "name": "itemtouchend",
   "parameters": [
    "sender",
    "index",
    "target",
    "record",
    "e"
   ]
  },
  {
   "name": "itemtouchmove",
   "parameters": [
    "sender",
    "index",
    "target",
    "record",
    "e"
   ]
  },
  {
   "name": "itemtouchstart",
   "parameters": [
    "sender",
    "index",
    "target",
    "record",
    "e"
   ]
  },
  {
   "name": "leftchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "maxHeightchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "maxWidthchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "minHeightchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "minWidthchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "move",
   "parameters": []
  },
  {
   "name": "moved",
   "parameters": [
    "sender",
    "container",
    "toIndex",
    "fromIndex"
   ]
  },
  {
   "name": "navigate",
   "parameters": [
    "sender",
    "to",
    "from"
   ]
  },
  {
   "name": "orientationchange",
   "parameters": []
  },
  {
   "name": "painted",
   "parameters": [
    "sender",
    "element"
   ]
  },
  {
   "name": "positionedchange",
   "parameters": [
    "sender",
    "positioned"
   ]
  },
  {
   "name": "refresh",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "remove",
   "parameters": []
  },
  {
   "name": "removed",
   "parameters": [
    "sender",
    "container",
    "index"
   ]
  },
  {
   "name": "renderedchange",
   "parameters": [
    "sender",
    "item",
    "rendered"
   ]
  },
  {
   "name": "resize",
   "parameters": [
    "element",
    "info"
   ]
  },
  {
   "name": "rightchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "scrollablechange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "select",
   "parameters": [
    "sender",
    "selected"
   ]
  },
  {
   "name": "show",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "storechange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "tofront",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "topchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "updatedata",
   "parameters": [
    "sender",
    "newData"
   ]
  },
  {
   "name": "widthchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  }
 ],
 "eventString": "\n<div class=\"name\" onclick=\"toggleIt('event','Activate')\">onActivate = ({newActiveItem, sender, oldActiveItem})=> {);</div>\n<pre id=\"Activate\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onActivate = ({newActiveItem, sender, oldActiveItem}) => {\n    console.log('Activate')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onActivate={this.onActivate}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Activeitemchange')\">onActiveitemchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Activeitemchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onActiveitemchange = ({sender, value, oldValue}) => {\n    console.log('Activeitemchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onActiveitemchange={this.onActiveitemchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Add')\">onAdd = ({})=> {);</div>\n<pre id=\"Add\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onAdd = ({}) => {\n    console.log('Add')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onAdd={this.onAdd}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Added')\">onAdded = ({sender, container, index})=> {);</div>\n<pre id=\"Added\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onAdded = ({sender, container, index}) => {\n    console.log('Added')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onAdded={this.onAdded}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforeactiveitemchange')\">onBeforeactiveitemchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforeactiveitemchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforeactiveitemchange = ({sender, value, oldValue}) => {\n    console.log('Beforeactiveitemchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforeactiveitemchange={this.onBeforeactiveitemchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforebottomchange')\">onBeforebottomchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforebottomchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforebottomchange = ({sender, value, oldValue}) => {\n    console.log('Beforebottomchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforebottomchange={this.onBeforebottomchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforecenteredchange')\">onBeforecenteredchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforecenteredchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforecenteredchange = ({sender, value, oldValue}) => {\n    console.log('Beforecenteredchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforecenteredchange={this.onBeforecenteredchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforedisabledchange')\">onBeforedisabledchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforedisabledchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforedisabledchange = ({sender, value, oldValue}) => {\n    console.log('Beforedisabledchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforedisabledchange={this.onBeforedisabledchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforedockedchange')\">onBeforedockedchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforedockedchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforedockedchange = ({sender, value, oldValue}) => {\n    console.log('Beforedockedchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforedockedchange={this.onBeforedockedchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforegroupcollapse')\">onBeforegroupcollapse = ({sender, group})=> {);</div>\n<pre id=\"Beforegroupcollapse\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforegroupcollapse = ({sender, group}) => {\n    console.log('Beforegroupcollapse')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforegroupcollapse={this.onBeforegroupcollapse}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforegroupexpand')\">onBeforegroupexpand = ({sender, group})=> {);</div>\n<pre id=\"Beforegroupexpand\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforegroupexpand = ({sender, group}) => {\n    console.log('Beforegroupexpand')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforegroupexpand={this.onBeforegroupexpand}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforeheightchange')\">onBeforeheightchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforeheightchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforeheightchange = ({sender, value, oldValue}) => {\n    console.log('Beforeheightchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforeheightchange={this.onBeforeheightchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforehiddenchange')\">onBeforehiddenchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforehiddenchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforehiddenchange = ({sender, value, oldValue}) => {\n    console.log('Beforehiddenchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforehiddenchange={this.onBeforehiddenchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforehide')\">onBeforehide = ({sender})=> {);</div>\n<pre id=\"Beforehide\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforehide = ({sender}) => {\n    console.log('Beforehide')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforehide={this.onBeforehide}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforeleftchange')\">onBeforeleftchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforeleftchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforeleftchange = ({sender, value, oldValue}) => {\n    console.log('Beforeleftchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforeleftchange={this.onBeforeleftchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforemaxheightchange')\">onBeforemaxheightchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforemaxheightchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforemaxheightchange = ({sender, value, oldValue}) => {\n    console.log('Beforemaxheightchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforemaxheightchange={this.onBeforemaxheightchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforemaxwidthchange')\">onBeforemaxwidthchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforemaxwidthchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforemaxwidthchange = ({sender, value, oldValue}) => {\n    console.log('Beforemaxwidthchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforemaxwidthchange={this.onBeforemaxwidthchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforeminheightchange')\">onBeforeminheightchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforeminheightchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforeminheightchange = ({sender, value, oldValue}) => {\n    console.log('Beforeminheightchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforeminheightchange={this.onBeforeminheightchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforeminwidthchange')\">onBeforeminwidthchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforeminwidthchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforeminwidthchange = ({sender, value, oldValue}) => {\n    console.log('Beforeminwidthchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforeminwidthchange={this.onBeforeminwidthchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforeorientationchange')\">onBeforeorientationchange = ({})=> {);</div>\n<pre id=\"Beforeorientationchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforeorientationchange = ({}) => {\n    console.log('Beforeorientationchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforeorientationchange={this.onBeforeorientationchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforerightchange')\">onBeforerightchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforerightchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforerightchange = ({sender, value, oldValue}) => {\n    console.log('Beforerightchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforerightchange={this.onBeforerightchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforescrollablechange')\">onBeforescrollablechange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforescrollablechange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforescrollablechange = ({sender, value, oldValue}) => {\n    console.log('Beforescrollablechange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforescrollablechange={this.onBeforescrollablechange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforeshow')\">onBeforeshow = ({sender})=> {);</div>\n<pre id=\"Beforeshow\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforeshow = ({sender}) => {\n    console.log('Beforeshow')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforeshow={this.onBeforeshow}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforestorechange')\">onBeforestorechange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforestorechange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforestorechange = ({sender, value, oldValue}) => {\n    console.log('Beforestorechange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforestorechange={this.onBeforestorechange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforetofront')\">onBeforetofront = ({sender})=> {);</div>\n<pre id=\"Beforetofront\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforetofront = ({sender}) => {\n    console.log('Beforetofront')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforetofront={this.onBeforetofront}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforetopchange')\">onBeforetopchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforetopchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforetopchange = ({sender, value, oldValue}) => {\n    console.log('Beforetopchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforetopchange={this.onBeforetopchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforewidthchange')\">onBeforewidthchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforewidthchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforewidthchange = ({sender, value, oldValue}) => {\n    console.log('Beforewidthchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBeforewidthchange={this.onBeforewidthchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Blur')\">onBlur = ({sender, event})=> {);</div>\n<pre id=\"Blur\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBlur = ({sender, event}) => {\n    console.log('Blur')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBlur={this.onBlur}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Bottomchange')\">onBottomchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Bottomchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBottomchange = ({sender, value, oldValue}) => {\n    console.log('Bottomchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onBottomchange={this.onBottomchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Centeredchange')\">onCenteredchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Centeredchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onCenteredchange = ({sender, value, oldValue}) => {\n    console.log('Centeredchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onCenteredchange={this.onCenteredchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Childdoubletap')\">onChilddoubletap = ({sender, location})=> {);</div>\n<pre id=\"Childdoubletap\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onChilddoubletap = ({sender, location}) => {\n    console.log('Childdoubletap')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onChilddoubletap={this.onChilddoubletap}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Childlongpress')\">onChildlongpress = ({sender, location})=> {);</div>\n<pre id=\"Childlongpress\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onChildlongpress = ({sender, location}) => {\n    console.log('Childlongpress')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onChildlongpress={this.onChildlongpress}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Childmouseenter')\">onChildmouseenter = ({sender, location})=> {);</div>\n<pre id=\"Childmouseenter\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onChildmouseenter = ({sender, location}) => {\n    console.log('Childmouseenter')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onChildmouseenter={this.onChildmouseenter}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Childmouseleave')\">onChildmouseleave = ({sender, location})=> {);</div>\n<pre id=\"Childmouseleave\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onChildmouseleave = ({sender, location}) => {\n    console.log('Childmouseleave')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onChildmouseleave={this.onChildmouseleave}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Childsingletap')\">onChildsingletap = ({sender, location})=> {);</div>\n<pre id=\"Childsingletap\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onChildsingletap = ({sender, location}) => {\n    console.log('Childsingletap')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onChildsingletap={this.onChildsingletap}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Childtap')\">onChildtap = ({sender, location})=> {);</div>\n<pre id=\"Childtap\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onChildtap = ({sender, location}) => {\n    console.log('Childtap')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onChildtap={this.onChildtap}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Childtaphold')\">onChildtaphold = ({sender, location})=> {);</div>\n<pre id=\"Childtaphold\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onChildtaphold = ({sender, location}) => {\n    console.log('Childtaphold')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onChildtaphold={this.onChildtaphold}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Childtouchcancel')\">onChildtouchcancel = ({sender, location})=> {);</div>\n<pre id=\"Childtouchcancel\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onChildtouchcancel = ({sender, location}) => {\n    console.log('Childtouchcancel')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onChildtouchcancel={this.onChildtouchcancel}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Childtouchend')\">onChildtouchend = ({sender, location})=> {);</div>\n<pre id=\"Childtouchend\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onChildtouchend = ({sender, location}) => {\n    console.log('Childtouchend')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onChildtouchend={this.onChildtouchend}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Childtouchmove')\">onChildtouchmove = ({sender, location})=> {);</div>\n<pre id=\"Childtouchmove\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onChildtouchmove = ({sender, location}) => {\n    console.log('Childtouchmove')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onChildtouchmove={this.onChildtouchmove}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Childtouchstart')\">onChildtouchstart = ({sender, location})=> {);</div>\n<pre id=\"Childtouchstart\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onChildtouchstart = ({sender, location}) => {\n    console.log('Childtouchstart')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onChildtouchstart={this.onChildtouchstart}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Deactivate')\">onDeactivate = ({oldActiveItem, sender, newActiveItem})=> {);</div>\n<pre id=\"Deactivate\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onDeactivate = ({oldActiveItem, sender, newActiveItem}) => {\n    console.log('Deactivate')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onDeactivate={this.onDeactivate}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Deselect')\">onDeselect = ({sender, records})=> {);</div>\n<pre id=\"Deselect\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onDeselect = ({sender, records}) => {\n    console.log('Deselect')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onDeselect={this.onDeselect}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Destroy')\">onDestroy = ({})=> {);</div>\n<pre id=\"Destroy\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onDestroy = ({}) => {\n    console.log('Destroy')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onDestroy={this.onDestroy}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Disabledchange')\">onDisabledchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Disabledchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onDisabledchange = ({sender, value, oldValue}) => {\n    console.log('Disabledchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onDisabledchange={this.onDisabledchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Disclose')\">onDisclose = ({list, record, target, index, event})=> {);</div>\n<pre id=\"Disclose\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onDisclose = ({list, record, target, index, event}) => {\n    console.log('Disclose')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onDisclose={this.onDisclose}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Dockedchange')\">onDockedchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Dockedchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onDockedchange = ({sender, value, oldValue}) => {\n    console.log('Dockedchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onDockedchange={this.onDockedchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Erased')\">onErased = ({sender})=> {);</div>\n<pre id=\"Erased\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onErased = ({sender}) => {\n    console.log('Erased')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onErased={this.onErased}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Floatingchange')\">onFloatingchange = ({sender, positioned})=> {);</div>\n<pre id=\"Floatingchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onFloatingchange = ({sender, positioned}) => {\n    console.log('Floatingchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onFloatingchange={this.onFloatingchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Focus')\">onFocus = ({sender, event})=> {);</div>\n<pre id=\"Focus\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onFocus = ({sender, event}) => {\n    console.log('Focus')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onFocus={this.onFocus}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Focusenter')\">onFocusenter = ({sender, event})=> {);</div>\n<pre id=\"Focusenter\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onFocusenter = ({sender, event}) => {\n    console.log('Focusenter')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onFocusenter={this.onFocusenter}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Focusleave')\">onFocusleave = ({sender, event})=> {);</div>\n<pre id=\"Focusleave\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onFocusleave = ({sender, event}) => {\n    console.log('Focusleave')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onFocusleave={this.onFocusleave}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Fullscreen')\">onFullscreen = ({sender})=> {);</div>\n<pre id=\"Fullscreen\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onFullscreen = ({sender}) => {\n    console.log('Fullscreen')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onFullscreen={this.onFullscreen}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Groupcollapse')\">onGroupcollapse = ({sender, group})=> {);</div>\n<pre id=\"Groupcollapse\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onGroupcollapse = ({sender, group}) => {\n    console.log('Groupcollapse')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onGroupcollapse={this.onGroupcollapse}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Groupexpand')\">onGroupexpand = ({sender, group})=> {);</div>\n<pre id=\"Groupexpand\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onGroupexpand = ({sender, group}) => {\n    console.log('Groupexpand')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onGroupexpand={this.onGroupexpand}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Heightchange')\">onHeightchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Heightchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onHeightchange = ({sender, value, oldValue}) => {\n    console.log('Heightchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onHeightchange={this.onHeightchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Hiddenchange')\">onHiddenchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Hiddenchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onHiddenchange = ({sender, value, oldValue}) => {\n    console.log('Hiddenchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onHiddenchange={this.onHiddenchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Hide')\">onHide = ({sender})=> {);</div>\n<pre id=\"Hide\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onHide = ({sender}) => {\n    console.log('Hide')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onHide={this.onHide}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Initialize')\">onInitialize = ({sender})=> {);</div>\n<pre id=\"Initialize\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onInitialize = ({sender}) => {\n    console.log('Initialize')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onInitialize={this.onInitialize}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Itemaction')\">onItemaction = ({sender, index, record, action})=> {);</div>\n<pre id=\"Itemaction\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onItemaction = ({sender, index, record, action}) => {\n    console.log('Itemaction')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onItemaction={this.onItemaction}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Itemdoubletap')\">onItemdoubletap = ({sender, index, target, record, e})=> {);</div>\n<pre id=\"Itemdoubletap\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onItemdoubletap = ({sender, index, target, record, e}) => {\n    console.log('Itemdoubletap')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onItemdoubletap={this.onItemdoubletap}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Itemlongpress')\">onItemlongpress = ({sender, index, target, record, e})=> {);</div>\n<pre id=\"Itemlongpress\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onItemlongpress = ({sender, index, target, record, e}) => {\n    console.log('Itemlongpress')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onItemlongpress={this.onItemlongpress}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Itemmouseenter')\">onItemmouseenter = ({sender, index, target, record, e})=> {);</div>\n<pre id=\"Itemmouseenter\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onItemmouseenter = ({sender, index, target, record, e}) => {\n    console.log('Itemmouseenter')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onItemmouseenter={this.onItemmouseenter}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Itemmouseleave')\">onItemmouseleave = ({sender, index, target, record, e})=> {);</div>\n<pre id=\"Itemmouseleave\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onItemmouseleave = ({sender, index, target, record, e}) => {\n    console.log('Itemmouseleave')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onItemmouseleave={this.onItemmouseleave}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Itemsingletap')\">onItemsingletap = ({sender, index, target, record, e})=> {);</div>\n<pre id=\"Itemsingletap\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onItemsingletap = ({sender, index, target, record, e}) => {\n    console.log('Itemsingletap')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onItemsingletap={this.onItemsingletap}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Itemswipe')\">onItemswipe = ({sender, index, target, record, e})=> {);</div>\n<pre id=\"Itemswipe\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onItemswipe = ({sender, index, target, record, e}) => {\n    console.log('Itemswipe')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onItemswipe={this.onItemswipe}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Itemtap')\">onItemtap = ({sender, index, target, record, e})=> {);</div>\n<pre id=\"Itemtap\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onItemtap = ({sender, index, target, record, e}) => {\n    console.log('Itemtap')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onItemtap={this.onItemtap}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Itemtaphold')\">onItemtaphold = ({sender, index, target, record, e})=> {);</div>\n<pre id=\"Itemtaphold\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onItemtaphold = ({sender, index, target, record, e}) => {\n    console.log('Itemtaphold')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onItemtaphold={this.onItemtaphold}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Itemtouchcancel')\">onItemtouchcancel = ({sender, index, target, record, e})=> {);</div>\n<pre id=\"Itemtouchcancel\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onItemtouchcancel = ({sender, index, target, record, e}) => {\n    console.log('Itemtouchcancel')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onItemtouchcancel={this.onItemtouchcancel}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Itemtouchend')\">onItemtouchend = ({sender, index, target, record, e})=> {);</div>\n<pre id=\"Itemtouchend\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onItemtouchend = ({sender, index, target, record, e}) => {\n    console.log('Itemtouchend')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onItemtouchend={this.onItemtouchend}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Itemtouchmove')\">onItemtouchmove = ({sender, index, target, record, e})=> {);</div>\n<pre id=\"Itemtouchmove\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onItemtouchmove = ({sender, index, target, record, e}) => {\n    console.log('Itemtouchmove')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onItemtouchmove={this.onItemtouchmove}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Itemtouchstart')\">onItemtouchstart = ({sender, index, target, record, e})=> {);</div>\n<pre id=\"Itemtouchstart\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onItemtouchstart = ({sender, index, target, record, e}) => {\n    console.log('Itemtouchstart')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onItemtouchstart={this.onItemtouchstart}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Leftchange')\">onLeftchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Leftchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onLeftchange = ({sender, value, oldValue}) => {\n    console.log('Leftchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onLeftchange={this.onLeftchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Maxheightchange')\">onMaxheightchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Maxheightchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onMaxheightchange = ({sender, value, oldValue}) => {\n    console.log('Maxheightchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onMaxheightchange={this.onMaxheightchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Maxwidthchange')\">onMaxwidthchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Maxwidthchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onMaxwidthchange = ({sender, value, oldValue}) => {\n    console.log('Maxwidthchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onMaxwidthchange={this.onMaxwidthchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Minheightchange')\">onMinheightchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Minheightchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onMinheightchange = ({sender, value, oldValue}) => {\n    console.log('Minheightchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onMinheightchange={this.onMinheightchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Minwidthchange')\">onMinwidthchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Minwidthchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onMinwidthchange = ({sender, value, oldValue}) => {\n    console.log('Minwidthchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onMinwidthchange={this.onMinwidthchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Move')\">onMove = ({})=> {);</div>\n<pre id=\"Move\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onMove = ({}) => {\n    console.log('Move')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onMove={this.onMove}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Moved')\">onMoved = ({sender, container, toIndex, fromIndex})=> {);</div>\n<pre id=\"Moved\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onMoved = ({sender, container, toIndex, fromIndex}) => {\n    console.log('Moved')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onMoved={this.onMoved}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Navigate')\">onNavigate = ({sender, to, from})=> {);</div>\n<pre id=\"Navigate\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onNavigate = ({sender, to, from}) => {\n    console.log('Navigate')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onNavigate={this.onNavigate}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Orientationchange')\">onOrientationchange = ({})=> {);</div>\n<pre id=\"Orientationchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onOrientationchange = ({}) => {\n    console.log('Orientationchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onOrientationchange={this.onOrientationchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Painted')\">onPainted = ({sender, element})=> {);</div>\n<pre id=\"Painted\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onPainted = ({sender, element}) => {\n    console.log('Painted')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onPainted={this.onPainted}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Positionedchange')\">onPositionedchange = ({sender, positioned})=> {);</div>\n<pre id=\"Positionedchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onPositionedchange = ({sender, positioned}) => {\n    console.log('Positionedchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onPositionedchange={this.onPositionedchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Refresh')\">onRefresh = ({sender})=> {);</div>\n<pre id=\"Refresh\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onRefresh = ({sender}) => {\n    console.log('Refresh')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onRefresh={this.onRefresh}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Remove')\">onRemove = ({})=> {);</div>\n<pre id=\"Remove\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onRemove = ({}) => {\n    console.log('Remove')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onRemove={this.onRemove}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Removed')\">onRemoved = ({sender, container, index})=> {);</div>\n<pre id=\"Removed\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onRemoved = ({sender, container, index}) => {\n    console.log('Removed')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onRemoved={this.onRemoved}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Renderedchange')\">onRenderedchange = ({sender, item, rendered})=> {);</div>\n<pre id=\"Renderedchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onRenderedchange = ({sender, item, rendered}) => {\n    console.log('Renderedchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onRenderedchange={this.onRenderedchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Resize')\">onResize = ({element, info})=> {);</div>\n<pre id=\"Resize\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onResize = ({element, info}) => {\n    console.log('Resize')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onResize={this.onResize}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Rightchange')\">onRightchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Rightchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onRightchange = ({sender, value, oldValue}) => {\n    console.log('Rightchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onRightchange={this.onRightchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Scrollablechange')\">onScrollablechange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Scrollablechange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onScrollablechange = ({sender, value, oldValue}) => {\n    console.log('Scrollablechange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onScrollablechange={this.onScrollablechange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Select')\">onSelect = ({sender, selected})=> {);</div>\n<pre id=\"Select\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onSelect = ({sender, selected}) => {\n    console.log('Select')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onSelect={this.onSelect}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Show')\">onShow = ({sender})=> {);</div>\n<pre id=\"Show\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onShow = ({sender}) => {\n    console.log('Show')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onShow={this.onShow}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Storechange')\">onStorechange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Storechange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onStorechange = ({sender, value, oldValue}) => {\n    console.log('Storechange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onStorechange={this.onStorechange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Tofront')\">onTofront = ({sender})=> {);</div>\n<pre id=\"Tofront\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onTofront = ({sender}) => {\n    console.log('Tofront')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onTofront={this.onTofront}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Topchange')\">onTopchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Topchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onTopchange = ({sender, value, oldValue}) => {\n    console.log('Topchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onTopchange={this.onTopchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Updatedata')\">onUpdatedata = ({sender, newData})=> {);</div>\n<pre id=\"Updatedata\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onUpdatedata = ({sender, newData}) => {\n    console.log('Updatedata')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onUpdatedata={this.onUpdatedata}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Widthchange')\">onWidthchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Widthchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtList } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onWidthchange = ({sender, value, oldValue}) => {\n    console.log('Widthchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtList onWidthchange={this.onWidthchange}&gt;&lt;/ExtList&gt;\n    )\n  }\n}\n</pre>\n",
 "propertyString": "\n  <div class=\"name\" onclick=\"toggleIt('cfg','activeChildTabIndex')\">activeChildTabIndex</div>\n  <pre id=\"activeChildTabIndex\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList activeChildTabIndex=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','activeItem')\">activeItem</div>\n  <pre id=\"activeItem\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList activeItem=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','alignSelf')\">alignSelf</div>\n  <pre id=\"alignSelf\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList alignSelf=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','allowFocusingDisabledChildren')\">allowFocusingDisabledChildren</div>\n  <pre id=\"allowFocusingDisabledChildren\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList allowFocusingDisabledChildren=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','alwaysOnTop')\">alwaysOnTop</div>\n  <pre id=\"alwaysOnTop\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList alwaysOnTop=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','ariaAttributes')\">ariaAttributes</div>\n  <pre id=\"ariaAttributes\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList ariaAttributes=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','ariaDescribedBy')\">ariaDescribedBy</div>\n  <pre id=\"ariaDescribedBy\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList ariaDescribedBy=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','ariaLabel')\">ariaLabel</div>\n  <pre id=\"ariaLabel\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList ariaLabel=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','ariaLabelledBy')\">ariaLabelledBy</div>\n  <pre id=\"ariaLabelledBy\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList ariaLabelledBy=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','associatedData')\">associatedData</div>\n  <pre id=\"associatedData\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList associatedData=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','autoDestroy')\">autoDestroy</div>\n  <pre id=\"autoDestroy\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList autoDestroy=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','autoSize')\">autoSize</div>\n  <pre id=\"autoSize\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList autoSize=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','axisLock')\">axisLock</div>\n  <pre id=\"axisLock\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList axisLock=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','bind')\">bind</div>\n  <pre id=\"bind\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList bind=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','bodyCls')\">bodyCls</div>\n  <pre id=\"bodyCls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList bodyCls=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','border')\">border</div>\n  <pre id=\"border\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList border=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','bottom')\">bottom</div>\n  <pre id=\"bottom\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList bottom=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','bufferSize')\">bufferSize</div>\n  <pre id=\"bufferSize\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList bufferSize=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','cardSwitchAnimation')\">cardSwitchAnimation</div>\n  <pre id=\"cardSwitchAnimation\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList cardSwitchAnimation=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','centered')\">centered</div>\n  <pre id=\"centered\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList centered=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','cls')\">cls</div>\n  <pre id=\"cls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList cls=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','collapseDefaults')\">collapseDefaults</div>\n  <pre id=\"collapseDefaults\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList collapseDefaults=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','collapsible')\">collapsible</div>\n  <pre id=\"collapsible\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList collapsible=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','constrainAlign')\">constrainAlign</div>\n  <pre id=\"constrainAlign\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList constrainAlign=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','contentEl')\">contentEl</div>\n  <pre id=\"contentEl\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList contentEl=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','control')\">control</div>\n  <pre id=\"control\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList control=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','controller')\">controller</div>\n  <pre id=\"controller\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList controller=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','data')\">data</div>\n  <pre id=\"data\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList data=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','defaultFocus')\">defaultFocus</div>\n  <pre id=\"defaultFocus\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList defaultFocus=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','defaultListenerScope')\">defaultListenerScope</div>\n  <pre id=\"defaultListenerScope\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList defaultListenerScope=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','defaults')\">defaults</div>\n  <pre id=\"defaults\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList defaults=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','defaultType')\">defaultType</div>\n  <pre id=\"defaultType\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList defaultType=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','deferEmptyText')\">deferEmptyText</div>\n  <pre id=\"deferEmptyText\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList deferEmptyText=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','deselectOnContainerClick')\">deselectOnContainerClick</div>\n  <pre id=\"deselectOnContainerClick\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList deselectOnContainerClick=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','disabled')\">disabled</div>\n  <pre id=\"disabled\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList disabled=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','disableSelection')\">disableSelection</div>\n  <pre id=\"disableSelection\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList disableSelection=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','disclosureProperty')\">disclosureProperty</div>\n  <pre id=\"disclosureProperty\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList disclosureProperty=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','displayed')\">displayed</div>\n  <pre id=\"displayed\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList displayed=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','docked')\">docked</div>\n  <pre id=\"docked\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList docked=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','draggable')\">draggable</div>\n  <pre id=\"draggable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList draggable=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','emptyItemText')\">emptyItemText</div>\n  <pre id=\"emptyItemText\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList emptyItemText=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','emptyState')\">emptyState</div>\n  <pre id=\"emptyState\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList emptyState=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','emptyText')\">emptyText</div>\n  <pre id=\"emptyText\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList emptyText=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','emptyTextDefaults')\">emptyTextDefaults</div>\n  <pre id=\"emptyTextDefaults\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList emptyTextDefaults=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','emptyTextProperty')\">emptyTextProperty</div>\n  <pre id=\"emptyTextProperty\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList emptyTextProperty=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','undefined')\">undefined</div>\n  <pre id=\"undefined\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList undefined=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','undefined')\">undefined</div>\n  <pre id=\"undefined\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList undefined=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','undefined')\">undefined</div>\n  <pre id=\"undefined\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList undefined=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','undefined')\">undefined</div>\n  <pre id=\"undefined\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList undefined=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','flex')\">flex</div>\n  <pre id=\"flex\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList flex=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','floated')\">floated</div>\n  <pre id=\"floated\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList floated=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','focusableContainer')\">focusableContainer</div>\n  <pre id=\"focusableContainer\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList focusableContainer=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','focusCls')\">focusCls</div>\n  <pre id=\"focusCls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList focusCls=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','fullscreen')\">fullscreen</div>\n  <pre id=\"fullscreen\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList fullscreen=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','grouped')\">grouped</div>\n  <pre id=\"grouped\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList grouped=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','groupFooter')\">groupFooter</div>\n  <pre id=\"groupFooter\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList groupFooter=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','groupHeader')\">groupHeader</div>\n  <pre id=\"groupHeader\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList groupHeader=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','grouping')\">grouping</div>\n  <pre id=\"grouping\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList grouping=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','groupPlaceholder')\">groupPlaceholder</div>\n  <pre id=\"groupPlaceholder\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList groupPlaceholder=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','height')\">height</div>\n  <pre id=\"height\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList height=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','hidden')\">hidden</div>\n  <pre id=\"hidden\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList hidden=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','hideAnimation')\">hideAnimation</div>\n  <pre id=\"hideAnimation\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList hideAnimation=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','hideMode')\">hideMode</div>\n  <pre id=\"hideMode\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList hideMode=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','hideOnMaskTap')\">hideOnMaskTap</div>\n  <pre id=\"hideOnMaskTap\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList hideOnMaskTap=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','horizontalOverflow')\">horizontalOverflow</div>\n  <pre id=\"horizontalOverflow\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList horizontalOverflow=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','html')\">html</div>\n  <pre id=\"html\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList html=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','id')\">id</div>\n  <pre id=\"id\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList id=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','inactiveChildTabIndex')\">inactiveChildTabIndex</div>\n  <pre id=\"inactiveChildTabIndex\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList inactiveChildTabIndex=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','indexBar')\">indexBar</div>\n  <pre id=\"indexBar\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList indexBar=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','infinite')\">infinite</div>\n  <pre id=\"infinite\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList infinite=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','inline')\">inline</div>\n  <pre id=\"inline\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList inline=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','innerCls')\">innerCls</div>\n  <pre id=\"innerCls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList innerCls=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','innerCtHeight')\">innerCtHeight</div>\n  <pre id=\"innerCtHeight\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList innerCtHeight=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','innerWidth')\">innerWidth</div>\n  <pre id=\"innerWidth\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList innerWidth=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','instanceCls')\">instanceCls</div>\n  <pre id=\"instanceCls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList instanceCls=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','itemButtonMode')\">itemButtonMode</div>\n  <pre id=\"itemButtonMode\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList itemButtonMode=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','itemCls')\">itemCls</div>\n  <pre id=\"itemCls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList itemCls=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','itemConfig')\">itemConfig</div>\n  <pre id=\"itemConfig\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList itemConfig=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','itemContentCls')\">itemContentCls</div>\n  <pre id=\"itemContentCls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList itemContentCls=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','itemDataMap')\">itemDataMap</div>\n  <pre id=\"itemDataMap\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList itemDataMap=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','itemId')\">itemId</div>\n  <pre id=\"itemId\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList itemId=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','itemInnerCls')\">itemInnerCls</div>\n  <pre id=\"itemInnerCls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList itemInnerCls=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','itemRipple')\">itemRipple</div>\n  <pre id=\"itemRipple\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList itemRipple=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','items')\">items</div>\n  <pre id=\"items\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList items=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','itemsFocusable')\">itemsFocusable</div>\n  <pre id=\"itemsFocusable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList itemsFocusable=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','itemTpl')\">itemTpl</div>\n  <pre id=\"itemTpl\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList itemTpl=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','keyMap')\">keyMap</div>\n  <pre id=\"keyMap\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList keyMap=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','keyMapEnabled')\">keyMapEnabled</div>\n  <pre id=\"keyMapEnabled\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList keyMapEnabled=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','keyMapTarget')\">keyMapTarget</div>\n  <pre id=\"keyMapTarget\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList keyMapTarget=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','layout')\">layout</div>\n  <pre id=\"layout\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList layout=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','left')\">left</div>\n  <pre id=\"left\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList left=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','listeners')\">listeners</div>\n  <pre id=\"listeners\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList listeners=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','loadingHeight')\">loadingHeight</div>\n  <pre id=\"loadingHeight\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList loadingHeight=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','loadingText')\">loadingText</div>\n  <pre id=\"loadingText\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList loadingText=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','maintainChildNodes')\">maintainChildNodes</div>\n  <pre id=\"maintainChildNodes\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList maintainChildNodes=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','manageBorders')\">manageBorders</div>\n  <pre id=\"manageBorders\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList manageBorders=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','margin')\">margin</div>\n  <pre id=\"margin\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList margin=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','markDirty')\">markDirty</div>\n  <pre id=\"markDirty\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList markDirty=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','masked')\">masked</div>\n  <pre id=\"masked\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList masked=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','maxHeight')\">maxHeight</div>\n  <pre id=\"maxHeight\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList maxHeight=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','maxItemCache')\">maxItemCache</div>\n  <pre id=\"maxItemCache\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList maxItemCache=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','maxWidth')\">maxWidth</div>\n  <pre id=\"maxWidth\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList maxWidth=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','minHeight')\">minHeight</div>\n  <pre id=\"minHeight\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList minHeight=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','minimumBufferDistance')\">minimumBufferDistance</div>\n  <pre id=\"minimumBufferDistance\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList minimumBufferDistance=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','minWidth')\">minWidth</div>\n  <pre id=\"minWidth\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList minWidth=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','modal')\">modal</div>\n  <pre id=\"modal\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList modal=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','modelValidation')\">modelValidation</div>\n  <pre id=\"modelValidation\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList modelValidation=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','name')\">name</div>\n  <pre id=\"name\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList name=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','nameable')\">nameable</div>\n  <pre id=\"nameable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList nameable=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','nameHolder')\">nameHolder</div>\n  <pre id=\"nameHolder\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList nameHolder=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','onItemDisclosure')\">onItemDisclosure</div>\n  <pre id=\"onItemDisclosure\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList onItemDisclosure=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','padding')\">padding</div>\n  <pre id=\"padding\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList padding=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','pinFooters')\">pinFooters</div>\n  <pre id=\"pinFooters\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList pinFooters=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','pinHeaders')\">pinHeaders</div>\n  <pre id=\"pinHeaders\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList pinHeaders=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','pinnedFooter')\">pinnedFooter</div>\n  <pre id=\"pinnedFooter\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList pinnedFooter=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','pinnedFooterHeight')\">pinnedFooterHeight</div>\n  <pre id=\"pinnedFooterHeight\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList pinnedFooterHeight=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','pinnedHeader')\">pinnedHeader</div>\n  <pre id=\"pinnedHeader\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList pinnedHeader=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','pinnedHeaderHeight')\">pinnedHeaderHeight</div>\n  <pre id=\"pinnedHeaderHeight\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList pinnedHeaderHeight=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','plugins')\">plugins</div>\n  <pre id=\"plugins\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList plugins=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','pressedDelay')\">pressedDelay</div>\n  <pre id=\"pressedDelay\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList pressedDelay=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','preventSelectionOnDisclose')\">preventSelectionOnDisclose</div>\n  <pre id=\"preventSelectionOnDisclose\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList preventSelectionOnDisclose=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','preventSelectionOnTool')\">preventSelectionOnTool</div>\n  <pre id=\"preventSelectionOnTool\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList preventSelectionOnTool=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','publishes')\">publishes</div>\n  <pre id=\"publishes\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList publishes=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','record')\">record</div>\n  <pre id=\"record\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList record=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','reference')\">reference</div>\n  <pre id=\"reference\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList reference=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','referenceHolder')\">referenceHolder</div>\n  <pre id=\"referenceHolder\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList referenceHolder=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','relative')\">relative</div>\n  <pre id=\"relative\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList relative=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','renderTo')\">renderTo</div>\n  <pre id=\"renderTo\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList renderTo=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','resetFocusPosition')\">resetFocusPosition</div>\n  <pre id=\"resetFocusPosition\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList resetFocusPosition=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','right')\">right</div>\n  <pre id=\"right\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList right=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','ripple')\">ripple</div>\n  <pre id=\"ripple\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList ripple=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','rowLines')\">rowLines</div>\n  <pre id=\"rowLines\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList rowLines=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','scrollable')\">scrollable</div>\n  <pre id=\"scrollable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList scrollable=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','scrollDock')\">scrollDock</div>\n  <pre id=\"scrollDock\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList scrollDock=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','scrollToTopOnRefresh')\">scrollToTopOnRefresh</div>\n  <pre id=\"scrollToTopOnRefresh\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList scrollToTopOnRefresh=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','selectable')\">selectable</div>\n  <pre id=\"selectable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList selectable=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','selection')\">selection</div>\n  <pre id=\"selection\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList selection=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','session')\">session</div>\n  <pre id=\"session\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList session=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','shadow')\">shadow</div>\n  <pre id=\"shadow\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList shadow=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','shareableName')\">shareableName</div>\n  <pre id=\"shareableName\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList shareableName=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','shim')\">shim</div>\n  <pre id=\"shim\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList shim=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','showAnimation')\">showAnimation</div>\n  <pre id=\"showAnimation\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList showAnimation=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','stateful')\">stateful</div>\n  <pre id=\"stateful\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList stateful=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','statefulDefaults')\">statefulDefaults</div>\n  <pre id=\"statefulDefaults\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList statefulDefaults=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','stateId')\">stateId</div>\n  <pre id=\"stateId\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList stateId=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','store')\">store</div>\n  <pre id=\"store\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList store=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','striped')\">striped</div>\n  <pre id=\"striped\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList striped=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','style')\">style</div>\n  <pre id=\"style\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList style=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','tabIndex')\">tabIndex</div>\n  <pre id=\"tabIndex\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList tabIndex=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','toFrontOnShow')\">toFrontOnShow</div>\n  <pre id=\"toFrontOnShow\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList toFrontOnShow=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','tooltip')\">tooltip</div>\n  <pre id=\"tooltip\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList tooltip=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','top')\">top</div>\n  <pre id=\"top\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList top=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','topRenderedIndex')\">topRenderedIndex</div>\n  <pre id=\"topRenderedIndex\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList topRenderedIndex=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','touchAction')\">touchAction</div>\n  <pre id=\"touchAction\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList touchAction=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','tpl')\">tpl</div>\n  <pre id=\"tpl\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList tpl=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','tplWriteMode')\">tplWriteMode</div>\n  <pre id=\"tplWriteMode\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList tplWriteMode=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','translatable')\">translatable</div>\n  <pre id=\"translatable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList translatable=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','triggerCtEvent')\">triggerCtEvent</div>\n  <pre id=\"triggerCtEvent\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList triggerCtEvent=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','triggerEvent')\">triggerEvent</div>\n  <pre id=\"triggerEvent\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList triggerEvent=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','twoWayBindable')\">twoWayBindable</div>\n  <pre id=\"twoWayBindable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList twoWayBindable=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','ui')\">ui</div>\n  <pre id=\"ui\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList ui=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','userCls')\">userCls</div>\n  <pre id=\"userCls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList userCls=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','userSelectable')\">userSelectable</div>\n  <pre id=\"userSelectable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList userSelectable=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','undefined')\">undefined</div>\n  <pre id=\"undefined\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList undefined=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','variableHeights')\">variableHeights</div>\n  <pre id=\"variableHeights\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList variableHeights=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','verticalOverflow')\">verticalOverflow</div>\n  <pre id=\"verticalOverflow\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList verticalOverflow=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','viewModel')\">viewModel</div>\n  <pre id=\"viewModel\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList viewModel=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','visibleHeight')\">visibleHeight</div>\n  <pre id=\"visibleHeight\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList visibleHeight=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','visibleLeft')\">visibleLeft</div>\n  <pre id=\"visibleLeft\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList visibleLeft=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','visibleTop')\">visibleTop</div>\n  <pre id=\"visibleTop\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList visibleTop=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','visibleWidth')\">visibleWidth</div>\n  <pre id=\"visibleWidth\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList visibleWidth=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','weight')\">weight</div>\n  <pre id=\"weight\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList weight=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','weighted')\">weighted</div>\n  <pre id=\"weighted\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList weighted=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','width')\">width</div>\n  <pre id=\"width\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList width=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','x')\">x</div>\n  <pre id=\"x\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList x=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','xtype')\">xtype</div>\n  <pre id=\"xtype\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList xtype=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','y')\">y</div>\n  <pre id=\"y\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList y=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','zIndex')\">zIndex</div>\n  <pre id=\"zIndex\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtList } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtList zIndex=''&gt;&lt;/ExtList&gt;\n      )\n    }\n  }\n  </pre>\n  ",
 "first": "List is a vertical `DataView` which additionally supports <a href=\"javascript:sendToContext('cfg',' #cfg!');\"> #cfg!</a>,\n<a href=\"javascript:sendToContext('cfg',' #cfg!');\"> #cfg!</a> and <a href=\"javascript:sendToContext('cfg',' #cfg!');\"> #cfg!</a>.",
 "text": "<div style=\"background:lightgray\">```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'list',\n    fullscreen: true,\n    itemTpl: '{title}',\n    data: [\n        { title: 'Item 1' },\n        { title: 'Item 2' },\n        { title: 'Item 3' },\n        { title: 'Item 4' }\n    ]\n});\n```</div>\n\nA more advanced example showing a list of people grouped by last name:\n\n<div style=\"background:lightgray\">```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'list',\n    fullscreen: true,\n    itemTpl: '<div class=\"contact\">{firstName} <b>{lastName}</b></div>',\n\n    store: {\n        grouper: {\n            property: 'lastName',\n            groupFn: function(record) {\n                return record.get('lastName')[0];\n            }\n        },\n\n        data: [\n            { firstName: 'Peter',   lastName: 'Venkman'  },\n            { firstName: 'Raymond', lastName: 'Stantz'   },\n            { firstName: 'Egon',    lastName: 'Spengler' },\n            { firstName: 'Winston', lastName: 'Zeddemore'}\n        ]\n    }\n});\n```</div>\n\n<div><span style=\"background:yellow;padding: 10px 10px 10px 0;font-size:24px;\">Components\n</span></div>\nTo use {@link Ext.Component} to render records instead of `<a href=\"javascript:sendToContext('cfg',' #cfg!');\"> #cfg!</a>`, use\n`<a href=\"javascript:sendToContext('cfg',' #cfg!');\"> #cfg!</a>` and `<a href=\"javascript:sendToContext('cfg',' #cfg!');\"> #cfg!</a>` (or `<a href=\"javascript:sendToContext('cfg',' #cfg!');\"> #cfg!</a>`).\n\nSee the documentation for the {@link Ext.dataview.Component} for more\ndetails.\n\n<div><span style=\"background:yellow;padding: 10px 10px 10px 0;font-size:24px;\">Scroll Docking\n</span></div>\nIf you want to dock items to the bottom or top of a List, you can use the `<a href=\"javascript:sendToContext('cfg',' #cfg!');\"> #cfg!</a>`\nconfiguration on child items in this List. The following example adds a button to the\nbottom of the List.\n\n<div style=\"background:lightgray\">```javascript\n@example({ framework: 'extjs' })\nExt.create({\n    xtype: 'list',\n    fullscreen: true,\n\n    store: [\n        { firstName: 'Peter',   lastName: 'Venkman'  },\n        { firstName: 'Raymond', lastName: 'Stantz'   },\n        { firstName: 'Egon',    lastName: 'Spengler' },\n        { firstName: 'Winston', lastName: 'Zeddemore'}\n    ],\n\n    itemTpl: '<div class=\"contact\">{firstName} <b>{lastName}</b></div>',\n\n    items: [{\n        xtype: 'button',\n        scrollDock: 'end',\n        text: 'Load More...'\n    }]\n});\n```</div>\nhtml example here...\n<div style=\"background:lightgray\">```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-list.component';\n\nexport default class BasicListComponent {\n    constructor() {\n        this.store = new Ext.data.Store({\n           data: [\n               {title: 'Item 1'},\n               {title: 'Item 2'},\n               {title: 'Item 3'},\n               {title: 'Item 4'}\n           ]\n       });\n    }\n    readylistView(event) {\n        this.listView = event.detail.cmp;\n        this.listView.setStore(this.store);\n        this.listView.setItemTpl(`{title}`);\n    }\n}\n\nwindow.basiclist = new BasicListComponent();\n```</div>\nhtml example here...\n<div style=\"background:lightgray\">```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-list.component';\n\nexport default class GroupedListComponent {\n    constructor() {\n        this.store = new Ext.data.Store({\n            data: [{\n               firstName: 'Peter',\n               lastName: 'Venkman'\n            }, {\n               firstName: 'Raymond',\n                lastName: 'Stantz'\n            }, {\n               firstName: 'Egon',\n               lastName: 'Spengler'\n            }, {\n               firstName: 'Winston',\n               lastName: 'Zeddemore'\n           }],\n\n           sorters: 'lastName',\n\n           grouper: {\n               groupFn: function(record) {\n                   return record.get('lastName')[0];\n               }\n           }\n       });\n   }\n\n   readyGroupedListView(event) {\n       this.groupedlistView = event.detail.cmp;\n       this.groupedlistView.setStore(this.store);\n       this.groupedlistView.setItemTpl(`{firstName} {lastName}`);\n   }\n}\n\nwindow.groupedlist = new GroupedListComponent();\n```</div>\nhtml example here...\n<div style=\"background:lightgray\">```javascript\n@example({framework: 'ext-web-components', tab: 2, packages: ['ext-web-components']})\nimport '@sencha/ext-web-components/dist/ext-list.component';\nimport '@sencha/ext-web-components/dist/ext-button.component';\n\nexport default class PositionedListItemComponent {\n\n    constructor() {\n        this.store = new Ext.data.store({\n            data: [{\n                firstName: 'Peter',\n                lastName: 'Venkman'\n             },\n             {\n                firstName: 'Raymond',\n                lastName: 'Stantz'\n             },\n             {\n                firstName: 'Egon',\n                lastName: 'Spengler'\n             },\n             {\n                firstName: 'Winston',\n                lastName: 'Zeddemore'\n           }]\n       })\n\n   }\n\n   readyPositionedListView(event) {\n        this.positionedListView = event.detail.cmp;\n        this.positionedListView.setStore(this.store);\n        this.positionedListView.setItemTpl(`{firstName} {lastName}`);\n   }\n}\n\nwindow.positionlistitem = new PositionedListItemComponent();\n\n```</div>\n<div style=\"background:lightgray\">```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtList } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n\n    store = new Ext.data.Store({\n        data: [\n            {title: 'Item 1'},\n            {title: 'Item 2'},\n            {title: 'Item 3'},\n            {title: 'Item 4'}\n        ]\n    });\n\n    render() {\n        return (\n            <ExtList\n                itemTpl=\"{title}\"\n                store={this.store}\n            />\n        )\n    }\n}\n```</div>\n<div style=\"background:lightgray\">```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtList, ExtButton } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n\n    store = new Ext.data.Store({\n        data: [{\n            firstName: 'Peter',\n            lastName: 'Venkman'\n        }, {\n            firstName: 'Raymond',\n            lastName: 'Stantz'\n        }, {\n            firstName: 'Egon',\n            lastName: 'Spengler'\n        }, {\n            firstName: 'Winston',\n            lastName: 'Zeddemore'\n        }],\n\n       sorters: 'lastName',\n\n       grouper: {\n           groupFn: function(record) {\n               return record.get('lastName')[0];\n           }\n        }\n    });\n\n    render() {\n        return (\n            <ExtList\n                itemTpl=\"{firstName} {lastName}\"\n                store={this.store}\n                grouped\n            />\n        )\n    }\n}\n```</div>\n<div style=\"background:lightgray\">```javascript\n@example({framework: 'ext-react', packages:['ext-react']})\nimport React, { Component } from 'react'\nimport { ExtList, ExtButton } from '@sencha/ext-react';\n\nexport default class MyExample extends Component {\n\n    store = new Ext.data.Store({\n        data: [{\n            firstName: 'Peter',\n            lastName: 'Venkman'\n        },\n        {\n            firstName: 'Raymond',\n            lastName: 'Stantz'\n        },\n        {\n            firstName: 'Egon',\n            lastName: 'Spengler'\n        },\n        {\n            firstName: 'Winston',\n            lastName: 'Zeddemore'\n        }]\n    });\n\n    render() {\n        return (\n            <ExtList\n                itemTpl=\"{firstName} {lastName}\"\n                store={this.store}\n             >\n                 <ExtButton\n                     scrollDock=\"bottom\"\n                     docked=\"bottom\"\n                     text=\"load more...\"\n                 />\n            </ExtList>\n        )\n    }\n}\n```</div>\n<div style=\"background:lightgray\">```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n@Component({\n    selector: 'app-root-1',\n    styles: [`\n            `],\n    template: `\n             <ExtList\n                [store]=\"this.store\"\n                [itemTpl]=\"this.itemTpl\"\n            ></ExtList>\n            `\n})\nexport class AppComponent {\n    store = new Ext.data.Store({\n        data: [\n            {title: 'Item 1'},\n            {title: 'Item 2'},\n            {title: 'Item 3'},\n            {title: 'Item 4'}\n        ]\n    });\n\n    itemTpl = \"{title}\";\n}\n```</div>\n<div style=\"background:lightgray\">```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\nimport { Component } from '@angular/core'\ndeclare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [`\n             `],\n     template: `\n              <ExtList\n                 [store]=\"this.store\"\n                 [itemTpl]=\"this.itemTpl\"\n                 grouped=\"true\"\n             ></ExtList>\n             `\n })\n export class AppComponent {\n     store = new Ext.data.Store({\n         data: [{\n             firstName: 'Peter',\n             lastName: 'Venkman'\n         }, {\n             firstName: 'Raymond',\n             lastName: 'Stantz'\n         }, {\n             firstName: 'Egon',\n             lastName: 'Spengler'\n         }, {\n             firstName: 'Winston',\n             lastName: 'Zeddemore'\n         }],\n\n         sorters: 'lastName',\n\n         grouper: {\n             groupFn: function(record) {\n                 return record.get('lastName')[0];\n             }\n         }\n    });\n\n    itemTpl = \"{firstName} {lastName}\";\n}\n```</div>\n<div style=\"background:lightgray\">```javascript\n@example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [`\n             `],\n     template: `\n             <ExtList\n                 [store]=\"this.store\"\n                 [itemTpl]=\"this.itemTpl\"\n             >\n             <ExtButton\n                   scrollDock=\"bottom\"\n                   docked=\"bottom\"\n                   text=\"load more...\"\n               ></ExtButton>\n             </ExtList>\n             `\n })\n export class AppComponent {\n     store = new Ext.data.Store({\n         data: [{\n             firstName: 'Peter',\n             lastName: 'Venkman'\n         },\n         {\n             firstName: 'Raymond',\n             lastName: 'Stantz'\n         },\n         {\n             firstName: 'Egon',\n             lastName: 'Spengler'\n         },\n         {\n             firstName: 'Winston',\n             lastName: 'Zeddemore'\n         }]\n     });\n\n     itemTpl = \"{firstName} {lastName}\";\n}\n```</div>\n"
}