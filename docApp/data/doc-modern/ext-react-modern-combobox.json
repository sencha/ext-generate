{
 "title": "&lt;ExtCombobox&gt;&lt;/ExtCombobox&gt;",
 "docProperties": [
  {
   "name": "alignSelf",
   "text": "Specifies the self alignment of this widget in a box layout\n"
  },
  {
   "name": "alignTarget",
   "text": "The element reference to which the {@link #cfg!picker} aligns\nand sizes to. By default, it sizes to the `bodyElement` which encapsulates the\ninput field and triggers.\n\nAn alternate value which may be useful if using `{@link #cfg!floated floated}` pickers on phone platforms\ncould be `el`, to align the picker to the field's encapsulating element.\n"
  },
  {
   "name": "allQuery",
   "text": "The text query to use to filter the store when the trigger element is tapped\n(or expansion is requested by a keyboard gesture). By default, this is `null`\ncausing no filtering to occur.\n"
  },
  {
   "name": "alwaysOnTop",
   "text": "A flag indicating that this component should\nbe above its floated siblings.\n\nThis may be a positive number to prioritize the ordering of multiple visible always on\ntop components.\n\nThis may be set to a *negative* number to prioritize a component to the *bottom* of the\nz-index stack.\n"
  },
  {
   "name": "animateUnderline",
   "text": "'true' to animate the underline of a field when focused\n"
  },
  {
   "name": "anyMatch",
   "text": "* Only valid when {@link #cfg!queryMode} is `'local'`.*\nConfigure as `true` to cause the {@link #cfg!primaryFilter} to match the typed\ncharacters at any position in the {@link #cfg!displayField #displayField}'s value when filtering\n*locally*.\n"
  },
  {
   "name": "ariaAttributes",
   "text": "An object containing ARIA attributes to be set\non this Component's ARIA element. Use this to set the attributes that cannot be\ndetermined by the Component's state, such as `aria-live`, `aria-flowto`, etc.\n\n**Note** that this config is only meaningful at the Component rendering time,\nand setting it after that will do nothing.\n"
  },
  {
   "name": "ariaDescribedBy",
   "text": "DOM selector for a child element that is to be used\nas description for this Component, set in `aria-describedby` attribute.\nThe selector works the same way as {@link #cfg!ariaLabelledBy #ariaLabelledBy}.\n"
  },
  {
   "name": "ariaLabel",
   "text": "ARIA label for this Component. It is best to use\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} option instead, because screen readers prefer\n`aria-labelledby` attribute to `aria-label`. {@link #cfg!ariaLabel #ariaLabel} and\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} config options are mutually exclusive.\n"
  },
  {
   "name": "ariaLabelledBy",
   "text": "DOM selector for a child element that is to be used\nas label for this Component, set in `aria-labelledby` attribute.\nIf the selector is by `{@link #cfg!id #id}`, the label element can be any existing element,\nnot necessarily a child of the main Component element.\n\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} and {@link #cfg!ariaLabel #ariaLabel} config options are\nmutually exclusive, and `{@link #cfg!ariaLabelledBy ariaLabelledBy}` has the higher precedence.\n"
  },
  {
   "name": "autoCapitalize",
   "text": "True to set the field's DOM element auto-capitalize attribute to \"on\", false to\nset to \"off\".\n"
  },
  {
   "name": "autoComplete",
   "text": "Autocomplete is disabled on Picker fields by default.\n"
  },
  {
   "name": "autoCorrect",
   "text": "True to set the field DOM element autocorrect attribute to \"on\", false to set to \"off\".\n"
  },
  {
   "name": "autoFitErrors",
   "text": "Whether to adjust the field's body width to make room for the\n{@link #cfg!errorTarget error messages}.\n"
  },
  {
   "name": "autoFocus",
   "text": "`true` to automatically focus the first result gathered by the data store in the\ndropdown list when it is opened. A false value would cause nothing in the list\nto be highlighted automatically, so the user would have to manually highlight an\nitem before pressing the enter or {@link #cfg!selectOnTab tab} key to select it\n(unless the value of ({@link #cfg!typeAhead #typeAhead}) were true), or use the mouse to select\na value.\n"
  },
  {
   "name": "autoFocusLast",
   "text": "When `true`, the last selected record in the dropdown list will be re-selected\nupon {@link #cfg!autoFocus #autoFocus}. Set to `false` to always select the first record in\nthe drop-down list. For accessible applications it is recommended to set this\noption to `false`.\n"
  },
  {
   "name": "autoHideInputMask",
   "text": "Specify as `false` to always show the `{@link #cfg!inputMask inputMask}`.\n"
  },
  {
   "name": "autoLoadOnValue",
   "text": "This option controls whether to initially load the store when a value is set so\nthat the display value can be determined from the appropriate record.\n\nThe store will only be loaded in a limited set of circumstances:\n- The store is not currently loading.\n- The store does not have a pending {@link Ext.data.Store#cfg!autoLoad Ext.data.Store#autoLoad}.\n- The store has not been loaded before.\n"
  },
  {
   "name": "autoSelect",
   "text": "`true` to auto select the first value in the {@link #cfg!store #store} or {@link #cfg!options #options} when\nthey are changed. Only happens when the {@link #cfg!value #value} is set to `null`.\n"
  },
  {
   "name": "axisLock",
   "text": "If `true`, then, when {@link #method!showBy #showBy} or {@link #method!alignTo #alignTo} fallback on\nconstraint violation only takes place along the major align axis.\n\nThat is, if alignment `\"l-r\"` is being used, and `axisLock: true` is used,\nthen if constraints fail, only fallback to `\"r-l\"` is considered.\n"
  },
  {
   "name": "badFormatMessage",
   "text": "The error message that will be displayed if the value cannot be parsed (for some\nderived types) or if the value does not match a configured {@link #cfg!inputMask #inputMask}.\n"
  },
  {
   "name": "bind",
   "text": "Setting this config option adds or removes data bindings for other configs.\nFor example, to bind the `title` config:\n\n     var panel = Ext.create({\n         xtype: 'panel',\n         bind: {\n             title: 'Hello {user.name}'\n         }\n     });\n\nTo dynamically add bindings:\n\n     panel.setBind({\n         title: 'Greetings {user.name}!'\n     });\n\nTo remove bindings:\n\n     panel.setBind({\n         title: null\n     });\n\nThe bind expressions are presented to `{@link Ext.app.ViewModel#method!bind Ext.app.ViewModel#bind}`. The\n`ViewModel` instance is determined by `{@link #method!lookupViewModel lookupViewModel}`.\n\n**Note:** If  bind is passed as a string, it will use the\n{@link Ext.Component#property!defaultBindProperty Ext.Component#property-defaultBindProperty} for the binding.\n"
  },
  {
   "name": "bodyAlign"
  },
  {
   "name": "border",
   "text": "Enables or disables bordering on this component.\nThe following values are accepted:\n\n- `null` or `true (default): Do nothing and allow the border to be specified\nby the theme.\n- `false`: suppress the default border provided by the theme.\n\nPlease note that enabling bordering via this config will not add a `border-color`\nor `border-style` CSS property to the component; you provide the `border-color`\nand `border-style` via CSS rule or {@link #cfg!style #style} configuration\n(if not already provide by the theme).\n\n## Using {@link #cfg!style #style}:\n\n    Ext.Viewport.add({\n        centered: true,\n        width: 100,\n        height: 100,\n\n        style: 'border: 1px solid blue;'\n        // ...\n    });\n\n## Using CSS:\n\n    Ext.Viewport.add({\n        centered: true,\n        width: 100,\n        height: 100,\n\n        cls: 'my-component'\n        // ...\n    });\n\nAnd your CSS file:\n\n    .my-component {\n        border: 1px solid red;\n    }\n"
  },
  {
   "name": "bottom",
   "text": "The absolute bottom position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n"
  },
  {
   "name": "bubbleDirty",
   "text": "Set to `false` to disable dirty states affecting ancestor containers such as\n`fieldpanel` or `formpanel`. The dirty state of such containers is based on the\npresence of dirty descendants. In some cases, however, it may be desired to\nhide the dirty state of one of these containers from its ancestor containers.\n"
  },
  {
   "name": "caseSensitive",
   "text": "* Only valid when {@link #cfg!queryMode} is `'local'`.*\nConfigure as `true` to cause the {@link #cfg!primaryFilter} to match with\nexact case matching.\n"
  },
  {
   "name": "centered",
   "text": "Configure this as `true` to have this Component centered within its Container.\nSetting this value to `true` will make this Component become 'positioned', which means\nit will no longer participate in the layout of the Container that it resides in.\n"
  },
  {
   "name": "chipView",
   "text": "A configuration object which may be specified to configure the\n{@link Ext.dataview.ChipView} used to display \"tags\" representing selected items\nwhen {@link #cfg!multiSelect} is `true`.\n"
  },
  {
   "name": "clearable",
   "text": "`true` to show a clear trigger in this field when it has a non-empty value\n"
  },
  {
   "name": "cls",
   "text": "The CSS class to add to this widget's element, in\naddition to the {@link #property!baseCls #baseCls}. In many cases, this property will be specified\nby the derived widget class. See {@link #cfg!userCls #userCls} for adding additional CSS\nclasses to widget instances (such as items in a {@link Ext.Container}).\n"
  },
  {
   "name": "collapseOnSelect",
   "text": "Has no effect if {@link #cfg!multiSelect} is `false`\n\nConfigure as true to automatically hide the picker after a selection is made.\n"
  },
  {
   "name": "constrainAlign",
   "text": "A specification of the constraint to apply when {@link #method!showBy #showBy} or {@link #method!alignTo #alignTo}\nis called to align a {@link #cfg!floated #floated} or positioned component.\n\nDefaults to the parent container for *positioned* components (components\nwhich have their {@link #cfg!top}, {@link #cfg!right}, {@link #cfg!bottom} or\n{@link #cfg!left} set to move them out of their container's layout flow).\n\nDefaults to the viewport for {@link #cfg!floated #floated} components.\n\nMay be a {@link Ext.ComponentQuery} selector to find an ancestor\ncomponent to constrain within.\n\nMay be `false` to specify that constraining is not applied.\n\nYou may also specify an element, or a {@link Ext.util.Region}\n"
  },
  {
   "name": "contentEl",
   "text": "The configured element will automatically be added as the content of this\ncomponent. When you pass a string, we expect it to be an element id. If the\ncontent element is hidden, we will automatically show it.\n"
  },
  {
   "name": "controller",
   "text": "A string alias, a configuration object or an instance of a `ViewController` for\nthis container. Sample usage:\n\n    Ext.define('MyApp.UserController', {\n        alias: 'controller.user'\n    });\n\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: 'user'\n    });\n    // Or\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: {\n            type: 'user',\n            someConfig: true\n        }\n    });\n\n    // Can also instance at runtime\n    var ctrl = new MyApp.UserController();\n    var view = new UserContainer({\n        controller: ctrl\n    });\n"
  },
  {
   "name": "data",
   "text": "The initial set of data to apply to the `{@link #cfg!tpl #tpl}` to\nupdate the content area of the Component.\n\n**Note:** Data will be appended to any existing data.\n"
  },
  {
   "name": "dataType",
   "text": "A config for a {@link Ext.data.field.Field} or data field sub-class instance\nused to serialize this field's value for form submission. This is used by the\n{@link #method!serialize #serialize} method unless `{@link #cfg!modelValidation modelValidation}` is used, in which case, the\ndata field of the bound {@link Ext.data.Model} is used.\n\nFor example:\n\n     {\n         xtype: 'datefield',\n         dataType: {\n             // type: 'date'  (datefield does this by default)\n             dateWriteFormat: 'Y-m-d'\n         }\n     }\n\nIf this config is a string, it is used to create a {@link Ext.data.field.Field}\nby that alias.\n"
  },
  {
   "name": "defaultListenerScope",
   "text": "If `true`, this component will be the default scope (this pointer) for events\nspecified with string names so that the scope can be dynamically resolved. The\ncomponent will automatically become the defaultListenerScope if a\n{@link #cfg!controller #controller} is specified.\n\nSee the introductory docs for {@link Ext.Container Ext.container.Container} for some sample\nusages.\n\n**NOTE**: This value can only be reliably set at construction time. Setting it\nafter that time may not correctly rewire all of the potentially effected\nlisteners.\n"
  },
  {
   "name": "delimiter",
   "text": "The character(s) used to separate new values to be added when {@link #createNewOnEnter}\nor {@link #createNewOnBlur} are set.\n\nOnly meaningful when {@link #cfg!multiSelect} is `true`.\n"
  },
  {
   "name": "dirty",
   "text": "This config property describes the modified state of this component. In most\ncases this config's value is maintained by the component and should be considered\nreadonly. The class implementor should be the only one to call the setter.\n\nFor containers, this config will be updated on a short delay in some cases.\n"
  },
  {
   "name": "disabled",
   "text": "`true` to disable the field.\n\nBe aware that conformant with the [HTML specification](http://www.w3.org/TR/html401/interact/forms.html),\ndisabled Fields will not be {@link Ext.form.Panel#method!submit submitted}.\n"
  },
  {
   "name": "displayed",
   "text": "Set to `true` to call `show` and `false` to call `hide`. Unlike the `{@link #cfg!hidden hidden}`\nconfig, changing this config will potentially involve animations to show or\nhide the component.\n"
  },
  {
   "name": "displayField",
   "text": "The underlying {@link Ext.data.field.Field#cfg!name data value name} to bind to this\nSelect control.  If configured as `null`, the {@link #cfg!valueField} is used.\n\nThis resolved value is the visibly rendered value of the available selection\noptions.\n"
  },
  {
   "name": "displayTpl",
   "text": "The template to be used to display the selected record inside the text field.\n\nIf not specified, the {@link #cfg!displayField} is shown in the text field.\n"
  },
  {
   "name": "docked",
   "text": "The dock position of this component in its container. Can be `{@link #cfg!left left}`, `{@link #cfg!top top}`, `{@link #cfg!right right}` or\n`{@link #cfg!bottom bottom}`.\n\n__Notes__\n\nYou must use a HTML5 doctype for {@link #cfg!docked #docked} `{@link #cfg!bottom bottom}` to work. To do this, simply\nadd the following code to the HTML file:\n\n    <!doctype html>\n\nSo your index.html file should look a little like this:\n\n    <!doctype html>\n    <html>\n        <head>\n            <title>MY application title</title>\n            ...\n"
  },
  {
   "name": "draggable",
   "text": "Set to `true` to allow this component to be dragged. This can also be the config\nobject for the `{@link Ext.drag.Source}` that will manage the drag.\n"
  },
  {
   "name": "edgePicker",
   "text": "A configuration object, containing an {@link cfg#xtype} property which specifies\nthe widget to create if `{@link #cfg!picker}: 'edge'` (or if it's '`auto'` and the\napp is on a phone).\n\nReplaces `defaultPhonePicker`\n"
  },
  {
   "name": "editable",
   "text": "Configure as `false` to prevent the user from typing text directly into the\nfield; the field can only have its value set programmatically or via an action\ninvoked by a trigger.\n\nContrast with {@link #cfg!readOnly} which disables all mutation via the UI.\n"
  },
  {
   "name": "enableRegEx",
   "text": "*When {@link #cfg!queryMode #queryMode} is `'local'` only*\n\nSet to `true` to have the ComboBox use the typed value as a RegExp source to\nfilter the store to get possible matches.\nInvalid regex values will be ignored.\n"
  },
  {},
  {
   "name": "error",
   "text": "The error (or errors) to display for this field. This config is typically set\nby the field's {@link #cfg!validators} but can be set directly if\nan error needs to be associated with a field manually.\n\nErrors will be HTML encoded as necessary and {@link #cfg!errorTpl}\nbefore becoming the current {@link #cfg!errorMessage}.\n"
  },
  {
   "name": "errorMessage",
   "text": "The field's error message to display as {@link #cfg!errorTarget}.\nThis message must already be properly formatted and encoded as appropriate\nfor the `{@link #cfg!errorTarget errorTarget}`.\n"
  },
  {
   "name": "errorTarget",
   "text": "The location where the error message text should display.\n\nThe following are values that have predefined meaning:\n\n- `qtip` Display a {@link Ext.tip.Manager} containing the message\n when the user hovers (or taps) the field. For this option to work, quick tips\n must be enabled by calling {@link Ext.tip.Manager#init}.\n- `side` Add an error icon to the right of the field, displaying the message\n in a popup on hover or tap.\n- `title` Display the message in a default browser `title` attribute.\n- `under` Add a `div` beneath the field containing the error message.\n"
  },
  {
   "name": "errorTip",
   "text": "The default config that will be used to display errors in the tooltip.\n"
  },
  {
   "name": "errorTpl",
   "text": "The template used to format the {@link #cfg!error} set for this field.\nBy default, the {@link #cfg!errorTarget} is used to determine\nwhether the error(s) are formatted as an HTML list or as plain text.\n"
  },
  {},
  {},
  {
   "name": "flex",
   "text": "The flex of this item *if* this item item is inside a {@link Ext.layout.HBox}\nor {@link Ext.layout.VBox} layout.\n\nYou can also update the flex of a component dynamically using\nthe {@link Ext.layout.FlexBox#setItemFlex} method.\n\nWhen supplied as a string or number this option supports the same syntax\nas CSS [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex).\nFor example:\n\n    flex: '1 2 auto'\n\nsets `flex-grow` property to `0`, `flex-shrink` to `2` and `flex-basis` to\n`'auto'`.\n\nThe default `flex-shrink` value for box layout items is set to `0` in the\nstylesheet, which is different from the browser's default `flex-shrink` value\nof `1`.  This accommodates the majority use case for applications since where\nnon-flexed components are typically not expected to shrink smaller than their\ndefault size.\n\nFor convenience when only a single number is supplied it is used as the value\nfor both `flex-grow` and `flex-shrink`, for example `flex: 3` is the same as\n`flex: '3 3'`\n\nAn object form is also accepted:\n\n    flex: {\n        grow: 1,\n        shrink: 2,\n        basis: 'auto'\n    }\n\nWhen the object form is supplied `shrink` always defaults to `0` regardless\nof the value of `grow`.\n\nAlthough `'auto'` is the default value for flex-basis, flex-basis defaults to 0%\nwhen flex is supplied as a single numeric or string value (e.g. `flex: 1`). If\nthis behavior is not desired either explicitly set flex-basis to `'auto'` or use\nthe object form to set only grow and/or shrink:\n\n    flex: {\n        grow: 2\n    }\n"
  },
  {
   "name": "floated",
   "text": "A Component may be floated above all other components in the application. This means that\nthe component is absolutely positioned, and will move to the front and occlude other\nsibling floated component if clicked.\n\nA Floated component may have floated descendants. It will bring these decendants to the\nfront with it when brought to the front of its sibling floated components.\n\nBy default, descendant floated components are all positioned using the viewport\ncoordinate system. To make a floating component a positioning parent for descendants,\nand have the ancestors positioned relatively, configure the parent floated component\nwith `{@link #cfg!relative #cfg-relative}: true`.\n"
  },
  {
   "name": "floatedPicker",
   "text": "A configuration object, containing an {@link cfg#xtype} property which specifies\nthe widget to create if `{@link #cfg!picker}: 'floated'` (or if it's '`auto'` and\nthe app is *not* on a phone).\n\nReplaces `defaultTabletPicker`\n"
  },
  {
   "name": "floatedPickerAlign",
   "text": "*Only valud when the {@link #cfg!floatedPicker} is used.\nThe {@link Ext.Component#method!showBy} alignment string to use when showing the\nfloated picker by the input field.\n"
  },
  {
   "name": "focusCls",
   "text": "CSS class that will be added to focused\ncomponent's {@link #property!focusClsEl #focusClsEl}, and removed when component blurs.\n"
  },
  {
   "name": "focusTrap"
  },
  {
   "name": "forceSelection",
   "text": "Set to `true` to restrict the selected value to one of the values in the list, or\n`false` to allow the user to set arbitrary text into the field.\n"
  },
  {
   "name": "fullscreen"
  },
  {
   "name": "height",
   "text": "The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`,\n`30%`, etc. By default, if this is not explicitly set, this Component's element will\nsimply have its own natural size. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n"
  },
  {
   "name": "hidden",
   "text": "Whether or not this Component is hidden (its CSS `display` property is set to `none`).\n\nDefaults to `true` for {@link #cfg!floated #floated} Components.\n"
  },
  {
   "name": "hiddenName",
   "text": "Specify a `{@link #cfg!hiddenName hiddenName}` if you're using the {@link Ext.form.Panel#cfg!standardSubmit Ext.form.Panel#standardSubmit}\noption. This name will be used to post the underlying value of the select to\nthe server.\n"
  },
  {
   "name": "hideAnimation",
   "text": "Animation effect to apply when the Component is being hidden.  Typically you want to use\nan outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check\nthe {@link Ext.fx.Animation#cfg!type Ext.fx.Animation#type} config.\n"
  },
  {
   "name": "hideMode",
   "text": "A String which specifies how this component's DOM element will be hidden. The\naccepted values are any of these:\n\n- `'clip'` : Hide using {@link Ext.dom.Element#static-property!CLIP clip}.\n- `'display'` : Hide using {@link Ext.dom.Element#static-property!DISPLAY display}.\n- `'offsets'` : Hide using positioning {@link Ext.dom.Element#static-property!OFFSETS offsets}.\n- `'opacity'` : Hide using {@link Ext.dom.Element#static-property!OPACITY opacity}.\n- `'visibility'` : Hide using {@link Ext.dom.Element#static-property!VISIBILITY visibility}.\n\nHiding using ``display`` results in having no dimensions as well as resetting\nscroll positions to 0.\n\nThe other modes overcome this but may have different trade-offs in certain\ncircumstances.\n"
  },
  {
   "name": "hideOnMaskTap",
   "text": "When using a {@link #cfg!modal} Component, setting this to `true` will hide\nthe modal mask and the Container when the mask is tapped on.\n"
  },
  {
   "name": "hideTrigger",
   "text": "`true` to hide the expand {@link #cfg!triggers trigger}.\n"
  },
  {
   "name": "html",
   "text": "Optional HTML content to render inside this Component, or a reference to an\nexisting element on the page.\n"
  },
  {
   "name": "id",
   "text": "The **unique id of this component instance.**\n\nIt should not be necessary to use this configuration except for singleton objects in\nyour application. Components created with an id may be accessed globally\nusing {@link Ext#method!getCmp Ext.getCmp}.\n\nInstead of using assigned ids, use the {@link #cfg!itemId #itemId} config,\nand {@link Ext.ComponentQuery} which provides selector-based searching\nfor Sencha Components analogous to DOM querying. The {@link Ext.Container} class\ncontains {@link Ext.Container#method!down shortcut methods} to query its descendant Components\nby selector.\n\nNote that this id will also be used as the element id for the containing HTML element\nthat is rendered to the page for this component. This allows you to write id-based CSS\nrules to style the specific instance of this component uniquely, and also to select\nsub-elements using this component's id as the parent.\n\n**Note**: to avoid complications imposed by a unique id also see `{@link #cfg!itemId #itemId}`.\n\nDefaults to an auto-assigned id.\n"
  },
  {
   "name": "inline",
   "text": "`true` to cause this field to layout with inline element behavior.\nAn inline field's width is determined by the total width of its label and body\nelements instead of automatically expanding to fill the width of its container.\n"
  },
  {},
  {
   "name": "inputMask",
   "text": "\n**Important:** To use this config you must require `{@link Ext.field.InputMask}` or\nuse a complete framework build. The logic to implement an `{@link #cfg!inputMask inputMask}` is not\nautomatically included in a build.\n"
  },
  {
   "name": "inputType",
   "text": "The type attribute for input fields -- e.g. text,\npassword, date, url, email, etc.\n"
  },
  {
   "name": "inputValue"
  },
  {
   "name": "instanceCls",
   "text": "\nAn extra CSS class or classes to augment the {@link #property!classCls #classCls} on an individual instance\n"
  },
  {
   "name": "itemCls",
   "text": "An additional CSS class to apply to items within the picker list.\n"
  },
  {
   "name": "itemId",
   "text": "An itemId can be used as an alternative way to get a reference to a component when no\nobject reference is available. Instead of using an `{@link #cfg!id #id}` with {@link Ext#method!getCmp Ext#getCmp},\nuse `{@link #cfg!itemId itemId}` with {@link Ext.Container#method!getComponent Ext.Container#getComponent} which will retrieve `{@link #cfg!itemId itemId}`'s or\n{@link #cfg!id #id}'s. Since `{@link #cfg!itemId itemId}`'s are an index to the container's internal MixedCollection,\nthe `{@link #cfg!itemId itemId}` is scoped locally to the container - avoiding potential conflicts with\n{@link Ext.ComponentManager} which requires a **unique** `{@link #cfg!id #id}`.\n\nAlso see {@link #cfg!id #id}, {@link Ext.Container#method!query Ext.Container#query}, {@link Ext.Container#method!down Ext.Container#down} and\n{@link Ext.Container#method!child Ext.Container#child}.\n"
  },
  {
   "name": "itemTpl",
   "text": "An XTemplate definition string (Or an {@link Ext.XTemplate}) which specifies\nhow to display a list item from a record values object. This is automatically\ngenerated to display the {@link #cfg!displayField} if not specified.\n"
  },
  {
   "name": "keyMap",
   "text": "An object containing handlers for keyboard events. The property names of this\nobject are the key name and any modifiers. The values of the properties are the\ndescriptors of how to handle each event.\n\nThe handler descriptor can be simply the handler function(either the\nliteral function or the method name), or it can be an object with these\nproperties:\n\n - `handler`: The function or its name to call to handle the event.\n - `scope`: The this pointer context (can be \"this\" or \"controller\").\n - `event`: An optional override of the key event to which to listen.\n\n**Important:** Calls to `setKeyMap` do not replace the entire `{@link #cfg!keyMap keyMap}` but\ninstead update the provided mappings. That is, unless `null` is passed as the\nvalue of the `{@link #cfg!keyMap keyMap}` which will clear the `{@link #cfg!keyMap keyMap}` of all entries.\n"
  },
  {
   "name": "keyMapEnabled",
   "text": "Enables or disables processing keys in the `{@link #cfg!keyMap keyMap}`. This value starts as\n`null` and if it is `null` when `{@link #method!initKeyMap initKeyMap}` is called, it will automatically\nbe set to `true`. Since `{@link #method!initKeyMap initKeyMap}` is called by `{@link Ext.Component}` at the\nproper time, this is not something application code normally handles.\n"
  },
  {
   "name": "keyMapTarget",
   "text": "The name of the member that should be used to listen for keydown/keypress events.\nThis is intended to be controlled at the class level not per instance.\n"
  },
  {
   "name": "label",
   "text": "The label of this field\n"
  },
  {
   "name": "labelAlign",
   "text": "When value is `'placeholder'`, the label text will be rendered as placeholder\ntext inside the empty input and will animated to \"top\" alignment when the input\nis focused or contains text.\nThe position to render the label relative to the field body.\n"
  },
  {
   "name": "labelCls",
   "text": "Optional CSS class to add to the Label element.\n"
  },
  {
   "name": "labelInPlaceholder"
  },
  {
   "name": "labelMinWidth",
   "text": "Min-width of this field's label.\n"
  },
  {
   "name": "labelTextAlign",
   "text": "\nText alignment of this field's label\n"
  },
  {
   "name": "labelWidth",
   "text": "Width of this field's label. Can be a number of pixels or any valid CSS value,\nsuch as `'30%'`. To size the label to its text, use `labelWidth: 'auto'`\n"
  },
  {
   "name": "labelWrap",
   "text": "`true` to allow the label to wrap. If set to `false`, the label will be truncated\nwith an ellipsis.\n"
  },
  {
   "name": "left",
   "text": "The absolute left position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n"
  },
  {
   "name": "listeners",
   "text": "\nA config object containing one or more event handlers to be added to this object during\ninitialization. This should be a valid listeners config object as specified in the\n{@link Ext.util.Observable#method!addListener addListener} example for attaching\nmultiple handlers at once.\n\n**DOM events from Ext JS {@link Ext.Component}**\n\nWhile _some_ Ext JS Component classes export selected DOM events (e.g. \"click\",\n\"mouseover\" etc), this is usually only done when extra value can be added. For example\nthe {@link Ext.view.View DataView}'s **`{@link Ext.view.View#itemclick itemclick}`**\nevent passing the node clicked on. To access DOM events directly from a child element\nof a Component, we need to specify the `element` option to identify the Component\nproperty to add a DOM listener to:\n\n    new Ext.panel.Panel({\n        width: 400,\n        height: 200,\n        dockedItems: [{\n            xtype: 'toolbar'\n        }],\n        listeners: {\n            click: {\n                element: 'el', //bind to the underlying el property on the panel\n                fn: function(){ console.log('click el'); }\n            },\n            dblclick: {\n                element: 'body', //bind to the underlying body property on the panel\n                fn: function(){ console.log('dblclick body'); }\n            }\n        }\n    });\n"
  },
  {
   "name": "margin",
   "text": "The margin to use on this Component. Can be specified as a number (in which\ncase all edges get the same margin) or a CSS string like '5 10 10 10'\n"
  },
  {
   "name": "matchFieldWidth",
   "text": "*Only valid when the `{@link #cfg!picker}: 'floated'` is used.\nWhether the {@link #cfg!floatedPicker}'s width should be explicitly set to match\nthe width of the input element.\n"
  },
  {
   "name": "maxHeight",
   "text": "The maximum height of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size. Note that this config will not apply if the\nComponent is 'positioned' (absolutely positioned or centered)\n"
  },
  {
   "name": "maxLength",
   "text": "The maximum number of permitted input characters.\n"
  },
  {
   "name": "maxWidth",
   "text": "The maximum width of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size. Note that this config will not apply if the\nComponent is 'positioned' (absolutely positioned or centered)\n"
  },
  {
   "name": "minChars",
   "text": "The minimum number of characters the user must type before autocomplete and\n{@link #cfg!typeAhead #typeAhead} activate.\n\nDefaults to `4` if {@link #cfg!queryMode #queryMode} is `'remote'` or `0` if {@link #cfg!queryMode #queryMode}\nis `'local'`, does not apply if {@link Ext.form.field.Trigger#editable editable}\nis `false`.\n"
  },
  {
   "name": "minHeight",
   "text": "The minimum height of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n"
  },
  {
   "name": "minWidth",
   "text": "The minimum width of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n"
  },
  {
   "name": "modal",
   "text": "`true` to make this Component modal. This will create a mask underneath the\nComponent that covers its parent and does not allow the user to interact with\nany other Components until this Component is dismissed.\n"
  },
  {
   "name": "modelValidation",
   "text": "This config enables binding to your `{@link Ext.data.Model#cfg!validators Ext.data.Model#validators}`. This\nis only processed by form fields (e.g., `Ext.field.*`) at present, however, this\nsetting is inherited and so can be set on a parent container.\n\nWhen set to `true` by a component (or by an ancestor container), the `validators`\nof for any {@Ext.data.Model record} fields will be used wherever the `value` is\nbound to such data fields.\n\nWhile this config can be set arbitrarily high in the component hierarchy, doing\nso can create a lot overhead if most of your form fields do not actually rely on\n`validators` in your data model.\n\nUsing this setting for a form that is bound to an `{@link Ext.data.Model}` might look\nlike this:\n\n     {\n         xtype: 'panel',\n         modelValidation: true,\n         items: [{\n             xtype: 'textfield',\n             bind: '{theUser.firstName}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.lastName}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.phoneNumber}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.email}'\n         }]\n     }\n"
  },
  {
   "name": "multiSelect",
   "text": "Configure as `true` to allow selection of multiple items from the picker. This\nresults in each selected item being represented by a \"chip\" in the input area.\n\nWhen `true`, the field's {@link #cfg!value} will be an array containing the\n{@link #cfg!valueField} values of all selected records or `null` when there is\nno selection.\n"
  },
  {
   "name": "name",
   "text": "The field's name.  Used by form panels to gather data to be submitted.\n\nFor {@link Ext.field.Input} this name is set as the `{@link #cfg!name name}` attribute\nof the `inputElement`\n"
  },
  {
   "name": "nameable",
   "text": "Set to `true` for this component's `name` property to be tracked by its containing\n`nameHolder`.\n"
  },
  {
   "name": "options",
   "text": "An array of select options.\n\n    [\n        {text: 'First Option',  value: 'first'},\n        {text: 'Second Option', value: 'second'},\n        {text: 'Third Option',  value: 'third'}\n    ]\n\n__Note:__ Option object member names should correspond with defined\n{@link #cfg!valueField valueField} and {@link #cfg!displayField displayField} values.\n\nThis config is mutually exclusive with the {@link #cfg!store} config. Specifying\nthem both is unssupported and will produce undefined behaviour.\n"
  },
  {
   "name": "padding",
   "text": "The padding to use on this Component. Can be specified as a number (in which\ncase all edges get the same padding) or a CSS string like '5 10 10 10'\n"
  },
  {
   "name": "parseValidator"
  },
  {
   "name": "pattern",
   "text": "The value for the HTML5 `{@link #cfg!pattern pattern}` attribute. You can use this to change which\nkeyboard layout will be used.\n\n    Ext.define('Ux.field.Pattern', {\n        extend : 'Ext.field.Text',\n        xtype  : 'patternfield',\n\n        config : {\n component : {\n     pattern : '[0-9]*'\n }\n        }\n    });\n\nEven though it extends {@link Ext.field.Text}, it will display the number keyboard.\n"
  },
  {
   "name": "picker",
   "text": "\nA string representing the type of picker to use.  Can be one of the following values.\n\n- `'edge'` to use the {@link #cfg!edgePicker #edgePicker}, generally used on small formfactor devices.\n- `'floated'` to use the {@link #cfg!floatedPicker #floatedPicker}, generally used on tablets or desktops.\n- `'auto'` to allow the framework to select the appropriate picker for the device.\n\nCan also be a config object for the picker.\n"
  },
  {
   "name": "pickerSlotAlign",
   "text": "The alignment of text in the picker created by this Select\n"
  },
  {
   "name": "placeholder",
   "text": "A string value displayed in the input when the control is empty.\n"
  },
  {},
  {
   "name": "plugins",
   "text": "This config describes one or more plugin config objects used to create plugin\ninstances for this component.\n\nPlugins are a way to bundle and reuse custom functionality. Plugins should extend\n`{@link Ext.plugin.Abstract}` but technically the only requirement for a valid plugin\nis that it contain an `init` method that accepts a reference to its owner. Once\na plugin is created, the owner will call the `init` method, passing a reference\nto itself. Each plugin can then call methods or respond to events on its owner\nas needed to provide its functionality.\n\nThis config's value can take several different forms.\n\nThe value can be a single string with the plugin's {@link Ext.enums.Plugin alias}:\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: 'listpaging'\n     });\n\nIn the above examples, the string \"listpaging\" is the type alias for\n`{@link Ext.dataview.plugin.ListPaging}`. The full alias includes the \"plugin.\" prefix\n(i.e., 'plugin.listpaging').\n\nThe preferred form for multiple plugins or to configure plugins is the\nkeyed-object form (new in version 6.5):\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: {\n             pullrefresh: true,\n             listpaging: {\n                 autoPaging: true,\n                 weight: 10\n             }\n         }\n     });\n\nThe object keys are the `id`'s as well as the default type alias. This form\nallows the value of the `{@link #cfg!plugins plugins}` to be merged from base class to derived class\nand finally with the instance configuration. This allows classes to define a\nset of plugins that derived classes or instantiators can further configure or\ndisable. This merge behavior is a feature of the\n{@link Ext.Class#cfg!config}.\n\nThe `{@link #cfg!plugins plugins}` config can also be an array of plugin aliases (arrays are not\nmerged so this form does not respect plugins defined by the class author):\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: ['listpaging', 'pullrefresh']\n     });\n\nAn array can also contain elements that are config objects with a `type`\nproperty holding the type alias:\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: ['pullrefresh', {\n             type: 'listpaging',\n             autoPaging: true\n         }]\n     });\n"
  },
  {
   "name": "primaryFilter",
   "text": "A filter config object, or a Filter instance used to filter the store on input\nfield mutation by typing or pasting.\n\nThis may be a filter config object which specifies a filter which uses the\n{@link #cfg!store}'s fields.\n\n{@link Ext.util.Filter} may also be instantiated using a custom `filterFn`\nto allow a developer to specify complex matching. For example, a combobox developer\nmight allow a user to filter using either the {@link #cfg!valueField} or\n{@link #cfg!displayField} by using:\n\n    primaryFilter: function(candidateRecord) {\n        // This called in the scope of the Filter instance, we have this config\n        var value = this.getValue();\n\n        return Ext.String.startsWith(candidateRecord.get('stateName', value, true) ||\n               Ext.String.startsWith(candidateRecord.get('abbreviation', value, true);\n    }\n\nThis may also be configured as the name of a method on a ViewController which is to\nbe used as the filtering function. Note that this will *still* be called in the\nscope of the created Filter object because that has access to the `{@link #cfg!value value}`\nwhich is being tested for.\n"
  },
  {
   "name": "publishes",
   "text": "One or more names of config properties that this component should publish\nto its ViewModel. Generally speaking, only properties defined in a class config\nblock (including ancestor config blocks and mixins) are eligible for publishing\nto the viewModel. Some components override this and publish their most useful\nconfigs by default.\n\n**Note:** We'll discuss publishing properties **not** found in the config block below.\n\nValues determined to be invalid by component (often form fields and model validations)\nwill not be published to the ViewModel.\n\nThis config uses the `{@link #cfg!reference #cfg-reference}` to determine the name of the data\nobject to place in the `ViewModel`. If `{@link #cfg!reference reference}` is not set then this config\nis ignored.\n\nBy using this config and `{@link #cfg!reference #cfg-reference}` you can bind configs between\ncomponents. For example:\n\n     ...\n         items: [{\n             xtype: 'textfield',\n             reference: 'somefield',  // component's name in the ViewModel\n             publishes: 'value' // value is not published by default\n         },{\n             ...\n         },{\n             xtype: 'displayfield',\n             bind: 'You have entered \"{somefield.value}\"'\n         }]\n     ...\n\nClasses must provide this config as an Object:\n\n     Ext.define('App.foo.Bar', {\n         publishes: {\n             foo: true,\n             bar: true\n         }\n     });\n\nThis is required for the config system to properly merge values from derived\nclasses.\n\nFor instances this value can be specified as a value as show above or an array\nor object as follows:\n\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: [\n             'value',\n             'rawValue',\n             'dirty'\n         ]\n     }\n\n     // This achieves the same result as the above array form.\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: {\n             value: true,\n             rawValue: true,\n             dirty: true\n         }\n     }\n\nIn some cases, users may want to publish a property to the viewModel that is not found\nin a class  config block. In these situations, you may utilize {@link #method!publishState #publishState}\nif the property has a  setter method. Let's use\n{@link Ext.form.Labelable#setFieldLabel setFieldLabel} as an example:\n\n      setFieldLabel: function(fieldLabel) {\n          this.callParent(arguments);\n          this.publishState('fieldLabel', fieldLabel);\n      }\n\nWith the above chunk of code, fieldLabel may now be published to the viewModel.\n"
  },
  {
   "name": "queryCaching",
   "text": "When true, this prevents the combo from re-querying (either locally or remotely)\nwhen the current query is the same as the previous query.\n"
  },
  {
   "name": "queryDelay",
   "text": "The length of time in milliseconds to delay between the start of typing and sending\nthe query to filter the dropdown list.\n\nDefaults to `500` if `{@link #cfg!queryMode #queryMode} = 'remote'` or `10` if\n`{@link #cfg!queryMode #queryMode} = 'local'`\n"
  },
  {
   "name": "queryMode",
   "text": "The mode in which the ComboBox uses the configured Store. Acceptable values are:\n\n - **`'local'`** : In this mode, the ComboBox assumes the store is fully loaded and\n  will query it directly.\n\n - **`'remote'`** : In this mode the ComboBox loads its Store dynamically based upon\n  user interaction.\n\n  This is typically used for \"autocomplete\" type inputs, and after the user finishes\n  typing, the Store is {@link Ext.data.Store#method!load}ed.\n\n  A parameter containing the typed string is sent in the load request. The default\n  parameter name for the input string is `query`, but this can be configured using\n  the {@link #cfg!queryParam} config.\n\n  In `queryMode: 'remote'`, the Store may be configured with\n  `{@link Ext.data.Store#cfg!remoteFilter}: true`, and further filters\n  may be _programmatically_ added to the Store which are then passed with every\n  load request which allows the server to further refine the returned dataset.\n\n  Typically, in an autocomplete situation, {@link #cfg!hideTrigger} is configured\n  `true` because it has no meaning for autocomplete.\n"
  },
  {
   "name": "queryParam",
   "text": "Name of the parameter used by the Store to pass the typed string when the ComboBox\nis configured with\n`{@link #cfg!queryMode #queryMode}: 'remote'`. If explicitly set to a falsy value it will not be\nsent.\n"
  },
  {
   "name": "readOnly",
   "text": "`true` to set the field DOM element `readonly` attribute to `\"true\"`.\n\nMutation of {@link Ext.field.Text} through triggers is also disabled.\n\nTo simply prevent typing into the field while still allowing mutation through\ntriggers, set {@link Ext.field.Text#cfg!editable} to `false`.\n"
  },
  {
   "name": "record",
   "text": "A model instance which updates the Component's html based on it's tpl. Similar\nto the data configuration, but tied to to a record to make allow dynamic\nupdates.  This must be a model instance and not a configuration of one.\n"
  },
  {
   "name": "recordCreator"
  },
  {
   "name": "recordCreatorScope",
   "text": "The scope (`this` reference) in which the configured {@link #cfg!recordCreator}\nwill be executed, unless the recordCreator is a ViewController method name.\n"
  },
  {
   "name": "reference",
   "text": "Specifies a name for this component inside its component hierarchy. This name\nmust be unique within its {@link Ext.Container#cfg!referenceHolder view}\nor its {@link Ext.app.ViewController}. See the documentation in\n{@link Ext.Container Ext.container.Container} for more information about references.\n\n**Note**: Valid identifiers start with a letter or underscore and are followed\nby zero or more additional letters, underscores or digits. References are case\nsensitive.\n"
  },
  {
   "name": "relative",
   "text": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nConfigure this as `true` if you require descendant floated components to be positioned\nrelative to this component's coordinate space, not the viewport's coordinate space.\n\n*Note:* The coordinate space is this Component's encapsulating element's area. Not that\nof the inner element in which static child items are rendered by the layout.\n"
  },
  {
   "name": "renderTo",
   "text": "Optional element to render this Component to.\nNot required if this component is an {@link Ext.Container#cfg!items item} of a Container\nof a Container.\n"
  },
  {
   "name": "required",
   "text": "`true` to make this field required.\n"
  },
  {
   "name": "requiredMessage",
   "text": "The error message to display when {@link #cfg!required #required} is `true` and the field's\nvalue is \"empty\" (`null`, `undefined`, or empty string).\n"
  },
  {
   "name": "right",
   "text": "The absolute right position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n"
  },
  {
   "name": "ripple",
   "text": "Set to truthy, Color or Object value for the ripple.\n"
  },
  {
   "name": "scrollable",
   "text": "Configuration options to make this Component scrollable. Acceptable values are:\n\n- `true` to enable auto scrolling.\n- `false` (or `null`) to disable scrolling - this is the default.\n- `{@link #cfg!x x}` or `horizontal` to enable horizontal scrolling only\n- `{@link #cfg!y y}` or `vertical` to enable vertical scrolling only\n\nAlso accepts a configuration object for a `{@link Ext.scroll.Scroller}` if\nif advanced configuration is needed.\n\nThe getter for this config returns the {@link Ext.scroll.Scroller}\ninstance.  You can use the Scroller API to read or manipulate the scroll position:\n\n    // scrolls the component to 5 on the x axis and 10 on the y axis\n    component.getScrollable().scrollTo(5, 10);\n"
  },
  {
   "name": "selection",
   "text": "The selected model. `null` if no value exists.\n"
  },
  {
   "name": "selectOnTab",
   "text": "Whether the Tab key should select the currently highlighted item.\n"
  },
  {
   "name": "session",
   "text": "If provided this creates a new `Session` instance for this component. If this\nis a `Container`, this will then be inherited by all child components.\n\nTo create a new session you can specify `true`:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: true,\n\n         items: [{\n             ...\n         }]\n     });\n\nAlternatively, a config object can be provided:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: {\n             ...\n         },\n\n         items: [{\n             ...\n         }]\n     });\n"
  },
  {
   "name": "shadow",
   "text": "Configure as `true` for the component to have a drop shadow. 'false' will suppress any\ndefault shadow. By default the theme will determine the presence of a shadow.\n"
  },
  {
   "name": "shareableName",
   "text": "Set to `true` to allow this component's `name` to be shared by other items in the\nsame `nameHolder`. Such items will be returned in an array from `lookupName`.\n"
  },
  {
   "name": "shim",
   "text": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nConfigure as `true` for the component to use an `<iframe>` as an underlay to ensure\ncertain non-standard browser plugins are occluded by this component.\n"
  },
  {
   "name": "showAnimation",
   "text": "Animation effect to apply when the Component is being shown.  Typically you want to use\nan inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the\n{@link Ext.fx.Animation#cfg!type Ext.fx.Animation#type} config.\n"
  },
  {
   "name": "sideError"
  },
  {
   "name": "stateful",
   "text": "\nThis config specifies the config properties that will be persisted using the\n{@link Ext.state.Provider}. If this config is set to `true`, the\nconfigs specified by `{@link #cfg!statefulDefaults statefulDefaults}` will be assumed.\n\n     stateful: true\n\nOtherwise, this config can be an array of strings of the properties to save:\n\n     stateful: [\n         'width',\n         'height',\n         'collapsed'\n     ]\n\nThe above is equivalent to:\n\n     stateful: {\n         width: true,\n         height: true,\n         collapsed: true\n     }\n\n**Note:** To be truly stateful, an `id` or `{@link #cfg!stateId stateId}` must also be assigned.\n\nA stateful object will save its state when any of these config properties change\nvalue.\n"
  },
  {
   "name": "statefulDefaults",
   "text": "The default set of {@link #cfg!stateful} properties. The form of this config\nis the same as {@link #cfg!stateful} except this config cannot be a Boolean.\n\nThis config is intended for classes to specify so that instances can simply\nenable statefulness using `stateful: true`.\n"
  },
  {
   "name": "stateId",
   "text": "The unique id for this object to use for state management purposes.\n"
  },
  {
   "name": "store",
   "text": "The store to provide selection options data. Either a Store instance,\nconfiguration object or store ID.\n"
  },
  {
   "name": "stripCharsRe",
   "text": "A JavaScript RegExp object used to strip unwanted content from the value\nduring input. If `{@link #cfg!stripCharsRe stripCharsRe}` is specified,\nevery *character sequence* matching `{@link #cfg!stripCharsRe stripCharsRe}` will be removed.\n"
  },
  {
   "name": "style",
   "text": "Additional CSS styles that will be rendered into an inline style attribute when\nthe widget is rendered.\n\nYou can pass either a string syntax:\n\n    style: 'background:red'\n\nOr by using an object:\n\n    style: {\n        background: 'red'\n    }\n\nWhen using the object syntax, you can define CSS Properties by using a string:\n\n    style: {\n        'border-left': '1px solid red'\n    }\n\nAlthough the object syntax is much easier to read, we suggest you to use the\nstring syntax for better performance.\n"
  },
  {
   "name": "tabIndex",
   "text": "DOM tabIndex attribute for this component's\n{@link #property!focusEl #focusEl}.\n"
  },
  {
   "name": "textAlign",
   "text": "The text alignment of this field.\n"
  },
  {
   "name": "tipError"
  },
  {
   "name": "titleError"
  },
  {
   "name": "toFrontOnShow",
   "text": "True to automatically call {@link #method!toFront #toFront} when a {@link #cfg!floated #cfg-floated} Component is\nshown.\n"
  },
  {
   "name": "tooltip",
   "text": "The tooltip for this component - can be a string to be used as innerHTML\n(html tags are accepted) or {@link Ext.tip.ToolTip} config object.\n\nThe default behavior is to use a shared tip instance. The tooltip configuration is\nregistered with the {@link Ext.tip.Manager}. To enable this, your application can set\nthe {@link Ext.app.Application#cfg!quickTips Ext.app.Application#quickTips} config, or an instance of the\n{@link Ext.tip.Manager} may be created manually.\n\nTo force a unique tooltip instance to be created, specify `autoCreate: true` on this\nconfiguration.\n\nConfiguring this with `autoHide: false` implies `autoCreate: true` so that the desired\npersistent behavior can be obtained with other targets still showing the singleton\ninstance.\n"
  },
  {
   "name": "top",
   "text": "The absolute top position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n"
  },
  {
   "name": "touchAction",
   "text": "\nEmulates the behavior of the CSS\n[touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)\nproperty in a cross-browser compatible manner.\n\nKeys in this object are touch action names, and values are `false` to disable\na touch action or `true` to enable it.  Accepted keys are:\n\n- `panX`\n- `panY`\n- `pinchZoom`\n- `doubleTapZoom`\n\nAll touch actions are enabled (`true`) by default, so it is usually only necessary\nto specify which touch actions to disable.  For example, the following disables\nonly horizontal scrolling and pinch-to-zoom on the component's main element:\n\n    touchAction: {\n        panX: false,\n        pinchZoom: false\n    }\n\nTouch actions can be specified on reference elements using the reference element\nname, for example:\n\n    // disables horizontal scrolling on the main element, and double-tap-zoom\n    // on the child element named \"body\"\n    touchAction: {\n        panY: false\n        body: {\n            doubleTapZoom: false\n        }\n    }\n\nThe primary motivation for setting the touch-action of an element is to prevent\nthe browser's default handling of a gesture such as pinch-to-zoom, or\ndrag-to-scroll, so that the application can implement its own handling of that\ngesture on the element.  Suppose, for example, a component has a custom drag\nhandler on its element and wishes to prevent horizontal scrolling of its container\nwhile it is being dragged:\n\n    Ext.create('Ext.Widget', {\n        touchAction: {\n            panX: false\n        },\n        listeners: {\n            drag: function(e) {\n                // implement drag logic\n            }\n        }\n    });\n"
  },
  {
   "name": "tpl",
   "text": "A {@link String}, {@link Ext.Template}, {@link Ext.XTemplate} or an {@link Array} of\nstrings to form an {@link Ext.XTemplate}. Used in conjunction with the {@link #cfg!data #data}\nand {@link #cfg!tplWriteMode #tplWriteMode} configurations.\n\n__Note__\nThe {@link #cfg!data #data} configuration _must_ be set for any content to be shown in the\ncomponent when using this configuration.\n"
  },
  {
   "name": "tplWriteMode",
   "text": "The Ext.(X)Template method to use when updating the content area of the\nComponent.\n\nValid modes are:\n\n- append\n- insertAfter\n- insertBefore\n- insertFirst\n- overwrite\n"
  },
  {
   "name": "translatable"
  },
  {
   "name": "triggerAction",
   "text": "The action to execute when the trigger is clicked.\n\n - **`'all'`** :\n\n  {@link #method!doFilter run the query} specified by the `{@link #cfg!allQuery}` config option\n\n - **`'last'`** :\n\n  {@link #method!doFilter run the query} using the `{@link #lastQuery last query value}`.\n\n - **`'query'`** :\n\n  {@link #method!doFilter run the query} using the {@link Ext.form.field.Base#getRawValue\n  raw value}.\n\nSee also `{@link #cfg!queryParam #queryParam}`.\n"
  },
  {
   "name": "triggers",
   "text": "{@link Ext.field.trigger.Trigger} to use in this field.  The keys in\nthis object are unique identifiers for the triggers. The values in this object\nare {@link Ext.field.trigger.Trigger} configuration objects.\n\n    Ext.create('Ext.field.Text', {\n        label: 'My Custom Field',\n        triggers: {\n foo: {\n     cls: 'my-foo-trigger',\n     handler: function() {\n         console.log('foo trigger clicked');\n     }\n },\n bar: {\n     cls: 'my-bar-trigger',\n     handler: function() {\n         console.log('bar trigger clicked');\n     }\n }\n        }\n    });\n\nThe weight value may be a negative value in order to position custom triggers\nahead of default triggers like that of a DatePicker field.\n\n    Ext.create('Ext.form.DatePicker', {\n        label: 'Pick a Date',\n        triggers: {\n foo: {\n     cls: 'my-foo-trigger',\n     weight: -2, // negative to place before default triggers\n     handler: function() {\n         console.log('foo trigger clicked');\n     }\n },\n bar: {\n     cls: 'my-bar-trigger',\n     weight: -1,\n     handler: function() {\n         console.log('bar trigger clicked');\n     }\n }\n        }\n    });\n"
  },
  {
   "name": "twoWayBindable",
   "text": "This object holds a map of `config` properties that will update their binding\nas they are modified. For example, `{@link #cfg!value value}` is a key added by form fields. The\nform of this config is the same as `{@link #cfg!publishes}`.\n\nThis config is defined so that updaters are not created and added for all\nbound properties since most cannot be modified by the end-user and hence are\nnot appropriate for two-way binding.\n"
  },
  {
   "name": "typeAhead",
   "text": "`true` to populate and autoselect the remainder of the text being typed after\na configurable delay ({@link #cfg!typeAheadDelay #typeAheadDelay}) if it matches a known value.\n"
  },
  {
   "name": "typeAheadDelay",
   "text": "The length of time in milliseconds to wait until the typeahead text is displayed\nif {@link #cfg!typeAhead #typeAhead} is `true`.\n"
  },
  {
   "name": "ui",
   "text": "The ui or uis to be used on this Component\n\nWhen a ui is configured, CSS class names are added to the {@link #property!element #element}, created\nby appending the ui name(s) to each {@link #property!classCls #classCls} and/or {@link #property!baseCls #baseCls}.\n"
  },
  {
   "name": "underError"
  },
  {
   "name": "userCls",
   "text": "One or more CSS classes to add to the component's primary element. This config\nis intended solely for use by the component instantiator (the \"user\"), not by\nderived classes.\n\nFor example:\n\n     items: [{\n         xtype: 'button',\n         userCls: 'my-button'\n     ...\n     }]\n"
  },
  {
   "name": "userSelectable",
   "text": "\nSet to true to allow users to select text within this component.\n\nCan also be any valid value for the CSS3\n[user-select](https://developer.mozilla.org/en-US/docs/Web/CSS/user-select) property.\n\nA value of true implies `auto`, while false implies `none`.\n\nMay also be an object keyed by child element name.\n\nBy default, the user cannot click+drag+select text/elements of the UI.  Applications may\nwant to enable user selection for specific DOM elements, such as the bodyElement of\na component used as a tab panel.  The tab and tab text would not be user selectable in\nthis example, but the content area when the tab is selected would.\n\n     userSelectable: {\n         element: true,       // allow the element to be user selectable\n         bodyElement: true    // allow the component's body element to be user selectable\n     }\n"
  },
  {
   "name": "validateDisabled",
   "text": "`true` to validate the field, even if it is disabled.\n"
  },
  {
   "name": "validationMessage",
   "text": "For validation, regex, etc., this is the error message returned if field is invalid.\n"
  },
  {
   "name": "validators",
   "text": "A validator or array of validators to be applied to the field.\n\nWhen the field is validated, each validator is applied and if any one of them\ndetermines the field  is invalid, the field will be marked as invalid.  If you\nexamine the field's validators, you will get an array of Ext.data.Validators.\n\nValidation currently is synchronous.  If you need to validate a field with interaction\nwith a server, you would do this when the form is submitted.\n\nA validator may be:\n\n* A regexp - if the field fails to match the regexp, it is invalid.\n* A function - the function will be called to validate the field; it should return\nfalse if invalid.\n\n* An object - an object with a member fn that is a function to be called to validate\nthe field.\n\n* An instantiated Validator {@link Ext.data.validator.Validator}\n"
  },
  {
   "name": "value",
   "text": "The field's value\n"
  },
  {
   "name": "valueCollection",
   "text": "A {@link Ext.util.Collection} instance, or configuration object used\nto create the collection of selected records.\n\nThis is used by the {@link #cfg!picker} as the core of its selection handling,\nand also as the collection of selected values for this widget.\n"
  },
  {
   "name": "valueField",
   "text": "The underlying {@link Ext.data.field.Field#cfg!name data value name} to bind to this\nSelect control. If configured as `null`, the {@link #cfg!displayField} is\nused.\n"
  },
  {
   "name": "valueNotFoundText",
   "text": "The message to display if the value passed to `setValue` is not found in the store.\n"
  },
  {
   "name": "viewModel",
   "text": "The `ViewModel` is a data provider for this component and its children. The\ndata contained in the `ViewModel` is typically used by adding `{@link #cfg!bind bind}` configs\nto the components that want present or edit this data.\n\nWhen set, the `ViewModel` is created and links to any inherited `{@link #cfg!viewModel viewModel}`\ninstance from an ancestor container as the \"parent\". The `ViewModel` hierarchy,\nonce established, only supports creation or destruction of children. The\nparent of a `ViewModel` cannot be changed on the fly.\n\nIf this is a root-level `ViewModel`, the data model connection is made to this\ncomponent's associated `{@link Ext.data.Session}`. This is\ndetermined by calling `getInheritedSession`.\n"
  },
  {
   "name": "weight",
   "text": "This value controls this item's order in a {@link Ext.Container#cfg!weighted}\n{@link Ext.Container} (see {@link #cfg!parent}).\n\nLower values gravitate towards the start of the container - the top in vertical layouts,\nthe locale start side in horizontal layouts.\n"
  },
  {
   "name": "width",
   "text": "The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`,\n`30%`, etc. By default, if this is not explicitly set, this Component's element will\nsimply have its own natural size. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n"
  },
  {
   "name": "x",
   "text": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nThe x position at which to position this component. This is usually viewport-relative.\nBut if there is a `{@link #cfg!relative #relative}: true` ancestor, it will be relative to that.\n"
  },
  {
   "name": "xtype",
   "text": "The `{@link #cfg!xtype xtype}` configuration option can be used to optimize Component creation and rendering.\nIt serves as a shortcut to the full component name. For example, the component\n`Ext.button.Button` has an xtype of `button`.\n\nYou can define your own xtype on a custom {@link Ext.Component} like so:\n\n    Ext.define('PressMeButton', {\n        extend: 'Ext.button.Button',\n        xtype: 'pressmebutton',\n        text: 'Press Me'\n    });\n\nAny Component can be created implicitly as an object config with an xtype specified,\nallowing it to be declared and passed into the rendering pipeline without actually being\ninstantiated as an object. Not only is rendering deferred, but the actual creation of the\nobject itself is also deferred, saving memory and resources until they are actually needed.\nIn complex, nested layouts containing many Components, this can make a noticeable\nimprovement in performance.\n\n    // Explicit creation of contained Components:\n    var panel = new Ext.Panel({\n       // ...\n       items: [\n          Ext.create('Ext.button.Button', {\n             text: 'OK'\n          })\n       ]\n    });\n\n    // Implicit creation using xtype:\n    var panel = new Ext.Panel({\n       // ...\n       items: [{\n          xtype: 'button',\n          text: 'OK'\n       }]\n    });\n\nIn the first example, the button will always be created immediately during the panel's\ninitialization. With many added Components, this approach could potentially slow the\nrendering of the page. In the second example, the button will not be created or rendered\nuntil the panel is actually displayed in the browser. If the panel is never displayed\n(for example, if it is a tab that remains hidden) then the button will never be created and\nwill never consume any resources whatsoever.\n"
  },
  {
   "name": "y",
   "text": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nThe x position at which to position this component. This is usually viewport-relative.\nBut if there is a `{@link #cfg!relative #relative}: true` ancestor, it will be relative to that.\n"
  },
  {
   "name": "zIndex",
   "text": "The z-index to give this Component when it is rendered.\n\nNot valid for {@link #cfg!floated #cfg-floated} Components. The Z ordering of {@link #cfg!floated #cfg-floated}\nComponents is managed by ordering of the DOM elements.\n"
  }
 ],
 "docEvents": [
  {
   "name": "action",
   "parameters": [
    "sender",
    "e"
   ]
  },
  {
   "name": "added",
   "parameters": [
    "sender",
    "container",
    "index"
   ]
  },
  {
   "name": "beforebottomchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforecenteredchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforedisabledchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforedockedchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforeheightchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforehiddenchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforehide",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "beforeleftchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforemaxHeightchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforemaxWidthchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforeminHeightchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforeminWidthchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforeorientationchange",
   "parameters": []
  },
  {
   "name": "beforepickercreate",
   "parameters": [
    "sender",
    "newValue"
   ]
  },
  {
   "name": "beforequery",
   "parameters": [
    "queryPlan"
   ]
  },
  {
   "name": "beforerightchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforescrollablechange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforeshow",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "beforetofront",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "beforetopchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "beforewidthchange",
   "parameters": [
    "sender",
    "value",
    "oldValue",
    null
   ]
  },
  {
   "name": "blur",
   "parameters": [
    "sender",
    "e"
   ]
  },
  {
   "name": "bottomchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "centeredchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "change",
   "parameters": [
    "sender",
    "newValue",
    "oldValue"
   ]
  },
  {
   "name": "clearicontap",
   "parameters": [
    "sender",
    "input",
    "e"
   ]
  },
  {
   "name": "click",
   "parameters": [
    "e"
   ]
  },
  {
   "name": "collapse",
   "parameters": [
    "field"
   ]
  },
  {
   "name": "destroy",
   "parameters": []
  },
  {
   "name": "dirtychange",
   "parameters": [
    "sender",
    "dirty"
   ]
  },
  {
   "name": "disabledchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "dockedchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "erased",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "errorchange",
   "parameters": [
    "sender",
    "error"
   ]
  },
  {
   "name": "expand",
   "parameters": [
    "field"
   ]
  },
  {
   "name": "floatingchange",
   "parameters": [
    "sender",
    "positioned"
   ]
  },
  {
   "name": "focus",
   "parameters": [
    "sender",
    "e"
   ]
  },
  {
   "name": "focusenter",
   "parameters": [
    "sender",
    "event"
   ]
  },
  {
   "name": "focusleave",
   "parameters": [
    "sender",
    "event"
   ]
  },
  {
   "name": "fullscreen",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "heightchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "hiddenchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "hide",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "initialize",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "keydown",
   "parameters": [
    "sender",
    "e"
   ]
  },
  {
   "name": "keyup",
   "parameters": [
    "sender",
    "e"
   ]
  },
  {
   "name": "leftchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "maxHeightchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "maxWidthchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "minHeightchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "minWidthchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "mousedown",
   "parameters": [
    "sender",
    "e"
   ]
  },
  {
   "name": "moved",
   "parameters": [
    "sender",
    "container",
    "toIndex",
    "fromIndex"
   ]
  },
  {
   "name": "orientationchange",
   "parameters": []
  },
  {
   "name": "painted",
   "parameters": [
    "sender",
    "element"
   ]
  },
  {
   "name": "paste",
   "parameters": [
    "sender",
    "e"
   ]
  },
  {
   "name": "pickercreate",
   "parameters": [
    "sender",
    "picker"
   ]
  },
  {
   "name": "positionedchange",
   "parameters": [
    "sender",
    "positioned"
   ]
  },
  {
   "name": "removed",
   "parameters": [
    "sender",
    "container",
    "index"
   ]
  },
  {
   "name": "resize",
   "parameters": [
    "element",
    "info"
   ]
  },
  {
   "name": "rightchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "scrollablechange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "select",
   "parameters": [
    "sender",
    "newValue"
   ]
  },
  {
   "name": "show",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "tofront",
   "parameters": [
    "sender"
   ]
  },
  {
   "name": "topchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  },
  {
   "name": "updatedata",
   "parameters": [
    "sender",
    "newData"
   ]
  },
  {
   "name": "widthchange",
   "parameters": [
    "sender",
    "value",
    "oldValue"
   ]
  }
 ],
 "eventString": "\n<div class=\"name\" onclick=\"toggleIt('event','Action')\">onAction = ({sender, e})=> {);</div>\n<pre id=\"Action\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onAction = ({sender, e}) => {\n    console.log('Action')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onAction={this.onAction}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Added')\">onAdded = ({sender, container, index})=> {);</div>\n<pre id=\"Added\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onAdded = ({sender, container, index}) => {\n    console.log('Added')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onAdded={this.onAdded}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforebottomchange')\">onBeforebottomchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforebottomchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforebottomchange = ({sender, value, oldValue}) => {\n    console.log('Beforebottomchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforebottomchange={this.onBeforebottomchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforecenteredchange')\">onBeforecenteredchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforecenteredchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforecenteredchange = ({sender, value, oldValue}) => {\n    console.log('Beforecenteredchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforecenteredchange={this.onBeforecenteredchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforedisabledchange')\">onBeforedisabledchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforedisabledchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforedisabledchange = ({sender, value, oldValue}) => {\n    console.log('Beforedisabledchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforedisabledchange={this.onBeforedisabledchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforedockedchange')\">onBeforedockedchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforedockedchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforedockedchange = ({sender, value, oldValue}) => {\n    console.log('Beforedockedchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforedockedchange={this.onBeforedockedchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforeheightchange')\">onBeforeheightchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforeheightchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforeheightchange = ({sender, value, oldValue}) => {\n    console.log('Beforeheightchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforeheightchange={this.onBeforeheightchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforehiddenchange')\">onBeforehiddenchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforehiddenchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforehiddenchange = ({sender, value, oldValue}) => {\n    console.log('Beforehiddenchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforehiddenchange={this.onBeforehiddenchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforehide')\">onBeforehide = ({sender})=> {);</div>\n<pre id=\"Beforehide\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforehide = ({sender}) => {\n    console.log('Beforehide')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforehide={this.onBeforehide}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforeleftchange')\">onBeforeleftchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforeleftchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforeleftchange = ({sender, value, oldValue}) => {\n    console.log('Beforeleftchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforeleftchange={this.onBeforeleftchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforemaxheightchange')\">onBeforemaxheightchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforemaxheightchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforemaxheightchange = ({sender, value, oldValue}) => {\n    console.log('Beforemaxheightchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforemaxheightchange={this.onBeforemaxheightchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforemaxwidthchange')\">onBeforemaxwidthchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforemaxwidthchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforemaxwidthchange = ({sender, value, oldValue}) => {\n    console.log('Beforemaxwidthchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforemaxwidthchange={this.onBeforemaxwidthchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforeminheightchange')\">onBeforeminheightchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforeminheightchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforeminheightchange = ({sender, value, oldValue}) => {\n    console.log('Beforeminheightchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforeminheightchange={this.onBeforeminheightchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforeminwidthchange')\">onBeforeminwidthchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforeminwidthchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforeminwidthchange = ({sender, value, oldValue}) => {\n    console.log('Beforeminwidthchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforeminwidthchange={this.onBeforeminwidthchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforeorientationchange')\">onBeforeorientationchange = ({})=> {);</div>\n<pre id=\"Beforeorientationchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforeorientationchange = ({}) => {\n    console.log('Beforeorientationchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforeorientationchange={this.onBeforeorientationchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforepickercreate')\">onBeforepickercreate = ({sender, newValue})=> {);</div>\n<pre id=\"Beforepickercreate\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforepickercreate = ({sender, newValue}) => {\n    console.log('Beforepickercreate')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforepickercreate={this.onBeforepickercreate}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforequery')\">onBeforequery = ({queryPlan})=> {);</div>\n<pre id=\"Beforequery\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforequery = ({queryPlan}) => {\n    console.log('Beforequery')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforequery={this.onBeforequery}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforerightchange')\">onBeforerightchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforerightchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforerightchange = ({sender, value, oldValue}) => {\n    console.log('Beforerightchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforerightchange={this.onBeforerightchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforescrollablechange')\">onBeforescrollablechange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforescrollablechange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforescrollablechange = ({sender, value, oldValue}) => {\n    console.log('Beforescrollablechange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforescrollablechange={this.onBeforescrollablechange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforeshow')\">onBeforeshow = ({sender})=> {);</div>\n<pre id=\"Beforeshow\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforeshow = ({sender}) => {\n    console.log('Beforeshow')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforeshow={this.onBeforeshow}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforetofront')\">onBeforetofront = ({sender})=> {);</div>\n<pre id=\"Beforetofront\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforetofront = ({sender}) => {\n    console.log('Beforetofront')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforetofront={this.onBeforetofront}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforetopchange')\">onBeforetopchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforetopchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforetopchange = ({sender, value, oldValue}) => {\n    console.log('Beforetopchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforetopchange={this.onBeforetopchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Beforewidthchange')\">onBeforewidthchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Beforewidthchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBeforewidthchange = ({sender, value, oldValue}) => {\n    console.log('Beforewidthchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBeforewidthchange={this.onBeforewidthchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Blur')\">onBlur = ({sender, e})=> {);</div>\n<pre id=\"Blur\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBlur = ({sender, e}) => {\n    console.log('Blur')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBlur={this.onBlur}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Bottomchange')\">onBottomchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Bottomchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onBottomchange = ({sender, value, oldValue}) => {\n    console.log('Bottomchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onBottomchange={this.onBottomchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Centeredchange')\">onCenteredchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Centeredchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onCenteredchange = ({sender, value, oldValue}) => {\n    console.log('Centeredchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onCenteredchange={this.onCenteredchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Change')\">onChange = ({sender, newValue, oldValue})=> {);</div>\n<pre id=\"Change\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onChange = ({sender, newValue, oldValue}) => {\n    console.log('Change')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onChange={this.onChange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Clearicontap')\">onClearicontap = ({sender, input, e})=> {);</div>\n<pre id=\"Clearicontap\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onClearicontap = ({sender, input, e}) => {\n    console.log('Clearicontap')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onClearicontap={this.onClearicontap}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Click')\">onClick = ({e})=> {);</div>\n<pre id=\"Click\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onClick = ({e}) => {\n    console.log('Click')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onClick={this.onClick}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Collapse')\">onCollapse = ({field})=> {);</div>\n<pre id=\"Collapse\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onCollapse = ({field}) => {\n    console.log('Collapse')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onCollapse={this.onCollapse}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Destroy')\">onDestroy = ({})=> {);</div>\n<pre id=\"Destroy\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onDestroy = ({}) => {\n    console.log('Destroy')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onDestroy={this.onDestroy}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Dirtychange')\">onDirtychange = ({sender, dirty})=> {);</div>\n<pre id=\"Dirtychange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onDirtychange = ({sender, dirty}) => {\n    console.log('Dirtychange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onDirtychange={this.onDirtychange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Disabledchange')\">onDisabledchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Disabledchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onDisabledchange = ({sender, value, oldValue}) => {\n    console.log('Disabledchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onDisabledchange={this.onDisabledchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Dockedchange')\">onDockedchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Dockedchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onDockedchange = ({sender, value, oldValue}) => {\n    console.log('Dockedchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onDockedchange={this.onDockedchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Erased')\">onErased = ({sender})=> {);</div>\n<pre id=\"Erased\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onErased = ({sender}) => {\n    console.log('Erased')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onErased={this.onErased}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Errorchange')\">onErrorchange = ({sender, error})=> {);</div>\n<pre id=\"Errorchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onErrorchange = ({sender, error}) => {\n    console.log('Errorchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onErrorchange={this.onErrorchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Expand')\">onExpand = ({field})=> {);</div>\n<pre id=\"Expand\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onExpand = ({field}) => {\n    console.log('Expand')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onExpand={this.onExpand}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Floatingchange')\">onFloatingchange = ({sender, positioned})=> {);</div>\n<pre id=\"Floatingchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onFloatingchange = ({sender, positioned}) => {\n    console.log('Floatingchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onFloatingchange={this.onFloatingchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Focus')\">onFocus = ({sender, e})=> {);</div>\n<pre id=\"Focus\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onFocus = ({sender, e}) => {\n    console.log('Focus')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onFocus={this.onFocus}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Focusenter')\">onFocusenter = ({sender, event})=> {);</div>\n<pre id=\"Focusenter\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onFocusenter = ({sender, event}) => {\n    console.log('Focusenter')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onFocusenter={this.onFocusenter}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Focusleave')\">onFocusleave = ({sender, event})=> {);</div>\n<pre id=\"Focusleave\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onFocusleave = ({sender, event}) => {\n    console.log('Focusleave')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onFocusleave={this.onFocusleave}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Fullscreen')\">onFullscreen = ({sender})=> {);</div>\n<pre id=\"Fullscreen\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onFullscreen = ({sender}) => {\n    console.log('Fullscreen')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onFullscreen={this.onFullscreen}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Heightchange')\">onHeightchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Heightchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onHeightchange = ({sender, value, oldValue}) => {\n    console.log('Heightchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onHeightchange={this.onHeightchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Hiddenchange')\">onHiddenchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Hiddenchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onHiddenchange = ({sender, value, oldValue}) => {\n    console.log('Hiddenchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onHiddenchange={this.onHiddenchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Hide')\">onHide = ({sender})=> {);</div>\n<pre id=\"Hide\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onHide = ({sender}) => {\n    console.log('Hide')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onHide={this.onHide}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Initialize')\">onInitialize = ({sender})=> {);</div>\n<pre id=\"Initialize\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onInitialize = ({sender}) => {\n    console.log('Initialize')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onInitialize={this.onInitialize}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Keydown')\">onKeydown = ({sender, e})=> {);</div>\n<pre id=\"Keydown\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onKeydown = ({sender, e}) => {\n    console.log('Keydown')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onKeydown={this.onKeydown}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Keyup')\">onKeyup = ({sender, e})=> {);</div>\n<pre id=\"Keyup\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onKeyup = ({sender, e}) => {\n    console.log('Keyup')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onKeyup={this.onKeyup}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Leftchange')\">onLeftchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Leftchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onLeftchange = ({sender, value, oldValue}) => {\n    console.log('Leftchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onLeftchange={this.onLeftchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Maxheightchange')\">onMaxheightchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Maxheightchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onMaxheightchange = ({sender, value, oldValue}) => {\n    console.log('Maxheightchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onMaxheightchange={this.onMaxheightchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Maxwidthchange')\">onMaxwidthchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Maxwidthchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onMaxwidthchange = ({sender, value, oldValue}) => {\n    console.log('Maxwidthchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onMaxwidthchange={this.onMaxwidthchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Minheightchange')\">onMinheightchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Minheightchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onMinheightchange = ({sender, value, oldValue}) => {\n    console.log('Minheightchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onMinheightchange={this.onMinheightchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Minwidthchange')\">onMinwidthchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Minwidthchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onMinwidthchange = ({sender, value, oldValue}) => {\n    console.log('Minwidthchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onMinwidthchange={this.onMinwidthchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Mousedown')\">onMousedown = ({sender, e})=> {);</div>\n<pre id=\"Mousedown\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onMousedown = ({sender, e}) => {\n    console.log('Mousedown')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onMousedown={this.onMousedown}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Moved')\">onMoved = ({sender, container, toIndex, fromIndex})=> {);</div>\n<pre id=\"Moved\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onMoved = ({sender, container, toIndex, fromIndex}) => {\n    console.log('Moved')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onMoved={this.onMoved}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Orientationchange')\">onOrientationchange = ({})=> {);</div>\n<pre id=\"Orientationchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onOrientationchange = ({}) => {\n    console.log('Orientationchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onOrientationchange={this.onOrientationchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Painted')\">onPainted = ({sender, element})=> {);</div>\n<pre id=\"Painted\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onPainted = ({sender, element}) => {\n    console.log('Painted')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onPainted={this.onPainted}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Paste')\">onPaste = ({sender, e})=> {);</div>\n<pre id=\"Paste\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onPaste = ({sender, e}) => {\n    console.log('Paste')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onPaste={this.onPaste}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Pickercreate')\">onPickercreate = ({sender, picker})=> {);</div>\n<pre id=\"Pickercreate\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onPickercreate = ({sender, picker}) => {\n    console.log('Pickercreate')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onPickercreate={this.onPickercreate}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Positionedchange')\">onPositionedchange = ({sender, positioned})=> {);</div>\n<pre id=\"Positionedchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onPositionedchange = ({sender, positioned}) => {\n    console.log('Positionedchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onPositionedchange={this.onPositionedchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Removed')\">onRemoved = ({sender, container, index})=> {);</div>\n<pre id=\"Removed\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onRemoved = ({sender, container, index}) => {\n    console.log('Removed')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onRemoved={this.onRemoved}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Resize')\">onResize = ({element, info})=> {);</div>\n<pre id=\"Resize\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onResize = ({element, info}) => {\n    console.log('Resize')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onResize={this.onResize}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Rightchange')\">onRightchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Rightchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onRightchange = ({sender, value, oldValue}) => {\n    console.log('Rightchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onRightchange={this.onRightchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Scrollablechange')\">onScrollablechange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Scrollablechange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onScrollablechange = ({sender, value, oldValue}) => {\n    console.log('Scrollablechange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onScrollablechange={this.onScrollablechange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Select')\">onSelect = ({sender, newValue})=> {);</div>\n<pre id=\"Select\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onSelect = ({sender, newValue}) => {\n    console.log('Select')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onSelect={this.onSelect}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Show')\">onShow = ({sender})=> {);</div>\n<pre id=\"Show\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onShow = ({sender}) => {\n    console.log('Show')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onShow={this.onShow}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Tofront')\">onTofront = ({sender})=> {);</div>\n<pre id=\"Tofront\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onTofront = ({sender}) => {\n    console.log('Tofront')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onTofront={this.onTofront}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Topchange')\">onTopchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Topchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onTopchange = ({sender, value, oldValue}) => {\n    console.log('Topchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onTopchange={this.onTopchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Updatedata')\">onUpdatedata = ({sender, newData})=> {);</div>\n<pre id=\"Updatedata\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onUpdatedata = ({sender, newData}) => {\n    console.log('Updatedata')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onUpdatedata={this.onUpdatedata}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n\n<div class=\"name\" onclick=\"toggleIt('event','Widthchange')\">onWidthchange = ({sender, value, oldValue})=> {);</div>\n<pre id=\"Widthchange\" class=\"code\" style=\"display:none;\">\nimport React, { Component } from 'react';\nimport { ExtCombobox } from \"@sencha/ext-react-modern\";\n\nexport default class App extends Component {\n  onWidthchange = ({sender, value, oldValue}) => {\n    console.log('Widthchange')\n  };\n\n  render() {\n    return (\n      &lt;ExtCombobox onWidthchange={this.onWidthchange}&gt;&lt;/ExtCombobox&gt;\n    )\n  }\n}\n</pre>\n",
 "propertyString": "\n  <div class=\"name\" onclick=\"toggleIt('cfg','alignSelf')\">alignSelf</div>\n  <pre id=\"alignSelf\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox alignSelf=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','alignTarget')\">alignTarget</div>\n  <pre id=\"alignTarget\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox alignTarget=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','allQuery')\">allQuery</div>\n  <pre id=\"allQuery\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox allQuery=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','alwaysOnTop')\">alwaysOnTop</div>\n  <pre id=\"alwaysOnTop\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox alwaysOnTop=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','animateUnderline')\">animateUnderline</div>\n  <pre id=\"animateUnderline\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox animateUnderline=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','anyMatch')\">anyMatch</div>\n  <pre id=\"anyMatch\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox anyMatch=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','ariaAttributes')\">ariaAttributes</div>\n  <pre id=\"ariaAttributes\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox ariaAttributes=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','ariaDescribedBy')\">ariaDescribedBy</div>\n  <pre id=\"ariaDescribedBy\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox ariaDescribedBy=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','ariaLabel')\">ariaLabel</div>\n  <pre id=\"ariaLabel\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox ariaLabel=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','ariaLabelledBy')\">ariaLabelledBy</div>\n  <pre id=\"ariaLabelledBy\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox ariaLabelledBy=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','autoCapitalize')\">autoCapitalize</div>\n  <pre id=\"autoCapitalize\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox autoCapitalize=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','autoComplete')\">autoComplete</div>\n  <pre id=\"autoComplete\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox autoComplete=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','autoCorrect')\">autoCorrect</div>\n  <pre id=\"autoCorrect\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox autoCorrect=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','autoFitErrors')\">autoFitErrors</div>\n  <pre id=\"autoFitErrors\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox autoFitErrors=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','autoFocus')\">autoFocus</div>\n  <pre id=\"autoFocus\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox autoFocus=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','autoFocusLast')\">autoFocusLast</div>\n  <pre id=\"autoFocusLast\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox autoFocusLast=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','autoHideInputMask')\">autoHideInputMask</div>\n  <pre id=\"autoHideInputMask\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox autoHideInputMask=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','autoLoadOnValue')\">autoLoadOnValue</div>\n  <pre id=\"autoLoadOnValue\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox autoLoadOnValue=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','autoSelect')\">autoSelect</div>\n  <pre id=\"autoSelect\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox autoSelect=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','axisLock')\">axisLock</div>\n  <pre id=\"axisLock\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox axisLock=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','badFormatMessage')\">badFormatMessage</div>\n  <pre id=\"badFormatMessage\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox badFormatMessage=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','bind')\">bind</div>\n  <pre id=\"bind\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox bind=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','bodyAlign')\">bodyAlign</div>\n  <pre id=\"bodyAlign\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox bodyAlign=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','border')\">border</div>\n  <pre id=\"border\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox border=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','bottom')\">bottom</div>\n  <pre id=\"bottom\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox bottom=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','bubbleDirty')\">bubbleDirty</div>\n  <pre id=\"bubbleDirty\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox bubbleDirty=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','caseSensitive')\">caseSensitive</div>\n  <pre id=\"caseSensitive\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox caseSensitive=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','centered')\">centered</div>\n  <pre id=\"centered\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox centered=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','chipView')\">chipView</div>\n  <pre id=\"chipView\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox chipView=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','clearable')\">clearable</div>\n  <pre id=\"clearable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox clearable=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','cls')\">cls</div>\n  <pre id=\"cls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox cls=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','collapseOnSelect')\">collapseOnSelect</div>\n  <pre id=\"collapseOnSelect\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox collapseOnSelect=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','constrainAlign')\">constrainAlign</div>\n  <pre id=\"constrainAlign\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox constrainAlign=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','contentEl')\">contentEl</div>\n  <pre id=\"contentEl\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox contentEl=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','controller')\">controller</div>\n  <pre id=\"controller\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox controller=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','data')\">data</div>\n  <pre id=\"data\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox data=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','dataType')\">dataType</div>\n  <pre id=\"dataType\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox dataType=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','defaultListenerScope')\">defaultListenerScope</div>\n  <pre id=\"defaultListenerScope\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox defaultListenerScope=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','delimiter')\">delimiter</div>\n  <pre id=\"delimiter\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox delimiter=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','dirty')\">dirty</div>\n  <pre id=\"dirty\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox dirty=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','disabled')\">disabled</div>\n  <pre id=\"disabled\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox disabled=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','displayed')\">displayed</div>\n  <pre id=\"displayed\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox displayed=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','displayField')\">displayField</div>\n  <pre id=\"displayField\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox displayField=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','displayTpl')\">displayTpl</div>\n  <pre id=\"displayTpl\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox displayTpl=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','docked')\">docked</div>\n  <pre id=\"docked\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox docked=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','draggable')\">draggable</div>\n  <pre id=\"draggable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox draggable=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','edgePicker')\">edgePicker</div>\n  <pre id=\"edgePicker\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox edgePicker=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','editable')\">editable</div>\n  <pre id=\"editable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox editable=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','enableRegEx')\">enableRegEx</div>\n  <pre id=\"enableRegEx\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox enableRegEx=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','undefined')\">undefined</div>\n  <pre id=\"undefined\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox undefined=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','error')\">error</div>\n  <pre id=\"error\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox error=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','errorMessage')\">errorMessage</div>\n  <pre id=\"errorMessage\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox errorMessage=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','errorTarget')\">errorTarget</div>\n  <pre id=\"errorTarget\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox errorTarget=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','errorTip')\">errorTip</div>\n  <pre id=\"errorTip\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox errorTip=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','errorTpl')\">errorTpl</div>\n  <pre id=\"errorTpl\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox errorTpl=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','undefined')\">undefined</div>\n  <pre id=\"undefined\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox undefined=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','undefined')\">undefined</div>\n  <pre id=\"undefined\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox undefined=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','flex')\">flex</div>\n  <pre id=\"flex\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox flex=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','floated')\">floated</div>\n  <pre id=\"floated\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox floated=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','floatedPicker')\">floatedPicker</div>\n  <pre id=\"floatedPicker\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox floatedPicker=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','floatedPickerAlign')\">floatedPickerAlign</div>\n  <pre id=\"floatedPickerAlign\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox floatedPickerAlign=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','focusCls')\">focusCls</div>\n  <pre id=\"focusCls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox focusCls=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','focusTrap')\">focusTrap</div>\n  <pre id=\"focusTrap\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox focusTrap=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','forceSelection')\">forceSelection</div>\n  <pre id=\"forceSelection\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox forceSelection=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','fullscreen')\">fullscreen</div>\n  <pre id=\"fullscreen\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox fullscreen=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','height')\">height</div>\n  <pre id=\"height\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox height=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','hidden')\">hidden</div>\n  <pre id=\"hidden\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox hidden=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','hiddenName')\">hiddenName</div>\n  <pre id=\"hiddenName\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox hiddenName=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','hideAnimation')\">hideAnimation</div>\n  <pre id=\"hideAnimation\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox hideAnimation=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','hideMode')\">hideMode</div>\n  <pre id=\"hideMode\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox hideMode=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','hideOnMaskTap')\">hideOnMaskTap</div>\n  <pre id=\"hideOnMaskTap\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox hideOnMaskTap=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','hideTrigger')\">hideTrigger</div>\n  <pre id=\"hideTrigger\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox hideTrigger=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','html')\">html</div>\n  <pre id=\"html\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox html=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','id')\">id</div>\n  <pre id=\"id\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox id=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','inline')\">inline</div>\n  <pre id=\"inline\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox inline=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','undefined')\">undefined</div>\n  <pre id=\"undefined\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox undefined=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','inputMask')\">inputMask</div>\n  <pre id=\"inputMask\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox inputMask=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','inputType')\">inputType</div>\n  <pre id=\"inputType\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox inputType=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','inputValue')\">inputValue</div>\n  <pre id=\"inputValue\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox inputValue=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','instanceCls')\">instanceCls</div>\n  <pre id=\"instanceCls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox instanceCls=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','itemCls')\">itemCls</div>\n  <pre id=\"itemCls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox itemCls=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','itemId')\">itemId</div>\n  <pre id=\"itemId\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox itemId=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','itemTpl')\">itemTpl</div>\n  <pre id=\"itemTpl\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox itemTpl=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','keyMap')\">keyMap</div>\n  <pre id=\"keyMap\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox keyMap=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','keyMapEnabled')\">keyMapEnabled</div>\n  <pre id=\"keyMapEnabled\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox keyMapEnabled=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','keyMapTarget')\">keyMapTarget</div>\n  <pre id=\"keyMapTarget\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox keyMapTarget=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','label')\">label</div>\n  <pre id=\"label\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox label=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','labelAlign')\">labelAlign</div>\n  <pre id=\"labelAlign\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox labelAlign=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','labelCls')\">labelCls</div>\n  <pre id=\"labelCls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox labelCls=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','labelInPlaceholder')\">labelInPlaceholder</div>\n  <pre id=\"labelInPlaceholder\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox labelInPlaceholder=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','labelMinWidth')\">labelMinWidth</div>\n  <pre id=\"labelMinWidth\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox labelMinWidth=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','labelTextAlign')\">labelTextAlign</div>\n  <pre id=\"labelTextAlign\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox labelTextAlign=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','labelWidth')\">labelWidth</div>\n  <pre id=\"labelWidth\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox labelWidth=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','labelWrap')\">labelWrap</div>\n  <pre id=\"labelWrap\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox labelWrap=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','left')\">left</div>\n  <pre id=\"left\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox left=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','listeners')\">listeners</div>\n  <pre id=\"listeners\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox listeners=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','margin')\">margin</div>\n  <pre id=\"margin\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox margin=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','matchFieldWidth')\">matchFieldWidth</div>\n  <pre id=\"matchFieldWidth\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox matchFieldWidth=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','maxHeight')\">maxHeight</div>\n  <pre id=\"maxHeight\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox maxHeight=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','maxLength')\">maxLength</div>\n  <pre id=\"maxLength\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox maxLength=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','maxWidth')\">maxWidth</div>\n  <pre id=\"maxWidth\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox maxWidth=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','minChars')\">minChars</div>\n  <pre id=\"minChars\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox minChars=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','minHeight')\">minHeight</div>\n  <pre id=\"minHeight\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox minHeight=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','minWidth')\">minWidth</div>\n  <pre id=\"minWidth\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox minWidth=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','modal')\">modal</div>\n  <pre id=\"modal\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox modal=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','modelValidation')\">modelValidation</div>\n  <pre id=\"modelValidation\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox modelValidation=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','multiSelect')\">multiSelect</div>\n  <pre id=\"multiSelect\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox multiSelect=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','name')\">name</div>\n  <pre id=\"name\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox name=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','nameable')\">nameable</div>\n  <pre id=\"nameable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox nameable=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','options')\">options</div>\n  <pre id=\"options\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox options=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','padding')\">padding</div>\n  <pre id=\"padding\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox padding=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','parseValidator')\">parseValidator</div>\n  <pre id=\"parseValidator\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox parseValidator=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','pattern')\">pattern</div>\n  <pre id=\"pattern\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox pattern=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','picker')\">picker</div>\n  <pre id=\"picker\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox picker=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','pickerSlotAlign')\">pickerSlotAlign</div>\n  <pre id=\"pickerSlotAlign\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox pickerSlotAlign=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','placeholder')\">placeholder</div>\n  <pre id=\"placeholder\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox placeholder=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','undefined')\">undefined</div>\n  <pre id=\"undefined\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox undefined=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','plugins')\">plugins</div>\n  <pre id=\"plugins\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox plugins=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','primaryFilter')\">primaryFilter</div>\n  <pre id=\"primaryFilter\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox primaryFilter=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','publishes')\">publishes</div>\n  <pre id=\"publishes\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox publishes=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','queryCaching')\">queryCaching</div>\n  <pre id=\"queryCaching\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox queryCaching=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','queryDelay')\">queryDelay</div>\n  <pre id=\"queryDelay\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox queryDelay=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','queryMode')\">queryMode</div>\n  <pre id=\"queryMode\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox queryMode=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','queryParam')\">queryParam</div>\n  <pre id=\"queryParam\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox queryParam=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','readOnly')\">readOnly</div>\n  <pre id=\"readOnly\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox readOnly=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','record')\">record</div>\n  <pre id=\"record\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox record=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','recordCreator')\">recordCreator</div>\n  <pre id=\"recordCreator\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox recordCreator=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','recordCreatorScope')\">recordCreatorScope</div>\n  <pre id=\"recordCreatorScope\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox recordCreatorScope=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','reference')\">reference</div>\n  <pre id=\"reference\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox reference=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','relative')\">relative</div>\n  <pre id=\"relative\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox relative=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','renderTo')\">renderTo</div>\n  <pre id=\"renderTo\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox renderTo=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','required')\">required</div>\n  <pre id=\"required\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox required=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','requiredMessage')\">requiredMessage</div>\n  <pre id=\"requiredMessage\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox requiredMessage=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','right')\">right</div>\n  <pre id=\"right\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox right=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','ripple')\">ripple</div>\n  <pre id=\"ripple\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox ripple=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','scrollable')\">scrollable</div>\n  <pre id=\"scrollable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox scrollable=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','selection')\">selection</div>\n  <pre id=\"selection\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox selection=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','selectOnTab')\">selectOnTab</div>\n  <pre id=\"selectOnTab\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox selectOnTab=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','session')\">session</div>\n  <pre id=\"session\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox session=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','shadow')\">shadow</div>\n  <pre id=\"shadow\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox shadow=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','shareableName')\">shareableName</div>\n  <pre id=\"shareableName\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox shareableName=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','shim')\">shim</div>\n  <pre id=\"shim\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox shim=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','showAnimation')\">showAnimation</div>\n  <pre id=\"showAnimation\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox showAnimation=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','sideError')\">sideError</div>\n  <pre id=\"sideError\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox sideError=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','stateful')\">stateful</div>\n  <pre id=\"stateful\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox stateful=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','statefulDefaults')\">statefulDefaults</div>\n  <pre id=\"statefulDefaults\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox statefulDefaults=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','stateId')\">stateId</div>\n  <pre id=\"stateId\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox stateId=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','store')\">store</div>\n  <pre id=\"store\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox store=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','stripCharsRe')\">stripCharsRe</div>\n  <pre id=\"stripCharsRe\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox stripCharsRe=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','style')\">style</div>\n  <pre id=\"style\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox style=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','tabIndex')\">tabIndex</div>\n  <pre id=\"tabIndex\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox tabIndex=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','textAlign')\">textAlign</div>\n  <pre id=\"textAlign\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox textAlign=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','tipError')\">tipError</div>\n  <pre id=\"tipError\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox tipError=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','titleError')\">titleError</div>\n  <pre id=\"titleError\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox titleError=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','toFrontOnShow')\">toFrontOnShow</div>\n  <pre id=\"toFrontOnShow\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox toFrontOnShow=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','tooltip')\">tooltip</div>\n  <pre id=\"tooltip\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox tooltip=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','top')\">top</div>\n  <pre id=\"top\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox top=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','touchAction')\">touchAction</div>\n  <pre id=\"touchAction\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox touchAction=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','tpl')\">tpl</div>\n  <pre id=\"tpl\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox tpl=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','tplWriteMode')\">tplWriteMode</div>\n  <pre id=\"tplWriteMode\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox tplWriteMode=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','translatable')\">translatable</div>\n  <pre id=\"translatable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox translatable=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','triggerAction')\">triggerAction</div>\n  <pre id=\"triggerAction\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox triggerAction=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','triggers')\">triggers</div>\n  <pre id=\"triggers\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox triggers=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','twoWayBindable')\">twoWayBindable</div>\n  <pre id=\"twoWayBindable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox twoWayBindable=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','typeAhead')\">typeAhead</div>\n  <pre id=\"typeAhead\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox typeAhead=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','typeAheadDelay')\">typeAheadDelay</div>\n  <pre id=\"typeAheadDelay\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox typeAheadDelay=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','ui')\">ui</div>\n  <pre id=\"ui\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox ui=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','underError')\">underError</div>\n  <pre id=\"underError\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox underError=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','userCls')\">userCls</div>\n  <pre id=\"userCls\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox userCls=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','userSelectable')\">userSelectable</div>\n  <pre id=\"userSelectable\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox userSelectable=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','validateDisabled')\">validateDisabled</div>\n  <pre id=\"validateDisabled\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox validateDisabled=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','validationMessage')\">validationMessage</div>\n  <pre id=\"validationMessage\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox validationMessage=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','validators')\">validators</div>\n  <pre id=\"validators\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox validators=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','value')\">value</div>\n  <pre id=\"value\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox value=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','valueCollection')\">valueCollection</div>\n  <pre id=\"valueCollection\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox valueCollection=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','valueField')\">valueField</div>\n  <pre id=\"valueField\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox valueField=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','valueNotFoundText')\">valueNotFoundText</div>\n  <pre id=\"valueNotFoundText\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox valueNotFoundText=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','viewModel')\">viewModel</div>\n  <pre id=\"viewModel\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox viewModel=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','weight')\">weight</div>\n  <pre id=\"weight\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox weight=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','width')\">width</div>\n  <pre id=\"width\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox width=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','x')\">x</div>\n  <pre id=\"x\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox x=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','xtype')\">xtype</div>\n  <pre id=\"xtype\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox xtype=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','y')\">y</div>\n  <pre id=\"y\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox y=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  \n  <div class=\"name\" onclick=\"toggleIt('cfg','zIndex')\">zIndex</div>\n  <pre id=\"zIndex\" class=\"code\" style=\"display:none;\">\n  import React, { Component } from 'react';\n  import { ExtCombobox } from \"@sencha/ext-react-modern\";\n\n    render() {\n      return (\n        &lt;ExtCombobox zIndex=''&gt;&lt;/ExtCombobox&gt;\n      )\n    }\n  }\n  </pre>\n  ",
 "first": " A combobox control with support for autocomplete, remote loading, and many other features.",
 "text": " A ComboBox is like a combination of a traditional HTML text `<input>` field and a `<select>`\n field; if the <a href=\"javascript:sendToContext('cfg',' #cfg!');\"> #cfg!</a> config is `true`, then the user is able to type freely\n into the field, and/or pick values from a dropdown selection list.\n\n The user can input any value by default, even if it does not appear in the selection list;\n to prevent free-form values and restrict them to items in the list, set\n <a href=\"javascript:sendToContext('cfg','forceSelection');\">forceSelection</a> to `true`.\n\n The selection list's options are populated from any {@link Ext.data.Store}, including remote\n stores. The data items in the store are mapped to each option's displayed text and backing\n value via the <a href=\"javascript:sendToContext('cfg','valueField');\">valueField</a> and <a href=\"javascript:sendToContext('cfg','displayField');\">displayField</a> configurations which are applied\n to the list via the <a href=\"javascript:sendToContext('cfg',' #cfg!');\"> #cfg!</a>.\n\n If your store is not remote, i.e. it depends only on local data and is loaded up front, you MUST\n set the <a href=\"javascript:sendToContext('cfg','queryMode');\">queryMode</a> to `'local'`.\n\n # Example usage:\n\n <div style=\"background:lightgray\">```javascript\n @example({ framework: 'extjs' })\n      Ext.create({\n          fullscreen: true,\n          xtype: 'container',\n          padding: 50,\n          layout: 'vbox',\n          items: [{\n              xtype: 'combobox',\n              label: 'Choose State',\n              queryMode: 'local',\n              displayField: 'name',\n              valueField: 'abbr',\n\n              store: [\n                  { abbr: 'AL', name: 'Alabama' },\n                  { abbr: 'AK', name: 'Alaska' },\n                  { abbr: 'AZ', name: 'Arizona' }\n              ]\n          }]\n      });\n ```</div>\n\n # Events\n\n ComboBox fires a select event if an item is chosen from the associated list.  If\n the ComboBox is configured with <a href=\"javascript:sendToContext('cfg','forceSelection');\">forceSelection</a>: true, an action event is fired\n when the user has typed the ENTER key while editing the field, and a change event on\n each keystroke.\n\n <div><span style=\"background:yellow;padding: 10px 10px 10px 0;font-size:24px;\">Customized combobox\n</span></div>\n Both the text shown in dropdown list and text field can be easily customized:\n<div style=\"background:lightgray\">```javascript\n     @example({ framework: 'extjs' })\n      Ext.create({\n          fullscreen: true,\n          xtype: 'container',\n          padding: 50,\n          layout: 'vbox',\n          items: [{\n              xtype: 'combobox',\n              label: 'Choose State',\n              queryMode: 'local',\n              displayField: 'name',\n              valueField: 'abbr',\n\n              // For the dropdown list\n              itemTpl: '<span role=\"option\" class=\"x-boundlist-item\">{abbr} - {name}</span>',\n\n              // For the content of the text field\n              displayTpl: '{abbr} - {name}',\n\n              editable: false,  // disable typing in the text field\n\n              store: [\n                  { abbr: 'AL', name: 'Alabama' },\n                  { abbr: 'AK', name: 'Alaska' },\n                  { abbr: 'AZ', name: 'Arizona' }\n              ]\n          }]\n      });\n\n See also the <a href=\"javascript:sendToContext('cfg',' #cfg!');\"> #cfg!</a> and <a href=\"javascript:sendToContext('cfg',' #cfg!');\"> #cfg!</a> options for additional\n configuration of the options list.\n\n ```</div>\n <div style=\"background:lightgray\">```javascript\n @example({framework: 'ext-angular', packages:['ext-angular']})\n import { Component } from '@angular/core'\n declare var Ext: any;\n\n @Component({\n     selector: 'app-root-1',\n     styles: [``],\n     template: `\n         <ExtContainer [layout]='\"center\"'>\n             <ExtFormPanel [shadow]>\n                 <ExtComboBox\n                     [width]=\"200\"\n                     [label]='\"State\"'\n                     [options]='data'\n                     [displayField]='\"name\"'\n                     [valueField]='\"code\"'\n                     [queryMode]='\"local\"'\n                     [labelAlign]='\"placeholder\"'\n                     [typeAhead]\n                 ></ExtComboBox>\n             </ExtFormPanel>\n         </ExtContainer>\n })\n export class AppComponent {\n     data = [\n         {\"name\":\"Alabama\",\"abbrev\":\"AL\"},\n         {\"name\":\"Alaska\",\"abbrev\":\"AK\"},\n         {\"name\":\"Arizona\",\"abbrev\":\"AZ\"}\n     ];\n  }\n ```</div>\n html example here...\n <div style=\"background:lightgray\">```javascript\n @example({framework: 'ext-web-components', packages:['ext-web-components'], tab: 2 })\n import '@sencha/ext-web-components/dist/ext-formpanel.component';\n import '@sencha/ext-web-components/dist/ext-combobox.component';\n\n export default class ComboBoxFieldComponent {\n    constructor() {\n         this.data = [\n             {\"name\":\"Alabama\",\"abbrev\":\"AL\"},\n             {\"name\":\"Alaska\",\"abbrev\":\"AK\"},\n             {\"name\":\"Arizona\",\"abbrev\":\"AZ\"}\n         ]\n   }\n   comboboxFieldReady(event) {\n       this.combobox = event.detail.cmp;\n       this.combobox.setOptions(this.data);\n   }\n }\n\n window.comboboxfield = new ComboBoxFieldComponent();\n ```</div>\n <div style=\"background:lightgray\">```javascript\n @example({framework: 'ext-react', packages:['ext-react']})\n import React, { Component } from 'react';\n import { ExtFormPanel, ExtComboBox } from '@sencha/ext-react';\n\n export default class MyExample extends Component {\n     render() {\n          const data = [\n               {\"name\":\"Alabama\",\"abbrev\":\"AL\"},\n               {\"name\":\"Alaska\",\"abbrev\":\"AK\"},\n               {\"name\":\"Arizona\",\"abbrev\":\"AZ\"}\n          ]\n\n          return (\n              <ExtFormPanel shadow>\n                  <ExtComboBox\n                      width={200}\n                      label=\"State\"\n                      options={data}\n                      displayField=\"name\"\n                      valueField=\"code\"\n                      queryMode=\"local\"\n                      labelAlign=\"placeholder\"\n                      typeAhead\n                  />\n              </ExtFormPanel>\n          )\n      }\n }\n ```</div>\n"
}