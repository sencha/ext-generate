/*! stacktable.js | Author & copyright (c) 2012: John Polacek | CardTable by: Justin McNally (2015) | Dual MIT & GPL license | Requires jQuery version 1.7 or above */
;(function($) {$.fn.cardtable = function(options) {var $tables = this, defaults = {headIndex: 0 }, settings = $.extend({}, defaults, options), headIndex; if (options && options.headIndex) headIndex = options.headIndex; else headIndex = 0; return $tables.each(function() {var $table = $(this); if ($table.hasClass('stacktable')) {return; } var table_css = $(this).prop('class'); var $stacktable = $('<div></div>'); if (typeof settings.myClass !== 'undefined') $stacktable.addClass(settings.myClass); var markup = ''; var $caption, $topRow, headMarkup, bodyMarkup, tr_class; $table.addClass('stacktable large-only'); $caption = $table.find("caption").clone(); $topRow = $table.find('tr').eq(0); $table.find('tbody tr').each(function() {headMarkup = ''; bodyMarkup = ''; tr_class = $(this).prop('class'); $(this).find('td,th').each(function(cellIndex) {if ($(this).html() !== '') {bodyMarkup += '<tr class="' + tr_class + '">'; if ($topRow.find('td,th').eq(cellIndex).html()) {bodyMarkup += '<td class="st-key">' + $topRow.find('td,th').eq(cellIndex).html() + '</td>'; } else {bodyMarkup += '<td class="st-key"></td>'; } bodyMarkup += '<td class="st-val ' + $(this).prop('class') + '">' + $(this).html() + '</td>'; bodyMarkup += '</tr>'; } }); markup += '<table class=" ' + table_css + ' stacktable small-only"><tbody>' + headMarkup + bodyMarkup + '</tbody></table>'; }); $table.find('tfoot tr td').each(function(rowIndex, value) {if ($.trim($(value).text()) !== '') {markup += '<table class="' + table_css + ' stacktable small-only"><tbody><tr><td>' + $(value).html() + '</td></tr></tbody></table>'; } }); $stacktable.prepend($caption); $stacktable.append($(markup)); $table.before($stacktable); }); }; $.fn.stacktable = function(options) {var $tables = this, defaults = {headIndex: 0 }, settings = $.extend({}, defaults, options), headIndex; if (options && options.headIndex) headIndex = options.headIndex; else headIndex = 0; return $tables.each(function() {var table_css = $(this).prop('class'); var $stacktable = $('<table class="' + table_css + ' stacktable small-only"><tbody></tbody></table>'); if (typeof settings.myClass !== 'undefined') $stacktable.addClass(settings.myClass); var markup = ''; var $table, $caption, $topRow, headMarkup, bodyMarkup, tr_class; $table = $(this); $table.addClass('stacktable large-only'); $caption = $table.find("caption").clone(); $topRow = $table.find('tr').eq(0); $table.find('tr').each(function(rowIndex) {headMarkup = ''; bodyMarkup = ''; tr_class = $(this).prop('class'); if (rowIndex === 0) {markup += '<tr class=" ' + tr_class + ' "><th class="st-head-row st-head-row-main" colspan="2">' + $(this).find('th,td').eq(headIndex).html() + '</th></tr>'; } else {$(this).find('td,th').each(function(cellIndex) {if (cellIndex === headIndex) {headMarkup = '<tr class="' + tr_class + '"><th class="st-head-row" colspan="2">' + $(this).html() + '</th></tr>'; } else {if ($(this).html() !== '') {bodyMarkup += '<tr class="' + tr_class + '">'; if ($topRow.find('td,th').eq(cellIndex).html()) {bodyMarkup += '<td class="st-key">' + $topRow.find('td,th').eq(cellIndex).html() + '</td>'; } else {bodyMarkup += '<td class="st-key"></td>'; } bodyMarkup += '<td class="st-val ' + $(this).prop('class') + '">' + $(this).html() + '</td>'; bodyMarkup += '</tr>'; } } }); markup += headMarkup + bodyMarkup; } }); $stacktable.prepend($caption); $stacktable.append($(markup)); $table.before($stacktable); }); }; $.fn.stackcolumns = function(options) {var $tables = this, defaults = {}, settings = $.extend({}, defaults, options); return $tables.each(function() {var $table = $(this); var num_cols = $table.find('tr').eq(0).find('td,th').length; if (num_cols < 3) return; var $stackcolumns = $('<table class="stacktable small-only"></table>'); if (typeof settings.myClass !== 'undefined') $stackcolumns.addClass(settings.myClass); $table.addClass('stacktable large-only'); var tb = $('<tbody></tbody>'); var col_i = 1; while (col_i < num_cols) {$table.find('tr').each(function(index) {var tem = $('<tr></tr>'); if (index === 0) tem.addClass("st-head-row st-head-row-main"); var first = $(this).find('td,th').eq(0).clone().addClass("st-key"); var target = col_i; if ($(this).find("*[colspan]").length) {var i = 0; $(this).find('td,th').each(function() {var cs = $(this).attr("colspan"); if (cs) {cs = parseInt(cs, 10); target -= cs - 1; if ((i + cs) > (col_i)) target += i + cs - col_i - 1; i += cs; } else i++; if (i > col_i) return false; }); } var second = $(this).find('td,th').eq(target).clone().addClass("st-val").removeAttr("colspan"); tem.append(first, second); tb.append(tem); }); ++col_i; } $stackcolumns.append($(tb)); $table.before($stackcolumns); }); }; $.fn.tableflip = function(options) {var $tables = this, defaults = {}, settings = $.extend({}, defaults, options); return $tables.each(function() {var $table = $(this); function find_size(m, x, y) {var r = {w: 0, h: 0 }; while ((y + r.h < m.length) && (m[y][x] == m[y + r.h][x])) r.h++; while ((x + r.w < m[y].length) && (m[y][x] == m[y][x + r.w])) r.w++; return r; } function flip_matrix(m) {var mx = []; for (var y = 0; y < m.length; y++) {for (var x = 0; x < m[y].length; x++) {if (typeof(mx[x]) === "undefined") mx[x] = []; mx[x][y] = m[y][x]; } } return mx; } if ($table.css('display') == $table.attr('data-view')) {return; } var rc = []; var rcx = []; var temp = $("<table data-table-flip=\"true\"><tbody></tbody></table>"); var sourceTable = temp.filter('table').attr({'data-view': $table.css('display'), 'class': $table.attr('class') }).toggleClass('tableflip'); var newTable = sourceTable.children("tbody"); $table.children("tbody").children("tr").each(function(rIndex, rItem) {if (typeof(rc[rIndex]) === "undefined") rc[rIndex] = []; var x = 0; $(this).children("th,td").each(function(cIndex, dItem) {var w = parseInt($(this).attr("colspan")) || 1; var h = parseInt($(this).attr("rowspan")) || 1; while (typeof(rc[rIndex][x]) !== "undefined") x++; for (var yy = 0; yy < h; yy++) {for (var xx = 0; xx < w; xx++) {if (typeof(rc[rIndex + yy]) === "undefined") rc[rIndex + yy] = []; rc[rIndex + yy][x + xx] = $(this)[0].outerHTML; } } x += w; }); }); rcx = flip_matrix(rc); for (var y = 0; y < rcx.length; y++) {if (newTable.children("tr:eq(" + y + ")").html() == null) {newTable.append("<tr></tr>"); } for (var x = 0; x < rcx[y].length; x++) {if (typeof(rcx[y][x]) !== "undefined") {newTable.children("tr:eq(" + y + ")").append(rcx[y][x]); var cell = newTable.children("tr:eq(" + y + ")").find(':last-child'); var r = find_size(rcx, x, y); cell.attr("rowspan", r.h); cell.attr("colspan", r.w); for (var yy = 0; yy < r.h; yy++) {for (var xx = 0; xx < r.w; xx++) {rcx[y + yy][x + xx] = undefined; } } } } } $table.replaceWith( sourceTable ); }); }; $(window).resize(function() {$('table[data-table-flip="true"]').tableflip(); }); }(jQuery));
